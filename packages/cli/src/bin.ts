#!/usr/bin/env node
import c from 'ansi-colors';
import { createCommand } from 'commander';
import fs from 'node:fs';
import { sep } from 'node:path';
import { pathToFileURL } from 'node:url';
import ora from 'ora';

import plugin from './generators/tanstack-react/plugin.js';
import { writeOpenAPIServices } from './generators/tanstack-react/writeOpenAPIServices.js';
import { getDocumentServices } from './lib/open-api/getDocumentServices.js';

export const program = createCommand()
  .description(
    'Generate services declarations and Typed React Query Interfaces from OpenAPI Schema'
  )
  .argument('[input]', 'Input OpenAPI Schema file path, URL (json, yml)', null)
  .requiredOption(
    '-o, --output-dir <path>',
    'Output directory for generated services'
  )
  .option('-rm, --clean', 'Clean output directory before generating services')
  .option(
    '--filter-services <glob-pattern>',
    'Filter services to be generated by glob pattern. Eg: "/user/**,/post/**". See NPM `micromatch` package for more details.'
  )
  .option(
    '--postfix-services <string>',
    'Postfix to be added to the generated service name (eg: Service)'
  )
  .option(
    '--service-name-base <endpoint[<index>] | tags>',
    'Use OpenAPI Operation `endpoint[<index>]` path part (e.g.: "/0/1/2") or `tags` as the base name of the service.',
    'endpoint[0]'
  )
  .action(async (input, args) => {
    const { version: packageVersion, name: packageName } = JSON.parse(
      fs.readFileSync(new URL('../package.json', import.meta.url), 'utf8')
    );

    if (args.version) {
      console.info(`v${packageVersion}`);
      process.exit(0);
    }

    console.info(`âœ¨ ${c.bold(`${packageName} ${packageVersion}`)}`);

    const source = input
      ? new URL(input, pathToFileURL(`${process.cwd()}/`))
      : process.stdin;

    if (source === process.stdin && source.isTTY) {
      console.error(
        c.red(
          'Input file not found or stdin is empty. Please specify `--input` option or pipe OpenAPI Schema to stdin.'
        )
      );

      process.exit(1);
    }

    const services = await getDocumentServices({
      output: {
        postfixServices: args.postfixServices,
        serviceNameBase: args.serviceNameBase,
      },
      servicesGlob: parseServicesFilterOption(args.filterServices),
      source,
    });

    const spinner = ora('Starting generation').start();

    const fileItems = await plugin.action({
      spinner,
      services,
      args,
      output: {
        dir: normalizeOutputDirPath(args.outputDir),
        clean: args.clean,
      },
    });

    await writeOpenAPIServices({
      fileItems,
      spinner,
    }).catch((error) => {
      if (error instanceof Error)
        console.error(c.red(error.message), c.red(error.stack ?? ''));
      console.error(error);
      process.exit(1);
    });

    spinner.succeed(c.green('Services has been generated'));
  });

/**
 * Normalize an output directory path by adding trailing slash
 */
function normalizeOutputDirPath(outputDir: string): URL {
  return pathToFileURL(
    outputDir.endsWith(sep) ? outputDir : `${outputDir}${sep}`
  );
}

/**
 * Parse services filter option to array
 * @example
 * ```ts
 * parseServicesFilterOption('/user/**,/post/**')
 * ```
 * @param endpointGlobs
 */
function parseServicesFilterOption(
  endpointGlobs: string
): string[] | undefined {
  return endpointGlobs
    ? endpointGlobs
        .split(',')
        .filter((item: unknown): item is string =>
          Boolean(typeof item === 'string' && item.trim())
        )
    : undefined;
}
