{
  "openapi": "3.1.0",
  "info": {
    "title": "Monite Partner API",
    "version": "2023-06-04",
    "description": "The Monite REST API, for Monite partners to integrate with our solution.",
    "termsOfService": "https://monite.com/terms",
    "contact": {
      "name": "Monite team",
      "url": "https://monite.com/about/",
      "email": "developers@monite.com"
    }
  },
  "servers": [
    {
      "url": "https://api.dev.monite.com/v1",
      "description": "Development environment"
    },
    {
      "url": "https://api.sandbox.monite.com/v1",
      "description": "Sandbox environment"
    },
    {
      "url": "https://api.monite.com/v1",
      "description": "Production environment"
    }
  ],
  "paths": {
    "/accounting_connections": {
      "get": {
        "tags": ["Accounting connections"],
        "summary": "Get accounting connections",
        "description": "Get all connections",
        "operationId": "get_accounting_connections",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingConnectionList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Accounting connections"],
        "summary": "Connect to an accounting system",
        "description": "Create new connection",
        "operationId": "post_accounting_connections",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountingConnectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingConnectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/accounting_connections/{connection_id}": {
      "get": {
        "tags": ["Accounting connections"],
        "summary": "Get an accounting connection by ID",
        "description": "Get connection by id",
        "operationId": "get_accounting_connections_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "connection_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingConnectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/accounting_connections/{connection_id}/disconnect": {
      "post": {
        "tags": ["Accounting connections"],
        "summary": "Disconnect from an accounting system",
        "description": "Disconnect",
        "operationId": "post_accounting_connections_id_disconnect",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "connection_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingConnectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/accounting_sync_rules": {
      "get": {
        "tags": ["Accounting synchronization rules"],
        "summary": "Get accounting sync rules",
        "operationId": "get_accounting_sync_rules",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingSyncRulesBody"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Accounting synchronization rules"],
        "summary": "Update accounting sync rules",
        "operationId": "patch_accounting_sync_rules",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountingSyncRulesBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingSyncRulesBody"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_policies": {
      "get": {
        "tags": ["Approval policies"],
        "summary": "Get approval policies",
        "description": "Retrieve a list of all approval policies with pagination.",
        "operationId": "get_approval_policies",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ApprovalPolicyCursorFields" }
              ],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string", "format": "uuid" }
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/ApprovalPolicyStatus" },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/ApprovalPolicyStatus" }
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__ncontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalPolicyResourceList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Approval policies"],
        "summary": "Create an approval policy",
        "description": "Create a new approval policy.",
        "operationId": "post_approval_policies",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ApprovalPolicyCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalPolicyResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Possible responses: `Script validation error: {errors}.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_policies/{approval_policy_id}": {
      "get": {
        "tags": ["Approval policies"],
        "summary": "Get an approval policy by ID",
        "description": "Retrieve a specific approval policy.",
        "operationId": "get_approval_policies_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_policy_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalPolicyResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Approval policies"],
        "summary": "Delete an approval policy",
        "description": "Delete an existing approval policy.",
        "operationId": "delete_approval_policies_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_policy_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Approval policies"],
        "summary": "Update an approval policy",
        "description": "Update an existing approval policy.",
        "operationId": "patch_approval_policies_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_policy_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ApprovalPolicyUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalPolicyResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_policies/{approval_policy_id}/processes": {
      "get": {
        "tags": ["Approval policies"],
        "summary": "Get approval processes created from a policy",
        "description": "Retrieve a list of all approval policy processes.",
        "operationId": "get_approval_policies_id_processes",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_policy_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalProcessResourceList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_policies/{approval_policy_id}/processes/{process_id}": {
      "get": {
        "tags": ["Approval policies"],
        "summary": "Get an approval process by ID",
        "description": "Retrieve a specific approval policy process.",
        "operationId": "get_approval_policies_id_processes_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_policy_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "process_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProcessResource" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Possible responses: `Approval policy with ID {id} not found.`, `Approval policy process with ID {id} not found.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_policies/{approval_policy_id}/processes/{process_id}/cancel": {
      "post": {
        "tags": ["Approval policies"],
        "summary": "Cancel an approval process",
        "description": "Cancel an ongoing approval process for a specific approval policy.",
        "operationId": "post_approval_policies_id_processes_id_cancel",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_policy_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "process_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProcessResource" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Possible responses: `Approval policy with ID {id} not found.`, `Approval policy process with ID {id} not found.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action is not allowed for approval policy process with id {id} because it is not in one of the following statuses: {possible_statuses}`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_policies/{approval_policy_id}/processes/{process_id}/steps": {
      "get": {
        "tags": ["Approval policies"],
        "summary": "Get the steps of an approval process",
        "description": "Retrieve a list of approval policy process steps.",
        "operationId": "get_approval_policies_id_processes_id_steps",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_policy_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "process_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalProcessStepResourceList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Possible responses: `Approval policy with ID {id} not found.`, `Approval policy process with ID {id} not found.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_requests": {
      "get": {
        "tags": ["Approval requests"],
        "summary": "Search",
        "description": "Get a list of approval requests.",
        "operationId": "get_approval_requests",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ApprovalRequestCursorFields" }
              ],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "object_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string", "format": "uuid" }
            },
            "name": "object_id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/ApprovalRequestStatus" },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/ApprovalRequestStatus" }
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "role_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/ObjectType" },
            "name": "object_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/ObjectType" }
            },
            "name": "object_type__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalRequestResourceList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Approval requests"],
        "summary": "Create",
        "description": "Create a new approval request.",
        "operationId": "post_approval_requests",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovalRequestCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalRequestResourceWithMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_requests/{approval_request_id}": {
      "get": {
        "tags": ["Approval requests"],
        "summary": "Get",
        "description": "Get a specific approval request by ID.",
        "operationId": "get_approval_requests_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_request_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalRequestResourceWithMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_requests/{approval_request_id}/approve": {
      "post": {
        "tags": ["Approval requests"],
        "summary": "Approve",
        "description": "Approve an approval request.",
        "operationId": "post_approval_requests_id_approve",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_request_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalRequestResourceWithMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_requests/{approval_request_id}/cancel": {
      "post": {
        "tags": ["Approval requests"],
        "summary": "Cancel",
        "description": "Cancel an approval request.",
        "operationId": "post_approval_requests_id_cancel",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_request_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalRequestResourceWithMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_requests/{approval_request_id}/reject": {
      "post": {
        "tags": ["Approval requests"],
        "summary": "Reject",
        "description": "Reject an approval request.",
        "operationId": "post_approval_requests_id_reject",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_request_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalRequestResourceWithMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/audit_logs": {
      "get": {
        "tags": ["Audit logs"],
        "summary": "Get the audit log",
        "operationId": "get_audit_logs",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "path__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/LogTypeEnum" },
            "name": "type",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/LogMethodEnum" },
            "name": "method",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "status_code",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "timestamp__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "timestamp__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "timestamp__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "timestamp__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 1.0, "default": 1 },
            "name": "page_num",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LogsResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/audit_logs/{log_id}": {
      "get": {
        "tags": ["Audit logs"],
        "summary": "Get an audit log entry",
        "operationId": "get_audit_logs_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "log_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LogResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/auth/revoke": {
      "post": {
        "tags": ["Access tokens"],
        "summary": "Revoke a token",
        "description": "Revoke an existing token immediately.",
        "operationId": "post_auth_revoke",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RevokeTokenPayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/auth/token": {
      "post": {
        "tags": ["Access tokens"],
        "summary": "Create a token",
        "description": "Create a new access token based on client ID and client secret.",
        "operationId": "post_auth_token",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ObtainTokenPayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessTokenResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/bank_accounts": {
      "get": {
        "tags": ["Entity bank accounts"],
        "summary": "Get an entity's bank accounts",
        "description": "Get all bank accounts of this entity.",
        "operationId": "get_bank_accounts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBankAccountPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Entity bank accounts"],
        "summary": "Create an entity bank account",
        "description": "Add a new bank account for the specified entity.\n\nThe minimum required fields are `currency` and `country`. Other required fields depend on the country:\n\n* EU bank accounts require `iban`.\n* UK bank accounts require `account_number` and `sort_code`.\n* US bank accounts require `account_number` and `routing_number`. Additionally, `account_holder_name`\n  is required for ACH payments.",
        "operationId": "post_bank_accounts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntityBankAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBankAccountResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/bank_accounts/complete_verification": {
      "post": {
        "tags": ["Entity bank account verifications"],
        "summary": "Complete entity bank account verification",
        "operationId": "post_bank_accounts_complete_verification",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteVerificationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteVerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/bank_accounts/start_verification": {
      "post": {
        "tags": ["Entity bank account verifications"],
        "summary": "Start entity bank account verification",
        "description": "Start entity bank account verification. The flow depends on verification type.\nFor airwallex_plaid it generates Plaid Link token to init the Plaid SDK.",
        "operationId": "post_bank_accounts_start_verification",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VerificationRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/bank_accounts/{bank_account_id}": {
      "get": {
        "tags": ["Entity bank accounts"],
        "summary": "Get an entity's bank account",
        "description": "Retrieve a bank account by its ID.",
        "operationId": "get_bank_accounts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBankAccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Entity bank accounts"],
        "summary": "Delete an entity's bank account",
        "description": "Delete the bank account specified by its ID.",
        "operationId": "delete_bank_accounts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entity bank accounts"],
        "summary": "Update an entity's bank account",
        "description": "Change the specified fields with the provided values.",
        "operationId": "patch_bank_accounts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntityBankAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBankAccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/bank_accounts/{bank_account_id}/complete_verification": {
      "post": {
        "tags": ["Entity bank account verifications"],
        "summary": "Complete verification of the provided entity bank account",
        "operationId": "post_bank_accounts_id_complete_verification",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteRefreshVerificationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRefreshVerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/bank_accounts/{bank_account_id}/make_default": {
      "post": {
        "tags": ["Entity bank accounts"],
        "summary": "Set an entity's bank account as the default for its currency",
        "description": "Set a bank account as the default for this entity per currency.",
        "operationId": "post_bank_accounts_id_make_default",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBankAccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/bank_accounts/{bank_account_id}/refresh_verification": {
      "post": {
        "tags": ["Entity bank account verifications"],
        "summary": "Refresh verification of the provided entity bank account",
        "operationId": "post_bank_accounts_id_refresh_verification",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VerificationRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/bank_accounts/{bank_account_id}/verifications": {
      "get": {
        "tags": ["Entity bank account verifications"],
        "summary": "Get a bank account verifications",
        "operationId": "get_bank_accounts_id_verifications",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountVerifications"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/batch_payments": {
      "post": {
        "tags": ["Batch payments"],
        "summary": "Create a batch payment",
        "operationId": "post_batch_payments",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsBatchPaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsBatchPaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/batch_payments/{batch_payment_id}": {
      "get": {
        "tags": ["Batch payments"],
        "summary": "Get batch payment by ID",
        "operationId": "get_batch_payments_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "batch_payment_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsBatchPaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/comments": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get comments",
        "description": "Get comments",
        "operationId": "get_comments",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectTypeAvailableComment"
            },
            "name": "object_type",
            "in": "query"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "object_id",
            "in": "query"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/CommentCursorFields" }],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommentResourceList" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Comments"],
        "summary": "Create a comment",
        "description": "Create new comment",
        "operationId": "post_comments",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CommentCreateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommentResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Could not notify groups: {not_valid_recipients}. Recipients dont exists`, `groups with ids: {','.join(missed_ids)} dont exists`, `Could not notify groups: {missed_groups}. Only {available_groups} are available`, `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/comments/{comment_id}": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get a comment by ID",
        "description": "Get comment",
        "operationId": "get_comments_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "comment_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommentResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Comments"],
        "summary": "Delete a comment",
        "description": "Delete comment",
        "operationId": "delete_comments_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "comment_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Comments"],
        "summary": "Update a comment",
        "description": "Update comment",
        "operationId": "patch_comments_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "comment_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CommentUpdateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommentResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts": {
      "get": {
        "tags": ["Counterparts"],
        "summary": "Get all counterparts",
        "operationId": "get_counterparts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The IBAN of the counterpart's bank account.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 34,
              "description": "The IBAN of the counterpart's bank account."
            },
            "name": "iban",
            "in": "query"
          },
          {
            "description": "The tax ID of the counterpart.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 30,
              "description": "The tax ID of the counterpart."
            },
            "name": "tax_id",
            "in": "query"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/CounterpartCursorFields" }
              ],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/CounterpartType" },
            "name": "type",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__iexact",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean" },
            "name": "is_vendor",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean" },
            "name": "is_customer",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "email",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "email__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "email__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "address.country",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "address.city",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "address.postal_code",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "address.state",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "address.line1",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "address.line2",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Counterparts"],
        "summary": "Create a counterpart",
        "operationId": "post_counterparts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartCreatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CounterpartResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}": {
      "get": {
        "tags": ["Counterparts"],
        "summary": "Get a counterpart",
        "operationId": "get_counterparts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CounterpartResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Counterparts"],
        "summary": "Delete a counterpart",
        "operationId": "delete_counterparts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Counterparts"],
        "summary": "Update a counterpart",
        "operationId": "patch_counterparts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartUpdatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CounterpartResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/addresses": {
      "get": {
        "tags": ["Counterpart addresses"],
        "summary": "Get a counterpart's addresses",
        "operationId": "get_counterparts_id_addresses",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartAddressResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Counterpart addresses"],
        "summary": "Create a counterpart address",
        "operationId": "post_counterparts_id_addresses",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CounterpartAddress" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartAddressResponseWithCounterpartID"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/addresses/{address_id}": {
      "get": {
        "tags": ["Counterpart addresses"],
        "summary": "Get a counterpart's address",
        "operationId": "get_counterparts_id_addresses_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "address_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartAddressResponseWithCounterpartID"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Counterpart addresses"],
        "summary": "Delete a counterpart's address",
        "operationId": "delete_counterparts_id_addresses_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "address_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Counterpart addresses"],
        "summary": "Update a counterpart's address",
        "operationId": "patch_counterparts_id_addresses_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "address_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartUpdateAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartAddressResponseWithCounterpartID"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/addresses/{address_id}/make_default": {
      "post": {
        "tags": ["Counterpart addresses"],
        "summary": "Set a counterpart's default address",
        "operationId": "post_counterparts_id_addresses_id_make_default",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "address_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartAddressResponseWithCounterpartID"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/bank_accounts": {
      "get": {
        "tags": ["Counterpart bank accounts"],
        "summary": "Get a counterpart's bank accounts",
        "operationId": "get_counterparts_id_bank_accounts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartBankAccountResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Counterpart bank accounts"],
        "summary": "Create a counterpart bank account",
        "operationId": "post_counterparts_id_bank_accounts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCounterpartBankAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartBankAccountResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}": {
      "get": {
        "tags": ["Counterpart bank accounts"],
        "summary": "Get a counterpart's bank account",
        "operationId": "get_counterparts_id_bank_accounts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartBankAccountResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Counterpart bank accounts"],
        "summary": "Delete a counterpart's bank account",
        "operationId": "delete_counterparts_id_bank_accounts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Counterpart bank accounts"],
        "summary": "Update a counterpart's bank account",
        "operationId": "patch_counterparts_id_bank_accounts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCounterpartBankAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartBankAccountResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}/make_default": {
      "post": {
        "tags": ["Counterpart bank accounts"],
        "summary": "Set a counterpart's bank account as default for its currency",
        "operationId": "post_counterparts_id_bank_accounts_id_make_default",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/contacts": {
      "get": {
        "tags": ["Counterpart contacts"],
        "summary": "Get a counterpart's contacts",
        "operationId": "get_counterparts_id_contacts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartContactsResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Counterpart contacts"],
        "summary": "Create a counterpart contact",
        "operationId": "post_counterparts_id_contacts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCounterpartContactPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartContactResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/contacts/{contact_id}": {
      "get": {
        "tags": ["Counterpart contacts"],
        "summary": "Get a counterpart's contact",
        "operationId": "get_counterparts_id_contacts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "contact_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartContactResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Counterpart contacts"],
        "summary": "Delete a counterpart's contact",
        "operationId": "delete_counterparts_id_contacts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "contact_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Counterpart contacts"],
        "summary": "Update a counterpart's contact",
        "operationId": "patch_counterparts_id_contacts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "contact_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCounterpartContactPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartContactResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/contacts/{contact_id}/make_default": {
      "post": {
        "tags": ["Counterpart contacts"],
        "summary": "Set a counterpart's default contact",
        "operationId": "post_counterparts_id_contacts_id_make_default",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "contact_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartContactResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/partner_metadata": {
      "get": {
        "tags": ["Counterparts"],
        "summary": "Get counterpart metadata",
        "operationId": "get_counterparts_id_partner_metadata",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerMetadataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "put": {
        "tags": ["Counterparts"],
        "summary": "Replace counterpart metadata",
        "operationId": "put_counterparts_id_partner_metadata",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PartnerMetadata" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerMetadataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/vat_ids": {
      "get": {
        "tags": ["Counterpart VAT IDs"],
        "summary": "Get a counterpart's VAT IDs",
        "operationId": "get_counterparts_id_vat_ids",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartVatIDResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Counterpart VAT IDs"],
        "summary": "Create a counterpart VAT ID",
        "operationId": "post_counterparts_id_vat_ids",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CounterpartVatID" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartVatIDResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/vat_ids/{vat_id}": {
      "get": {
        "tags": ["Counterpart VAT IDs"],
        "summary": "Get a counterpart's VAT ID",
        "operationId": "get_counterparts_id_vat_ids_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "vat_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartVatIDResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Counterpart VAT IDs"],
        "summary": "Delete a counterpart's VAT ID",
        "operationId": "delete_counterparts_id_vat_ids_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "vat_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Counterpart VAT IDs"],
        "summary": "Update a counterpart's VAT ID",
        "operationId": "patch_counterparts_id_vat_ids_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "vat_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartUpdateVatID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartVatIDResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/data_exports": {
      "get": {
        "tags": ["Data exports"],
        "summary": "Get All",
        "operationId": "get_data_exports",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/DataExportCursorFields" }
              ],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by_entity_user_id",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllDocumentExportResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Data exports"],
        "summary": "Add Document Export",
        "operationId": "post_data_exports",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ExportPayloadSchema" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateExportTaskResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Not all statuses are available: {missed_statuses}. Available ones: {object_statuses},`{missed_objects} are not allowed. Available only {objects}`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/data_exports/extra_data": {
      "get": {
        "tags": ["Extra data"],
        "summary": "Get All",
        "operationId": "get_data_exports_extra_data",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ExportSettingCursorFields" }
              ],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "object_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "field_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "field_value",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtraDataResourceList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Extra data"],
        "summary": "Create Extra Data",
        "operationId": "post_data_exports_extra_data",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtraDataCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ExtraDataResource" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/data_exports/extra_data/{extra_data_id}": {
      "get": {
        "tags": ["Extra data"],
        "summary": "Get Extra Data By Id",
        "operationId": "get_data_exports_extra_data_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "extra_data_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ExtraDataResource" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Extra data"],
        "summary": "Delete Extra Data",
        "operationId": "delete_data_exports_extra_data_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "extra_data_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ExtraDataResource" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Extra data"],
        "summary": "Update Extra Data",
        "operationId": "patch_data_exports_extra_data_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "extra_data_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtraDataUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ExtraDataResource" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/data_exports/supported_formats": {
      "get": {
        "tags": ["Data exports"],
        "summary": "Get Supported Export Formats",
        "operationId": "get_data_exports_supported_formats",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Data Exports Supported Formats",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupportedFormatSchema"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/data_exports/{document_export_id}": {
      "get": {
        "tags": ["Data exports"],
        "summary": "Get Document Export By Id",
        "operationId": "get_data_exports_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "document_export_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentExportResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/document_templates": {
      "get": {
        "tags": ["PDF templates"],
        "summary": "Get PDF templates",
        "description": "This API call returns all supported templates with language codes.",
        "operationId": "get_document_templates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/document_templates/system": {
      "get": {
        "tags": ["PDF templates"],
        "summary": "Get built-in PDF templates",
        "description": "This API call returns all supported system templates with language codes.",
        "operationId": "get_document_templates_system",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/document_templates/{document_template_id}": {
      "get": {
        "tags": ["PDF templates"],
        "summary": "Get a PDF template by ID",
        "operationId": "get_document_templates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "document_template_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateReceivableResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/document_templates/{document_template_id}/make_default": {
      "post": {
        "tags": ["PDF templates"],
        "summary": "Set the default PDF template",
        "operationId": "post_document_templates_id_make_default",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "document_template_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateReceivableResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/document_templates/{document_template_id}/preview": {
      "get": {
        "tags": ["PDF templates"],
        "summary": "Send the preview of PDF template",
        "operationId": "get_document_templates_id_preview",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "document_template_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/pdf": {} }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities": {
      "get": {
        "tags": ["Entities"],
        "summary": "Get all entities",
        "description": "Retrieve a list of all entities.",
        "operationId": "get_entities",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/EntityCursorFields" }],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/EntityTypeEnum" },
            "name": "type",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__not_in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "email",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "items": { "type": "string" }, "type": "array" },
            "name": "email__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "items": { "type": "string" }, "type": "array" },
            "name": "email__not_in",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Entities"],
        "summary": "Create an entity",
        "description": "Create a new entity from the specified values.",
        "operationId": "post_entities",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateEntityRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/me": {
      "get": {
        "tags": ["Entities"],
        "summary": "Get the current entity",
        "description": "Deprecated. Use `GET /entity_users/my_entity` instead.",
        "operationId": "get_entities_me",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "deprecated": true,
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entities"],
        "summary": "Update the current entity",
        "description": "Deprecated. Use `PATCH /entity_users/my_entity` instead.",
        "operationId": "patch_entities_me",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateEntityRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "deprecated": true,
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}": {
      "get": {
        "tags": ["Entities"],
        "summary": "Get an entity",
        "description": "Retrieve an entity by its ID.",
        "operationId": "get_entities_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "A unique ID to specify the entity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "A unique ID to specify the entity."
            },
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
            "name": "entity_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entities"],
        "summary": "Update an entity",
        "description": "Change the specified fields with the provided values.",
        "operationId": "patch_entities_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "A unique ID to specify the entity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "A unique ID to specify the entity."
            },
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
            "name": "entity_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateEntityRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/documents": {
      "post": {
        "tags": ["Onboarding documents"],
        "summary": "Update entity onboarding documents",
        "description": "Update the onboarding documents of an entity.",
        "operationId": "post_entities_id_documents",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EntityOnboardingDocuments"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/logo": {
      "put": {
        "tags": ["Entities"],
        "summary": "Upload an entity logo",
        "description": "Entity logo can be PNG, JPG, or GIF, up to 10 MB in size. The logo is used, for example, in PDF documents created by this entity.",
        "operationId": "put_entities_id_logo",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "A unique ID to specify the entity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "A unique ID to specify the entity."
            },
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
            "name": "entity_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EntityLogoUploadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/monite__schemas__file_saver__FileSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/onboarding_data": {
      "get": {
        "tags": ["Entity onboarding data"],
        "summary": "Get entity onboarding data",
        "operationId": "get_entities_id_onboarding_data",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityOnboardingDataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "put": {
        "tags": ["Entity onboarding data"],
        "summary": "Update entity onboarding data",
        "operationId": "put_entities_id_onboarding_data",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "x-forwarded-for",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityOnboardingDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityOnboardingDataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entity onboarding data"],
        "summary": "Patch entity onboarding data",
        "operationId": "patch_entities_id_onboarding_data",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "x-forwarded-for",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityOnboardingDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityOnboardingDataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/onboarding_requirements": {
      "get": {
        "tags": ["Onboarding requirements"],
        "summary": "Get onboarding requirements",
        "description": "Check the information required to complete the onboarding process.",
        "operationId": "get_entities_id_onboarding_requirements",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingRequirementsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/partner_metadata": {
      "get": {
        "tags": ["Entities"],
        "summary": "Get entity metadata",
        "description": "Retrieve a metadata object associated with this entity, usually in a JSON format.",
        "operationId": "get_entities_id_partner_metadata",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerMetadataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "put": {
        "tags": ["Entities"],
        "summary": "Replace entity metadata",
        "description": "Fully replace the current metadata object with the specified instance.",
        "operationId": "put_entities_id_partner_metadata",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PartnerMetadata" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerMetadataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/payment_methods": {
      "get": {
        "tags": ["Payment methods"],
        "summary": "Get Enabled Payment Methods",
        "description": "Get all enabled payment methods.",
        "operationId": "get_entities_id_payment_methods",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingPaymentMethodsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "put": {
        "tags": ["Payment methods"],
        "summary": "Enable Payment Methods",
        "description": "Set which payment methods should be enabled.",
        "operationId": "put_entities_id_payment_methods",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EnabledPaymentMethods" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingPaymentMethodsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/settings": {
      "get": {
        "tags": ["Entities"],
        "summary": "Get entity settings",
        "description": "Retrieve all settings for this entity.",
        "operationId": "get_entities_id_settings",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "A unique ID to specify the entity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "A unique ID to specify the entity."
            },
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
            "name": "entity_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedSettingsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entities"],
        "summary": "Update entity settings",
        "description": "Change the specified fields with the provided values.",
        "operationId": "patch_entities_id_settings",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "A unique ID to specify the entity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "A unique ID to specify the entity."
            },
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
            "name": "entity_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PatchSettingsPayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedSettingsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/vat_ids": {
      "get": {
        "tags": ["Entity VAT IDs"],
        "summary": "Get an entity's VAT IDs",
        "operationId": "get_entities_id_vat_ids",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityVatIDResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Entity VAT IDs"],
        "summary": "Create an entity VAT ID",
        "operationId": "post_entities_id_vat_ids",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EntityVatID" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityVatIDResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/vat_ids/{id}": {
      "get": {
        "tags": ["Entity VAT IDs"],
        "summary": "Get an entity's VAT ID",
        "operationId": "get_entities_id_vat_ids_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityVatIDResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Entity VAT IDs"],
        "summary": "Delete an entity's VAT ID",
        "operationId": "delete_entities_id_vat_ids_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entity VAT IDs"],
        "summary": "Update an entity's VAT ID",
        "operationId": "patch_entities_id_vat_ids_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EntityUpdateVatID" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityVatIDResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entity_users": {
      "get": {
        "tags": ["Entity users"],
        "summary": "Get all entity users",
        "description": "Retrieve a list of all entity users.",
        "operationId": "get_entity_users",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/EntityUserCursorFields" }
              ],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__not_in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "role_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "role_id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "login",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "first_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityUserPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Entity users"],
        "summary": "Create an entity user",
        "description": "Create a new entity user from the specified values.",
        "operationId": "post_entity_users",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntityUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityUserResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entity_users/me": {
      "get": {
        "tags": ["Entity users"],
        "summary": "Get current entity user",
        "description": "Retrieve an entity user by its ID.",
        "operationId": "get_entity_users_me",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityUserResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entity users"],
        "summary": "Update current entity user",
        "description": "Change the specified fields with provided values.",
        "operationId": "patch_entity_users_me",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMeEntityUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityUserResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entity_users/my_entity": {
      "get": {
        "tags": ["Entities"],
        "summary": "Get an entity of this user",
        "description": "Retrieves information of an entity, which this entity user belongs to.",
        "operationId": "get_entity_users_my_entity",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entities"],
        "summary": "Update an entity of this user",
        "description": "Update information of an entity, which this entity user belongs to.",
        "operationId": "patch_entity_users_my_entity",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateEntityRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entity_users/my_role": {
      "get": {
        "tags": ["Entity user role"],
        "summary": "Get current entity user role",
        "operationId": "get_entity_users_my_role",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entity_users/{entity_user_id}": {
      "get": {
        "tags": ["Entity users"],
        "summary": "Get an entity user",
        "description": "Retrieve an entity user by its ID.",
        "operationId": "get_entity_users_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_user_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityUserResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entity users"],
        "summary": "Update an entity user",
        "description": "Change the specified fields with provided values.",
        "operationId": "patch_entity_users_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_user_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntityUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityUserResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/files": {
      "get": {
        "tags": ["Files"],
        "summary": "Get a files by ID",
        "operationId": "get_files",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array",
              "maxItems": 100
            },
            "name": "id__in",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FilesResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Files"],
        "summary": "Upload a file",
        "operationId": "post_files",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": { "$ref": "#/components/schemas/UploadFile" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FileResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/files/{file_id}": {
      "get": {
        "tags": ["Files"],
        "summary": "Get a file by ID",
        "operationId": "get_files_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "file_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FileResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Files"],
        "summary": "Delete a file",
        "operationId": "delete_files_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "file_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/accounting_connections/{connection_id}/sync_status": {
      "get": {
        "tags": ["Internal"],
        "summary": "Get Sync Status",
        "description": "Get all sync statuses\nNot production ready\nFor test purposes only, internal use only\nApi could be changed",
        "operationId": "get_internal_accounting_connections_id_sync_status",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "connection_id",
            "in": "path"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/SyncStatusCursorFields" }
              ],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/SyncStatus" },
            "name": "sync_status",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/ObjectMatchTypes" },
            "name": "type",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncStatusResponseList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/currencies": {
      "get": {
        "tags": ["Currencies internal", "Internal"],
        "summary": "Get Currencies",
        "operationId": "get_internal_currencies",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/CurrencyDetails"
                  },
                  "type": "object",
                  "title": "Response Get Internal Currencies"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/entities/{entity_id}/logo": {
      "get": {
        "tags": ["Entities", "Internal"],
        "summary": "Get entity logo",
        "description": "Retrieve info about entity logo.",
        "operationId": "get_internal_entities_id_logo",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FileResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/onboarding_links/{onboarding_link_id}": {
      "get": {
        "tags": ["Onboarding links"],
        "summary": "Get Onboarding Link",
        "operationId": "get_internal_onboarding_links_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinkInternalResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/onboarding_links/{onboarding_link_id}/airwallex_component": {
      "get": {
        "tags": ["Onboarding links"],
        "summary": "Get Onboarding Link Airwallex Component Data",
        "operationId": "get_internal_onboarding_links_id_airwallex_component",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinksAirwallexComponentDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Onboarding links"],
        "summary": "Update Onboarding Link Airwallex Component Data",
        "operationId": "patch_internal_onboarding_links_id_airwallex_component",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingLinksAirwallexComponentData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinksAirwallexComponentDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/onboarding_links/{onboarding_link_id}/airwallex_component/auth": {
      "post": {
        "tags": ["Onboarding links"],
        "summary": "Generate Authorization Code",
        "operationId": "post_internal_onboarding_links_id_airwallex_component_auth",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingLinksAirwallexComponentCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinksAirwallexComponentCodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/onboarding_links/{onboarding_link_id}/request_otp": {
      "post": {
        "tags": ["Onboarding links"],
        "summary": "Request Otp",
        "operationId": "post_internal_onboarding_links_id_request_otp",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyPhoneNumberPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/onboarding_links/{onboarding_link_id}/stripe": {
      "get": {
        "tags": ["Onboarding links"],
        "summary": "Get Onboarding Link Stripe Data",
        "operationId": "get_internal_onboarding_links_id_stripe",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinksStripeDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Onboarding links"],
        "summary": "Update Onboarding Link Stripe Data",
        "operationId": "patch_internal_onboarding_links_id_stripe",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingLinksStripeData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinksStripeDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/onboarding_links/{onboarding_link_id}/verify_otp": {
      "post": {
        "tags": ["Onboarding links"],
        "summary": "Verify Otp",
        "operationId": "post_internal_onboarding_links_id_verify_otp",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumberVerificationCheckPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessTokenResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_intents/{payment_intent_id}/authorize": {
      "post": {
        "tags": ["Payment intents internal", "Internal"],
        "summary": "Authorize Payment Link",
        "operationId": "post_internal_payment_intents_id_authorize",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthPaymentIntentPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthPaymentIntentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_intents/{payment_intent_id}/banks": {
      "get": {
        "tags": ["Payment intents internal", "Internal"],
        "summary": "Get Banks For Payment Intent",
        "operationId": "get_internal_payment_intents_id_banks",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BanksResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_intents/{payment_intent_id}/confirm_payment": {
      "post": {
        "tags": ["Payment intents internal", "Internal"],
        "summary": "Confirm Payment",
        "operationId": "post_internal_payment_intents_id_confirm_payment",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "user-agent",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "x-forwarded-for",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodsConfirmPaymentPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodsConfirmResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_intents/{payment_intent_id}/payments": {
      "post": {
        "tags": ["Payment intents internal", "Internal"],
        "summary": "Create Yapily Payment",
        "operationId": "post_internal_payment_intents_id_payments",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConsentPayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_links/{payment_link_id}": {
      "get": {
        "tags": ["Payment links", "Internal"],
        "summary": "Get Payment Link",
        "operationId": "get_internal_payment_links_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_link_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalPaymentLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/settings": {
      "get": {
        "tags": ["Internal"],
        "summary": "Get partner settings for frontend",
        "description": "Retrieve settings necessary for frontend for this partner.",
        "operationId": "get_internal_settings",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "partner_id",
            "in": "query"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerProjectSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/vat_rates": {
      "get": {
        "tags": ["VAT rates internal"],
        "summary": "Get All Vat Rates",
        "operationId": "get_internal_vat_rates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/VatRateStatusEnum" },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "valid_from",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "valid_until",
            "in": "query"
          },
          {
            "description": "Country code",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
              "description": "Country code"
            },
            "name": "country",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VatRateListResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["VAT rates internal"],
        "summary": "Create Vat Rates",
        "operationId": "post_internal_vat_rates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "$ref": "#/components/schemas/AllowedCountries" },
            "name": "country",
            "in": "query"
          },
          {
            "required": true,
            "schema": { "type": "integer" },
            "name": "value",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["VAT rates internal"],
        "summary": "Delete Vat Rates",
        "operationId": "delete_internal_vat_rates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "vat_rate_id",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/vat_rates/{vat_rate_id}": {
      "patch": {
        "tags": ["VAT rates internal"],
        "summary": "Update Vat Rates",
        "operationId": "patch_internal_vat_rates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "vat_rate_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VatRateUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/ledger_accounts": {
      "get": {
        "tags": ["Ledger accounts"],
        "summary": "Get ledger accounts",
        "description": "Get all ledger accounts",
        "operationId": "get_ledger_accounts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "maximum": 100.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/LedgerAccountCursorFields" }
              ],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerAccountListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/ledger_accounts/{ledger_account_id}": {
      "get": {
        "tags": ["Ledger accounts"],
        "summary": "Get a ledger account by ID",
        "description": "Get ledger account by id",
        "operationId": "get_ledger_accounts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "ledger_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the entity that owns the requested resource.",
              "format": "uuid"
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mail_templates": {
      "get": {
        "tags": ["Mail templates"],
        "summary": "Get All",
        "description": "Get all custom templates",
        "operationId": "get_mail_templates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomTemplates" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Mail templates"],
        "summary": "Create",
        "description": "Create custom template",
        "operationId": "post_mail_templates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCustomTemplateSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomTemplateDataSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mail_templates/system": {
      "get": {
        "tags": ["Mail templates"],
        "summary": "Get All System Templates",
        "description": "Get all system templates",
        "operationId": "get_mail_templates_system",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SystemTemplates" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mail_templates/variables": {
      "get": {
        "tags": ["Mail templates"],
        "summary": "Get Variables",
        "description": "This endpoint deprecated and will be removed in v2023-09-01, please use /v1/receivables/variables or /v1/payable_purchase_orders/variables instead",
        "operationId": "get_mail_templates_variables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesVariablesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "deprecated": true,
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mail_templates/{template_id}": {
      "get": {
        "tags": ["Mail templates"],
        "summary": "Get",
        "description": "Get custom template by ID",
        "operationId": "get_mail_templates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "template_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomTemplateDataSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Mail templates"],
        "summary": "Delete",
        "description": "Delete custom template bt ID",
        "operationId": "delete_mail_templates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "template_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Mail templates"],
        "summary": "Update",
        "description": "Update custom template by ID",
        "operationId": "patch_mail_templates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "template_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomTemplateSchemaRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomTemplateDataSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mail_templates/{template_id}/make_default": {
      "post": {
        "tags": ["Mail templates"],
        "summary": "Make Default",
        "description": "Make template default",
        "operationId": "post_mail_templates_id_make_default",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "template_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomTemplateDataSchema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mailbox_domains": {
      "get": {
        "tags": ["Mailbox domains"],
        "summary": "Get Domains",
        "description": "Get all domains owned by partner_id",
        "operationId": "get_mailbox_domains",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DomainListResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Mailbox domains"],
        "summary": "Create Domain",
        "description": "Create domain for the partner_id",
        "operationId": "post_mailbox_domains",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DomainRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DomainResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mailbox_domains/{domain_id}": {
      "delete": {
        "tags": ["Mailbox domains"],
        "summary": "Delete Domain",
        "description": "Delete domain for the partner_id",
        "operationId": "delete_mailbox_domains_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "domain_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mailbox_domains/{domain_id}/verify": {
      "post": {
        "tags": ["Mailbox domains"],
        "summary": "Verify Domain",
        "description": "Verify domain for the partner_id",
        "operationId": "post_mailbox_domains_id_verify",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "domain_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VerifyResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mailboxes": {
      "get": {
        "tags": ["Mailboxes"],
        "summary": "Get Mailboxes",
        "description": "Get all mailboxes owned by Entity",
        "operationId": "get_mailboxes",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MailboxDataResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Mailboxes"],
        "summary": "Create Mailbox",
        "description": "Create a new mailbox",
        "operationId": "post_mailboxes",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MailboxDomainRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MailboxResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mailboxes/search": {
      "post": {
        "tags": ["Mailboxes"],
        "summary": "Get Mailboxes By Multiple Entity Ids",
        "description": "Get all mailboxes owned by Entity",
        "operationId": "post_mailboxes_search",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailboxMultipleEntitiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MailboxDataResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mailboxes/{mailbox_id}": {
      "delete": {
        "tags": ["Mailboxes"],
        "summary": "Delete Mailbox",
        "description": "Delete mailbox",
        "operationId": "delete_mailboxes_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "mailbox_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/measure_units": {
      "get": {
        "tags": ["Measure units"],
        "summary": "Get measure units",
        "operationId": "get_measure_units",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnitListResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Measure units"],
        "summary": "Create a measure unit",
        "operationId": "post_measure_units",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UnitRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnitResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/measure_units/{unit_id}": {
      "get": {
        "tags": ["Measure units"],
        "summary": "Get a measure unit by ID",
        "operationId": "get_measure_units_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "unit_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnitResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Measure units"],
        "summary": "Delete a measure unit",
        "operationId": "delete_measure_units_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "unit_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Measure units"],
        "summary": "Update a measure unit",
        "operationId": "patch_measure_units_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "unit_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UnitUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnitResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/onboarding_links": {
      "post": {
        "tags": ["Onboarding links"],
        "summary": "Create Onboarding Link",
        "operationId": "post_onboarding_links",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OnboardingLinkRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinkPublicResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/overdue_reminders": {
      "get": {
        "tags": ["Overdue reminders"],
        "summary": "Get overdue reminder configurations",
        "operationId": "get_overdue_reminders",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllOverdueRemindersResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Overdue reminders"],
        "summary": "Create an overdue reminder configuration",
        "operationId": "post_overdue_reminders",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OverdueReminderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverdueReminderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/overdue_reminders/{overdue_reminder_id}": {
      "get": {
        "tags": ["Overdue reminders"],
        "summary": "Get an overdue reminder configuration by ID",
        "operationId": "get_overdue_reminders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "overdue_reminder_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverdueReminderResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Overdue reminders"],
        "summary": "Delete an overdue reminder configuration",
        "operationId": "delete_overdue_reminders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "overdue_reminder_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Overdue reminders"],
        "summary": "Update an overdue reminder configuration",
        "operationId": "patch_overdue_reminders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "overdue_reminder_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OverdueReminderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverdueReminderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_purchase_orders": {
      "get": {
        "tags": ["Purchase orders"],
        "summary": "Get purchase orders",
        "operationId": "get_payable_purchase_orders",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/PurchaseOrderCursorFields" }
              ],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issued_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issued_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issued_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issued_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PurchaseOrderStatusEnum"
            },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "items": { "type": "string" }, "type": "array" },
            "name": "document_id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "counterpart_id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart.name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/CurrencyEnum" },
            "name": "currency",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/CurrencyEnum" },
              "type": "array"
            },
            "name": "currency__in",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Purchase orders"],
        "summary": "Create a purchase order",
        "operationId": "post_payable_purchase_orders",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderPayloadSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_purchase_orders/variables": {
      "get": {
        "tags": ["Purchase orders"],
        "summary": "Get the available variables for purchase orders",
        "description": "Get a list of placeholders allowed to insert into an email template for customization",
        "operationId": "get_payable_purchase_orders_variables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VariablesObjectList" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_purchase_orders/{purchase_order_id}": {
      "get": {
        "tags": ["Purchase orders"],
        "summary": "Get a purchase order by ID",
        "operationId": "get_payable_purchase_orders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "purchase_order_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Purchase orders"],
        "summary": "Delete a purchase order",
        "operationId": "delete_payable_purchase_orders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "purchase_order_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Purchase orders"],
        "summary": "Update a purchase order",
        "operationId": "patch_payable_purchase_orders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "purchase_order_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePurchaseOrderPayloadSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_purchase_orders/{purchase_order_id}/preview": {
      "post": {
        "tags": ["Purchase orders"],
        "summary": "Preview a purchase order's email message",
        "operationId": "post_payable_purchase_orders_id_preview",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "purchase_order_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderEmailPreviewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderEmailPreviewResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_purchase_orders/{purchase_order_id}/send": {
      "post": {
        "tags": ["Purchase orders"],
        "summary": "Send a purchase order via email",
        "operationId": "post_payable_purchase_orders_id_send",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "purchase_order_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPurchaseOrderViaEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderEmailSentResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables": {
      "get": {
        "tags": ["Payables"],
        "summary": "Get payables",
        "description": "Lists all payables from the connected entity.\n\nIf you already have the data of the payable (amount in [minor units](\nhttps://docs.monite.com/docs/currencies#minor-units), currency, vendor information, and other details)\nstored somewhere as individual attributes, you can create a payable with these attributes by calling [POST\n/payables](https://docs.monite.com/reference/post_payables) and providing the [base64-encoded](\nhttps://en.wikipedia.org/wiki/Base64) contents of the original invoice file in the field `base64_encoded_file`.\n\nA payable is a financial document given by an entity`s supplier itemizing the purchase of a good or a service and\ndemanding payment.\n\nThe `file_name` field is optional. If omitted, it defaults to “default_file_name”. If the settings are configured\nto automatically set `suggested_payment_term`, this object can be omitted from the request body.\n\nThe `id` generated for this payable can be used in other API calls to update the data of this payable or trigger [\nstatus transitions](https://docs.monite.com/docs/payable-status-transitions), for example. essential data\nfields to move from `draft` to `new`\n\nRelated guide: [Create a payable from data](https://docs.monite.com/docs/collect-payables#create-a-payable-from-data)\n\nSee also:\n\n\n[Automatic calculation of due date](https://docs.monite.com/docs/collect-payables#automatic-calculation-of-due-date)\n\n[Suggested payment date](https://docs.monite.com/docs/collect-payables#suggested-payment-date)\n\n[Attach file](https://docs.monite.com/docs/collect-payables#attach-file)\n\n[Collect payables by email](https://docs.monite.com/docs/collect-payables#send-payables-by-email)\n\n[Manage line items](https://docs.monite.com/docs/manage-line-items)",
        "operationId": "get_payables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/PayableCursorFields" }],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/PayableStateEnum" },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/PayableStateEnum" },
              "type": "array"
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/CurrencyEnum" },
            "name": "currency",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "due_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "due_date__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "due_date__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "due_date__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "due_date__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "was_created_by_user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SourceOfPayableDataEnum"
            },
            "name": "source_of_payable_data",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayablePaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Payables"],
        "summary": "Create a payable",
        "description": "Add a new payable by providing the amount, currency, vendor name, and other details.\nYou can provide the base64_encoded contents of the original invoice file in the field `base64_encoded_file`.\n\nYou can use this endpoint to bypass the Monite OCR service and provide the data directly\n(for example, if you already have the data in place).\n\nA newly created payable has the the `draft` [status](https://docs.monite.com/docs/payables-lifecycle).",
        "operationId": "post_payables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayableUploadWithDataSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/upload_from_file": {
      "post": {
        "tags": ["Payables"],
        "summary": "Upload a payable from a file",
        "description": "Upload an incoming invoice (payable) in PDF, PNG, JPEG, or TIFF format and scan its contents. The maximum file size is 10MB.",
        "operationId": "post_payables_upload_from_file",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayableFromFileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}": {
      "get": {
        "tags": ["Payables"],
        "summary": "Get a payable by ID",
        "description": "Retrieves information about a specific payable with the given ID.",
        "operationId": "get_payables_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Payables"],
        "summary": "Update a payable",
        "description": "Updates the information about a specific payable.",
        "operationId": "patch_payables_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PayableUpdateSchema" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/approve_payment_operation": {
      "post": {
        "tags": ["Payables"],
        "summary": "Approve a payable for payment",
        "description": "Confirms that the payable is ready to be paid.",
        "operationId": "post_payables_id_approve_payment_operation",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/attach_file": {
      "post": {
        "tags": ["Payables"],
        "summary": "Attach a file to a payable",
        "description": "Attach file to payable without existing attachment.",
        "operationId": "post_payables_id_attach_file",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AttachFileToPayableRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/cancel": {
      "post": {
        "tags": ["Payables"],
        "summary": "Cancel a payable",
        "description": "Cancels the payable that was not confirmed during the review.",
        "operationId": "post_payables_id_cancel",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/line_items": {
      "get": {
        "tags": ["Payable line items"],
        "summary": "Get the line items of a payable",
        "description": "Get a list of all line items related to a specific payable.\nRelated guide: [List all payable line items](https://docs.monite.com/docs/manage-line-items#list-all-line-items-of-a-payable)\n\nSee also:\n\n[Manage line items](https://docs.monite.com/docs/manage-line-items)\n\n[Collect payables](https://docs.monite.com/docs/collect-payables)",
        "operationId": "get_payables_id_line_items",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/LineItemCursorFields" }
              ],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "was_created_by_user_id",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LineItemPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Payable line items"],
        "summary": "Add a line item to a payable",
        "description": "Add a new line item to a specific payable.\n\nThe `subtotal` and `total` fields of line items are automatically calculated based on the `unit_price`,\n `quantity`, and `tax` fields, therefore, are read-only and appear only in the response schema. The field\n  `ledger_account_id` is required **only** for account integration, otherwise, it is optional.\n\nRelated guide: [Add line items to a payable](https://docs.monite.com/docs/manage-line-items#add-line-items-to-a-payable)\n\nSee also:\n\n[Manage line items](https://docs.monite.com/docs/manage-line-items)\n\n[Collect payables](https://docs.monite.com/docs/collect-payables)",
        "operationId": "post_payables_id_line_items",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LineItemRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LineItemResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/line_items/{line_item_id}": {
      "get": {
        "tags": ["Payable line items"],
        "summary": "Get a single line item of a payable",
        "description": "Get information about a specific line item with a given ID.\n\nRelated guide: [Retrieve a line item](https://docs.monite.com/docs/manage-line-items#retrieve-a-line-item)\n\nSee also:\n\n[Manage line items](https://docs.monite.com/docs/manage-line-items)\n\n[Collect payables](https://docs.monite.com/docs/collect-payables)",
        "operationId": "get_payables_id_line_items_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "line_item_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LineItemResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Payable line items"],
        "summary": "Delete a line item from a payable",
        "description": "Delete the line item with the given ID.\n\nRelated guide: [Remove a line item](https://docs.monite.com/docs/manage-line-items#remove-a-line-item)\n\nSee also:\n\n[Manage line items](https://docs.monite.com/docs/manage-line-items)\n\n[Collect payables](https://docs.monite.com/docs/collect-payables)",
        "operationId": "delete_payables_id_line_items_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "line_item_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Payable line items"],
        "summary": "Update a line item in a payable",
        "description": "Edits the information of a specific line item.\n\nRelated guide: [Update a line item](https://docs.monite.com/docs/manage-line-items#update-a-line-item)\n\nSee also:\n\n[Manage line items](https://docs.monite.com/docs/manage-line-items)\n\n[Collect payables](https://docs.monite.com/docs/collect-payables)",
        "operationId": "patch_payables_id_line_items_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "line_item_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LineItemRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LineItemResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/mark_as_paid": {
      "post": {
        "tags": ["Payables"],
        "summary": "Mark a payable as paid",
        "description": "Mark a payable as paid.\n\nPayables can be paid using the payment channels offered by Monite or through external payment channels. In the latter\n case, the invoice is not automatically marked as paid in the system and needs to be converted to the paid status\n manually.\n\nOptionally, it is possible to pass the `comment` field in the request body, to describe how and when the invoice was\npaid.\n\nTo use this endpoint with an entity user token, this entity user must have a role that includes the `pay` permission for\npayables.\n\nRelated guide: [Mark a payable as paid](https://docs.monite.com/docs/payable-status-transitions#mark-as-paid)\n\nSee also:\n\n[Payables lifecycle](https://docs.monite.com/docs/payables-lifecycle)\n\n[Payables status transitions](https://docs.monite.com/docs/collect-payables#suggested-payment-date)",
        "operationId": "post_payables_id_mark_as_paid",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CommentPayload" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/mark_as_partially_paid": {
      "post": {
        "tags": ["Payables"],
        "summary": "Mark a payable as partially paid",
        "description": "Mark a payable as partially paid.\n\nIf the payable is partially paid, its status is moved to `partially_paid`. The value of the `amount_paid` field must be\n  the sum of all payments made, not only the last one.\n\nNotes:\n- This endpoint can be used for payables in the `waiting_to_be_paid` status.\n- The `amount_paid` must be greater than 0 and less than the total payable amount specified by the `amount` field.\n- The `amount_paid` can be either increased or decreased to reflect reversed payments and chargebacks.\n- You can use this endpoint multiple times for the same payable to reflect multiple partial payments, always setting the\n sum of all payments made.\n- To use this endpoint with an entity user token, this entity user must have a role that includes the `pay`\npermission for payables.\n\nRelated guide: [Mark a payable as partially paid](https://docs.monite.com/docs/payable-status-transitions#mark-as-partially-paid)\n\nSee also:\n\n[Payables lifecycle](https://docs.monite.com/docs/payables-lifecycle)\n\n[Payables status transitions](https://docs.monite.com/docs/collect-payables#suggested-payment-date)\n\n[Mark a payable as paid](https://docs.monite.com/docs/payable-status-transitions#mark-as-paid)",
        "operationId": "post_payables_id_mark_as_partially_paid",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PartiallyPaidPayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/pay": {
      "post": {
        "tags": ["Payables"],
        "summary": "Pay",
        "description": "Marks the invoice as paid.",
        "operationId": "post_payables_id_pay",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/reject": {
      "post": {
        "tags": ["Payables"],
        "summary": "Reject a payable",
        "description": "Declines the payable when an approver finds any mismatch or discrepancies.",
        "operationId": "post_payables_id_reject",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/reopen": {
      "post": {
        "tags": ["Payables"],
        "summary": "Reopen a rejected payable",
        "description": "Reset payable state from rejected to new.",
        "operationId": "post_payables_id_reopen",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/submit_for_approval": {
      "post": {
        "tags": ["Payables"],
        "summary": "Submit a payable for approval",
        "description": "Starts the approval process once the uploaded payable is validated.",
        "operationId": "post_payables_id_submit_for_approval",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_intents/{payment_intent_id}": {
      "get": {
        "tags": ["Payment intents"],
        "summary": "Get payment intent by ID",
        "operationId": "get_payment_intents_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Payment intents"],
        "summary": "Update the payment intent amount",
        "operationId": "patch_payment_intents_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentIntentPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_intents/{payment_intent_id}/history": {
      "get": {
        "tags": ["Payment intents"],
        "summary": "Get the payment intent history",
        "operationId": "get_payment_intents_id_history",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_links": {
      "post": {
        "tags": ["Payment links"],
        "summary": "Create a payment link",
        "operationId": "post_payment_links",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicPaymentLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_links/{payment_link_id}": {
      "get": {
        "tags": ["Payment links"],
        "summary": "Get payment link by ID",
        "operationId": "get_payment_links_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_link_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicPaymentLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_links/{payment_link_id}/expire": {
      "post": {
        "tags": ["Payment links"],
        "summary": "Expire a payment link",
        "operationId": "post_payment_links_id_expire",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_link_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicPaymentLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_onboarding_links": {
      "post": {
        "tags": ["Onboarding links"],
        "summary": "Create an onboarding link",
        "operationId": "post_payment_onboarding_links",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOnboardingLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_records": {
      "get": {
        "tags": ["Payment records"],
        "summary": "Get payment records",
        "operationId": "get_payment_records",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/PaymentRecordCursorFields" }
              ],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean" },
            "name": "is_external",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "object_id",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecordResponseList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Payment records"],
        "summary": "Create a payment record",
        "operationId": "post_payment_records",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PaymentRecordRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecordResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_records/{payment_record_id}": {
      "get": {
        "tags": ["Payment records"],
        "summary": "Get a payment record",
        "operationId": "get_payment_records_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_record_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecordResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_reminders": {
      "get": {
        "tags": ["Payment reminders"],
        "summary": "Get payment reminder configurations",
        "operationId": "get_payment_reminders",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllPaymentReminders"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Payment reminders"],
        "summary": "Create a payment reminder configuration",
        "operationId": "post_payment_reminders",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PaymentReminder" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReminderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_reminders/{payment_reminder_id}": {
      "get": {
        "tags": ["Payment reminders"],
        "summary": "Get a payment reminder configuration by ID",
        "operationId": "get_payment_reminders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_reminder_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReminderResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Payment reminders"],
        "summary": "Delete a payment reminder configuration",
        "operationId": "delete_payment_reminders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_reminder_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Payment reminders"],
        "summary": "Update a payment reminder configuration",
        "operationId": "patch_payment_reminders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_reminder_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PaymentReminder" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReminderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_terms": {
      "get": {
        "tags": ["Payment terms"],
        "summary": "Get payment terms",
        "operationId": "get_payment_terms",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTermsListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Payment terms"],
        "summary": "Create a payment term",
        "operationId": "post_payment_terms",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentTermsCreatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTermsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_terms/{payment_terms_id}": {
      "get": {
        "tags": ["Payment terms"],
        "summary": "Get a payment term by ID",
        "operationId": "get_payment_terms_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_terms_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTermsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Payment terms"],
        "summary": "Delete a payment term",
        "operationId": "delete_payment_terms_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_terms_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Payment terms"],
        "summary": "Update a payment term",
        "operationId": "patch_payment_terms_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_terms_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentTermsUpdatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTermsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/persons": {
      "get": {
        "tags": ["Persons"],
        "summary": "Get all persons",
        "operationId": "get_persons",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PersonsResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Persons"],
        "summary": "Create a person",
        "operationId": "post_persons",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PersonRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PersonResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/persons/{person_id}": {
      "get": {
        "tags": ["Persons"],
        "summary": "Get a person",
        "operationId": "get_persons_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "person_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PersonResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Persons"],
        "summary": "Delete a person",
        "operationId": "delete_persons_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "person_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Persons"],
        "summary": "Update a person",
        "operationId": "patch_persons_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "person_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OptionalPersonRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PersonResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/persons/{person_id}/documents": {
      "post": {
        "tags": ["Onboarding documents"],
        "summary": "Update person onboarding documents",
        "description": "Update the onboarding documents of a person.",
        "operationId": "post_persons_id_documents",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "person_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PersonOnboardingDocuments"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/admin/partners/{partner_id}": {
      "delete": {
        "tags": ["admin"],
        "summary": "Disable Partner",
        "operationId": "delete__portal_v1_admin_partners_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "partner_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/auth/accept_invitation": {
      "post": {
        "tags": ["Auth"],
        "summary": "Accept Invitation",
        "operationId": "post__portal_v1_auth_accept_invitation",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptInvitationPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/auth/activate": {
      "post": {
        "tags": ["Auth"],
        "summary": "Accept Registration",
        "operationId": "post__portal_v1_auth_activate",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/auth/decrypt_token": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get User By Token",
        "operationId": "get__portal_v1_auth_decrypt_token",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecryptTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/auth/forgot_password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Forgot Password",
        "operationId": "post__portal_v1_auth_forgot_password",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ResetPasswordPayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/auth/logout": {
      "delete": {
        "tags": ["Auth"],
        "summary": "Get Profile",
        "operationId": "delete__portal_v1_auth_logout",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/auth/resend_invitation_email": {
      "post": {
        "tags": ["Auth"],
        "summary": "Request Resend Invitation Email",
        "operationId": "post__portal_v1_auth_resend_invitation_email",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RequestResendInvite" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/auth/set_password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Set Password",
        "operationId": "post__portal_v1_auth_set_password",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SetPasswordPayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/auth/token": {
      "post": {
        "tags": ["Auth"],
        "summary": "Get Token",
        "operationId": "post__portal_v1_auth_token",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AuthPayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/companies": {
      "post": {
        "tags": ["Companies"],
        "summary": "Create Company",
        "operationId": "post__portal_v1_companies",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CompanyRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CompanyResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/companies/invitation": {
      "post": {
        "tags": ["Companies"],
        "summary": "Invite Into Company",
        "operationId": "post__portal_v1_companies_invitation",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InviteRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RegisterResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/companies/{company_id}": {
      "get": {
        "tags": ["Companies"],
        "summary": "Get Company By Id",
        "operationId": "get__portal_v1_companies_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "company_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CompanyResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Companies"],
        "summary": "Delete Company",
        "operationId": "delete__portal_v1_companies_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "company_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Companies"],
        "summary": "Update Company Data",
        "operationId": "patch__portal_v1_companies_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "company_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CompanyUpdateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CompanyResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/companies/{company_id}/logo": {
      "patch": {
        "tags": ["Companies"],
        "summary": "Update Company Logo",
        "operationId": "patch__portal_v1_companies_id_logo",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "company_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": { "$ref": "#/components/schemas/CompanyLogoFileUpload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CompanyResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/dicts/currencies": {
      "get": {
        "tags": ["Project dictionaries"],
        "summary": "Get Projects Currencies",
        "operationId": "get__portal_v1_dicts_currencies",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get  Portal V1 Dicts Currencies",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DictsResponse" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/dicts/environments": {
      "get": {
        "tags": ["Project dictionaries"],
        "summary": "Get Projects Environments",
        "operationId": "get__portal_v1_dicts_environments",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get  Portal V1 Dicts Environments",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DictsResponse" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/dicts/features": {
      "get": {
        "tags": ["Project dictionaries"],
        "summary": "Get Projects Features",
        "operationId": "get__portal_v1_dicts_features",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get  Portal V1 Dicts Features",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/FeaturesResponse" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/dicts/regions": {
      "get": {
        "tags": ["Project dictionaries"],
        "summary": "Get Projects Regions",
        "operationId": "get__portal_v1_dicts_regions",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get  Portal V1 Dicts Regions",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DictsResponse" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/email_exists": {
      "get": {
        "tags": ["Email exists"],
        "summary": "Check Email Exist",
        "operationId": "get__portal_v1_email_exists",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "email",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/onboarding": {
      "post": {
        "tags": ["Onboarding"],
        "summary": "Create Super Admin",
        "operationId": "post__portal_v1_onboarding",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/profile": {
      "get": {
        "tags": ["Profile"],
        "summary": "Get Profile",
        "operationId": "get__portal_v1_profile",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUserProfileResponseWithOptionalRole"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Profile"],
        "summary": "Update Profile Data",
        "operationId": "patch__portal_v1_profile",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserProfilePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUserProfileResponseWithOptionalRole"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/profile/avatar": {
      "patch": {
        "tags": ["Profile"],
        "summary": "Update Avatar",
        "operationId": "patch__portal_v1_profile_avatar",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ProfileAvatarFileUpload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileAvatarUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/projects": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get Projects",
        "operationId": "get__portal_v1_projects",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get  Portal V1 Projects",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ProjectResponse" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Create Project",
        "operationId": "post__portal_v1_projects",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProjectsRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/projects/{project_id}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get Project By Id",
        "operationId": "get__portal_v1_projects_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Projects"],
        "summary": "Update Project Data",
        "operationId": "patch__portal_v1_projects_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProjectUpdateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/projects/{project_id}/settings": {
      "get": {
        "tags": ["Projects settings"],
        "summary": "Get Project Settings",
        "operationId": "get__portal_v1_projects_id_settings",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Projects settings"],
        "summary": "Create Project Settings",
        "operationId": "post__portal_v1_projects_id_settings",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectsSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/register": {
      "post": {
        "tags": ["Register"],
        "summary": "Register User",
        "operationId": "post__portal_v1_register",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterPartnerUserPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUserProfileResponseWithOptionalRole"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/register/resend_registration_email": {
      "post": {
        "tags": ["Register"],
        "summary": "Resend Registration Email",
        "operationId": "post__portal_v1_register_resend_registration_email",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RequestResendInvite" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/roles": {
      "get": {
        "tags": ["Roles"],
        "summary": "Get All",
        "operationId": "get__portal_v1_roles",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get  Portal V1 Roles",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/RolesResponse" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Roles"],
        "summary": "Post",
        "operationId": "post__portal_v1_roles",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RolesCreatePayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RolesResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/roles/{role_id}": {
      "get": {
        "tags": ["Roles"],
        "summary": "Get",
        "operationId": "get__portal_v1_roles_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "role_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RolesResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Roles"],
        "summary": "Delete",
        "operationId": "delete__portal_v1_roles_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "role_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Roles"],
        "summary": "Update",
        "operationId": "patch__portal_v1_roles_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "role_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RolesUpdatePayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RolesResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/secrets": {
      "get": {
        "tags": ["Secrets"],
        "summary": "Get Secret",
        "operationId": "get__portal_v1_secrets",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetSecretsResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Secrets"],
        "summary": "Obtain Secret",
        "operationId": "post__portal_v1_secrets",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SecretRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObtainSecretResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/secrets/{credential_id}": {
      "delete": {
        "tags": ["Secrets"],
        "summary": "Delete Secret",
        "operationId": "delete__portal_v1_secrets_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credential_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "delay_in_seconds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get Users",
        "operationId": "get__portal_v1_users",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get  Portal V1 Users",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortalUserProfileResponseWithOptionalRole"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/users/{user_id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get User By Id",
        "operationId": "get__portal_v1_users_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUserProfileResponseWithOptionalRole"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete User",
        "operationId": "delete__portal_v1_users_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Update User Data",
        "operationId": "patch__portal_v1_users_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserUpdatePayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUserProfileResponseWithOptionalRole"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/users/{user_id}/avatar": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update Avatar",
        "operationId": "patch__portal_v1_users_id_avatar",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": { "$ref": "#/components/schemas/UserAvatarFileUpload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUserProfileResponseWithOptionalRole"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/users/{user_id}/enable": {
      "put": {
        "tags": ["Users"],
        "summary": "Enable User",
        "operationId": "put__portal_v1_users_id_enable",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/products": {
      "get": {
        "tags": ["Products"],
        "summary": "Get products",
        "operationId": "get_products",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/ProductCursorFields" }],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/ProductServiceTypeEnum" },
            "name": "type",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "price",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "price__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "price__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "price__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "price__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/CurrencyEnum" },
            "name": "currency",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/CurrencyEnum" },
              "type": "array"
            },
            "name": "currency__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "measure_unit_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductServicePaginationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Products"],
        "summary": "Create a product",
        "operationId": "post_products",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProductServiceRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/products/{product_id}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get a product by ID",
        "operationId": "get_products_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "product_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Products"],
        "summary": "Delete a product",
        "operationId": "delete_products_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "product_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Products"],
        "summary": "Update a product",
        "operationId": "patch_products_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "product_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProductServiceUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables": {
      "get": {
        "tags": ["Receivables"],
        "summary": "Get receivables",
        "operationId": "get_receivables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ReceivableCursorFields" }
              ],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/ReceivableType" },
            "name": "type",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/ReceivablesStatusEnum" },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/ReceivablesStatusEnum" },
              "type": "array"
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "entity_user_id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "based_on",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivablePaginationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`,`Object type at permissions not found: {object_type}`,`Action {action} for {object_type} not allowed`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Receivables"],
        "summary": "Create a receivable",
        "operationId": "post_receivables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceivableFacadeCreatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/variables": {
      "get": {
        "tags": ["Receivables"],
        "summary": "Get email template variables",
        "description": "Get a list of placeholders that can be used in email templates for customization.",
        "operationId": "get_receivables_variables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivableTemplatesVariablesObjectList"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}": {
      "get": {
        "tags": ["Receivables"],
        "summary": "Get a receivable by ID",
        "operationId": "get_receivables_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Receivables"],
        "summary": "Delete a receivable",
        "operationId": "delete_receivables_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Receivables"],
        "summary": "Update a receivable",
        "operationId": "patch_receivables_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceivableUpdatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/accept": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Accept a quote",
        "operationId": "post_receivables_id_accept",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "object", "title": "Payload" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResult" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/cancel": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Cancel an invoice",
        "operationId": "post_receivables_id_cancel",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/clone": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Clone a receivable",
        "operationId": "post_receivables_id_clone",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/decline": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Decline a quote",
        "operationId": "post_receivables_id_decline",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceivableDeclinePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResult" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/issue": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Issue a receivable",
        "operationId": "post_receivables_id_issue",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/line_items": {
      "put": {
        "tags": ["Receivables"],
        "summary": "Update the line items of a receivable",
        "description": "Replace all line items of an existing invoice or quote with a new list of line items.",
        "operationId": "put_receivables_id_line_items",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateLineItems" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LineItemsResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/mark_as_paid": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Mark an invoice as paid",
        "operationId": "post_receivables_id_mark_as_paid",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ReceivablePaidPayload" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/mark_as_partially_paid": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Mark an invoice as partially paid",
        "description": "Deprecated. Use `POST /payment_records` to record an invoice payment.",
        "operationId": "post_receivables_id_mark_as_partially_paid",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceivablePartiallyPaidPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "deprecated": true,
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/mark_as_uncollectible": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Mark an invoice as uncollectible",
        "operationId": "post_receivables_id_mark_as_uncollectible",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceivableUncollectiblePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/pdf_link": {
      "get": {
        "tags": ["Receivables"],
        "summary": "Get a link to the PDF version of a receivable",
        "operationId": "get_receivables_id_pdf_link",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableFileUrl" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/preview": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Preview a receivable's email message",
        "operationId": "post_receivables_id_preview",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceivablePreviewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivablePreviewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/send": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Send a receivable via email",
        "operationId": "post_receivables_id_send",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ReceivableSendRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivableSendResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/verify": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Verify a receivable",
        "operationId": "post_receivables_id_verify",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MissingFields" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/recurrences": {
      "get": {
        "tags": ["Recurrences"],
        "summary": "Get recurrences",
        "operationId": "get_recurrences",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetAllRecurrences" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Recurrences"],
        "summary": "Create a recurrence",
        "operationId": "post_recurrences",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecurrencePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Recurrence" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/recurrences/{recurrence_id}": {
      "get": {
        "tags": ["Recurrences"],
        "summary": "Get a recurrence by ID",
        "operationId": "get_recurrences_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "recurrence_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Recurrence" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Recurrences"],
        "summary": "Update a recurrence",
        "operationId": "patch_recurrences_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "recurrence_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRecurrencePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Recurrence" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/recurrences/{recurrence_id}/cancel": {
      "post": {
        "tags": ["Recurrences"],
        "summary": "Cancel a recurrence",
        "operationId": "post_recurrences_id_cancel",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "recurrence_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/roles": {
      "get": {
        "tags": ["Roles"],
        "summary": "Search roles",
        "description": "Find all roles that match the search criteria.",
        "operationId": "get_roles",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/RoleCursorFields" }],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolePaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Roles"],
        "summary": "Create a role",
        "description": "Create a new role from the specified values.",
        "operationId": "post_roles",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateRoleRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/roles/{role_id}": {
      "get": {
        "tags": ["Roles"],
        "summary": "Get a role by ID",
        "operationId": "get_roles_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "role_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Roles"],
        "summary": "Update a role",
        "description": "Change the specified fields with the provided values.",
        "operationId": "patch_roles_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "role_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateRoleRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/settings": {
      "get": {
        "tags": ["Project settings"],
        "summary": "Get partner settings",
        "description": "Retrieve all settings for this partner.",
        "operationId": "get_settings",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerProjectSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Project settings"],
        "summary": "Update partner settings",
        "description": "Change the specified fields with the provided values.",
        "operationId": "patch_settings",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerProjectSettingsPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerProjectSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/tags": {
      "get": {
        "tags": ["Payable tags"],
        "summary": "Get tags",
        "description": "Get a list of all tags that can be assigned to payables.\n    Tags can be used, for example, as trigger conditions in payable approval policies.",
        "operationId": "get_tags",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/TagCursorFields" }],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by_entity_user_id",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagsPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Payable tags"],
        "summary": "Create a tag",
        "description": "Create a new tag for use in payables. The tag name must be unique.\n    Tag names are case-sensitive, that is `Marketing` and `marketing` are two different tags.\n\n\nThe response returns an auto-generated ID assigned to this tag.\nTo assign this tag to a payable, send the tag ID in the `tag_ids` list when creating or updating a payable.",
        "operationId": "post_tags",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCreateOrUpdateSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TagReadSchema" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/tags/{tag_id}": {
      "get": {
        "tags": ["Payable tags"],
        "summary": "Get a tag by ID",
        "description": "Get information about a tag with the given ID.",
        "operationId": "get_tags_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "tag_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TagReadSchema" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Payable tags"],
        "summary": "Delete a tag",
        "description": "Delete a tag with the given ID. This tag will be automatically deleted from all payables where it's used.",
        "operationId": "delete_tags_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "tag_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Payable tags"],
        "summary": "Update a tag",
        "description": "Change the tag name. The new name must be unique among existing tags.\n    Tag names are case-sensitive, that is `Marketing` and `marketing` are two different tags.",
        "operationId": "patch_tags_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "tag_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCreateOrUpdateSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TagReadSchema" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/text_templates": {
      "get": {
        "tags": ["Text templates"],
        "summary": "Get text templates",
        "description": "Get text templates",
        "operationId": "get_text_templates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/TextTemplateType" },
            "name": "type",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/DocumentTypeEnum" },
            "name": "document_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean" },
            "name": "is_default",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextTemplateResponseList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Text templates"],
        "summary": "Create a text template",
        "description": "Create a text template",
        "operationId": "post_text_templates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTextTemplatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextTemplateResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/text_templates/variables": {
      "get": {
        "tags": ["Text templates"],
        "summary": "Get the available variables for text templates",
        "description": "This endpoint deprecated and will be removed in v2023-09-01, please use /v1/receivables/variables or /v1/payable_purchase_orders/variables instead",
        "operationId": "get_text_templates_variables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VariablesObjectList" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "deprecated": true,
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/text_templates/{text_template_id}": {
      "get": {
        "tags": ["Text templates"],
        "summary": "Get a text template by ID",
        "description": "Get all custom contents",
        "operationId": "get_text_templates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "text_template_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextTemplateResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Text templates"],
        "summary": "Delete a text template",
        "description": "Delete custom content by ID",
        "operationId": "delete_text_templates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "UUID text_template ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "UUID text_template ID"
            },
            "name": "text_template_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Text templates"],
        "summary": "Update a text template by ID",
        "description": "Update custom content by ID",
        "operationId": "patch_text_templates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "UUID text_template ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "UUID text_template ID"
            },
            "name": "text_template_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTextTemplatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextTemplateResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/text_templates/{text_template_id}/make_default": {
      "post": {
        "tags": ["Text templates"],
        "summary": "Make a text template default",
        "description": "Make text template default",
        "operationId": "post_text_templates_id_make_default",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "UUID text_template ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "UUID text_template ID"
            },
            "name": "text_template_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource.",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextTemplateResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/vat_rates": {
      "get": {
        "tags": ["VAT rates"],
        "summary": "Get VAT rates",
        "operationId": "get_vat_rates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_vat_id_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_vat_id_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/ProductServiceTypeEnum" },
            "name": "product_type",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VatRateListResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/webhook_settings": {
      "get": {
        "tags": ["Webhook settings"],
        "summary": "Get webhook subscriptions",
        "operationId": "get_webhook_settings",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/WebhookSubscriptionCursorFields"
                }
              ],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/WebhookObjectType" },
            "name": "object_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionPaginationResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Webhook settings"],
        "summary": "Subscribe to a webhook",
        "operationId": "post_webhook_settings",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookSubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "callbacks": {
          "webhook_notification": {
            "{$request.body.url}": {
              "post": {
                "summary": "Webhook Notification",
                "operationId": "webhook_notification__request_body_url__post",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": { "$ref": "#/components/schemas/EventResource" }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "Successful Response",
                    "content": { "application/json": { "schema": {} } }
                  },
                  "422": {
                    "description": "Validation Error",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HTTPValidationError"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/webhook_settings/{webhook_id}": {
      "get": {
        "tags": ["Webhook settings"],
        "summary": "Get a webhook subscription",
        "operationId": "get_webhook_settings_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "webhook_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Webhook settings"],
        "summary": "Delete a webhook subscription",
        "operationId": "delete_webhook_settings_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "webhook_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Webhook settings"],
        "summary": "Update a webhook subscription",
        "operationId": "patch_webhook_settings_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "webhook_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookSubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/webhook_settings/{webhook_id}/disable": {
      "post": {
        "tags": ["Webhook settings"],
        "summary": "Disable a webhook subscription",
        "operationId": "post_webhook_settings_id_disable",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "webhook_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/webhook_settings/{webhook_id}/enable": {
      "post": {
        "tags": ["Webhook settings"],
        "summary": "Enable a webhook subscription",
        "operationId": "post_webhook_settings_id_enable",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "webhook_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/webhooks": {
      "get": {
        "tags": ["Webhooks"],
        "summary": "Get webhook events",
        "operationId": "get_webhooks",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "description": "Order by",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "description": "Max is 100",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A token, obtained from previous page. Prior over other filters"
            },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/WebhookDeliveryCursorFields" }
              ],
              "description": "Allowed sort fields"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "event_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/WebhookObjectType" },
            "name": "object_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "event_action",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the entity that owns the requested resource."
            },
            "example": "9d2b4c8f-2087-4738-ba91-7359683c49a4",
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDeliveryPaginationResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "416": {
            "description": "Requested Range Not Satisfiable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "APIVersion": {
        "enum": [
          "2024-01-31",
          "2023-09-01",
          "2023-06-04",
          "2023-04-12",
          "2023-03-14",
          "2023-03-01",
          "2023-02-07",
          "2022-11-16"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AcceptInvitationPayload": {
        "required": ["fullname", "invitation_token", "password"],
        "type": "object",
        "properties": {
          "fullname": { "minLength": 1, "type": "string" },
          "invitation_token": { "type": "string" },
          "password": { "minLength": 12, "type": "string" }
        },
        "additionalProperties": false
      },
      "AccessTokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "example": "L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg"
          },
          "token_type": { "type": "string", "example": "Bearer" },
          "expires_in": { "type": "integer", "example": 86400 }
        },
        "type": "object",
        "required": ["access_token", "token_type", "expires_in"]
      },
      "AccountDisabledReason": {
        "type": "string",
        "enum": [
          "requirements.past_due",
          "requirements.pending_verification",
          "listed",
          "platform_paused",
          "rejected.fraud",
          "rejected.listed",
          "rejected.terms_of_service",
          "rejected.other",
          "under_review",
          "other"
        ],
        "description": "An enumeration."
      },
      "AccountIdentification": {
        "properties": {
          "type": { "$ref": "#/components/schemas/PaymentIntentAccountType" },
          "value": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["type", "value"]
      },
      "AccountResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "type": { "$ref": "#/components/schemas/PaymentAccountType" },
          "bank_accounts": {
            "items": { "$ref": "#/components/schemas/BankAccount" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "AccountingConnectionList": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingConnectionResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "AccountingConnectionRequest": {
        "required": ["platform"],
        "type": "object",
        "properties": {
          "platform": { "$ref": "#/components/schemas/Platform" }
        },
        "additionalProperties": false
      },
      "AccountingConnectionResponse": {
        "required": ["id", "created_at", "updated_at", "connection_url"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "connection_url": { "type": "string" },
          "errors": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ErrorSchema" }
          },
          "last_pull": { "type": "string", "format": "date-time" },
          "platform": { "type": "string" },
          "status": { "$ref": "#/components/schemas/ConnectionStatus" }
        },
        "additionalProperties": false
      },
      "AccountingSettingsPayload": {
        "required": ["provider", "token"],
        "type": "object",
        "properties": {
          "provider": { "minLength": 1, "type": "string" },
          "token": { "minLength": 1, "type": "string" }
        },
        "additionalProperties": false
      },
      "AccountingSettingsResponse": {
        "required": ["provider", "token"],
        "type": "object",
        "properties": {
          "provider": { "minLength": 1, "type": "string" },
          "token": { "minLength": 1, "type": "string" }
        }
      },
      "AccountingSyncRulesBody": {
        "type": "object",
        "properties": {
          "pull_statuses": {
            "$ref": "#/components/schemas/DocumentTypeVariants"
          },
          "push_statuses": {
            "$ref": "#/components/schemas/DocumentTypeVariants"
          }
        },
        "additionalProperties": false
      },
      "ActionEnum": {
        "type": "string",
        "enum": ["create", "read", "update", "delete"],
        "description": "An enumeration."
      },
      "ActionSchema": {
        "properties": {
          "action_name": {
            "allOf": [{ "$ref": "#/components/schemas/ActionEnum" }],
            "description": "Action name",
            "default": "read"
          },
          "permission": {
            "allOf": [{ "$ref": "#/components/schemas/PermissionEnum" }],
            "description": "Permission type",
            "default": "allowed"
          }
        },
        "type": "object"
      },
      "AddCustomTemplateSchema": {
        "properties": {
          "body_template": {
            "type": "string",
            "description": "Jinja2 compatible string with email body"
          },
          "language_code": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "Lowercase iso code of language"
          },
          "subject_template": {
            "type": "string",
            "description": "Jinja2 compatible string with email subject"
          },
          "template_name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "description": "One of pre-defined names of emails. Should be validated with enum"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "body_template",
          "language_code",
          "subject_template",
          "template_name"
        ]
      },
      "AirwallexMandate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "PDF copy of mandate will be sent to the email by Airwallex"
          },
          "signatory": {
            "type": "string",
            "minLength": 1,
            "description": "Name of the person signed the mandate, must be a bank account owner"
          },
          "type": { "$ref": "#/components/schemas/AirwallexMandateType" },
          "version": { "$ref": "#/components/schemas/AirwallexMandateVersion" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["email", "signatory", "type", "version"]
      },
      "AirwallexMandateType": {
        "type": "string",
        "enum": ["us_ach_debit"],
        "description": "An enumeration."
      },
      "AirwallexMandateVersion": {
        "type": "string",
        "enum": ["1.0"],
        "description": "An enumeration."
      },
      "AirwallexPlaidAccount": {
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "description": "Plaid`s unique identifier for the account"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The name of the account, either assigned by the user or by the financial institution itself"
          },
          "mask": {
            "type": "string",
            "minLength": 1,
            "description": "The last 2-4 alphanumeric characters of an account's official account number"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "name", "mask"]
      },
      "AirwallexPlaidBankAccountVerificationStatus": {
        "type": "string",
        "enum": ["verified", "expired", "suspended"],
        "description": "An enumeration."
      },
      "AirwallexPlaidInstitution": {
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "description": "The institution identifier assigned by Plaid"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The full financial institution name"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "name"]
      },
      "AirwallexPlaidVerification": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AirwallexPlaidBankAccountVerificationStatus"
              }
            ],
            "description": "Status of the bank account verification"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["status"]
      },
      "AllDocumentExportResponseSchema": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentExportResponseSchema"
            },
            "description": "A set of export objects returned per page."
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results. If there is no next page, i.e. you have reached the last page, the value is `null`."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results. If there is no previous page, i.e. you have reached the first page, the value is `null`."
          }
        },
        "additionalProperties": false
      },
      "AllOverdueRemindersResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/OverdueReminderResponse" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "AllowedCountries": {
        "type": "string",
        "enum": [
          "AF",
          "AX",
          "AL",
          "DZ",
          "AS",
          "AD",
          "AO",
          "AI",
          "AQ",
          "AG",
          "AR",
          "AM",
          "AW",
          "AU",
          "AT",
          "AZ",
          "BS",
          "BH",
          "BD",
          "BB",
          "BY",
          "BE",
          "BZ",
          "BJ",
          "BM",
          "BT",
          "BO",
          "BA",
          "BW",
          "BV",
          "BR",
          "IO",
          "BN",
          "BG",
          "BF",
          "BI",
          "KH",
          "CM",
          "CA",
          "IC",
          "CV",
          "KY",
          "CF",
          "EA",
          "TD",
          "CL",
          "CN",
          "CX",
          "CC",
          "CO",
          "KM",
          "CG",
          "CD",
          "CK",
          "CR",
          "CI",
          "HR",
          "CU",
          "CY",
          "CZ",
          "DK",
          "DJ",
          "DM",
          "DO",
          "EC",
          "EG",
          "SV",
          "GQ",
          "ER",
          "EE",
          "ET",
          "FK",
          "FO",
          "FJ",
          "FI",
          "FR",
          "GF",
          "PF",
          "TF",
          "GA",
          "GM",
          "GE",
          "DE",
          "GH",
          "GI",
          "GR",
          "GL",
          "GD",
          "GP",
          "GU",
          "GT",
          "GG",
          "GN",
          "GW",
          "GY",
          "HT",
          "HM",
          "VA",
          "HN",
          "HK",
          "HU",
          "IS",
          "IN",
          "ID",
          "IR",
          "IQ",
          "IE",
          "IM",
          "IL",
          "IT",
          "JM",
          "JP",
          "JE",
          "JO",
          "KZ",
          "KE",
          "KI",
          "KP",
          "KR",
          "KW",
          "KG",
          "LA",
          "LV",
          "LB",
          "LS",
          "LR",
          "LY",
          "LI",
          "LT",
          "LU",
          "MO",
          "MK",
          "MG",
          "MW",
          "MY",
          "MV",
          "ML",
          "MT",
          "MH",
          "MQ",
          "MR",
          "MU",
          "YT",
          "MX",
          "FM",
          "MD",
          "MC",
          "MN",
          "MS",
          "MA",
          "MZ",
          "MM",
          "NA",
          "NR",
          "NP",
          "NL",
          "AN",
          "NC",
          "NZ",
          "NI",
          "NE",
          "NG",
          "NU",
          "NF",
          "MP",
          "NO",
          "OM",
          "PK",
          "PW",
          "PS",
          "PA",
          "PG",
          "PY",
          "PE",
          "PH",
          "PN",
          "PL",
          "PT",
          "PR",
          "QA",
          "RE",
          "RO",
          "RU",
          "RW",
          "SH",
          "KN",
          "LC",
          "PM",
          "VC",
          "WS",
          "SM",
          "ST",
          "SA",
          "SN",
          "CS",
          "SC",
          "SL",
          "SG",
          "SK",
          "SI",
          "SB",
          "SO",
          "ZA",
          "GS",
          "ES",
          "LK",
          "SD",
          "SR",
          "SJ",
          "SZ",
          "SE",
          "CH",
          "SY",
          "TW",
          "TJ",
          "TZ",
          "TH",
          "TL",
          "TG",
          "TK",
          "TO",
          "TT",
          "TN",
          "TR",
          "TM",
          "TC",
          "TV",
          "UG",
          "UA",
          "AE",
          "GB",
          "US",
          "UM",
          "UY",
          "UZ",
          "VU",
          "VE",
          "VN",
          "VG",
          "VI",
          "WF",
          "EH",
          "YE",
          "ZM",
          "ZW"
        ],
        "description": "An enumeration."
      },
      "AllowedCountriesNames": {
        "enum": [
          "Afghanistan",
          "Åland Islands",
          "Albania",
          "Algeria",
          "American Samoa",
          "AndorrA",
          "Angola",
          "Anguilla",
          "Antarctica",
          "Antigua and Barbuda",
          "Argentina",
          "Armenia",
          "Aruba",
          "Australia",
          "Austria",
          "Azerbaijan",
          "Bahamas",
          "Bahrain",
          "Bangladesh",
          "Barbados",
          "Belarus",
          "Belgium",
          "Belize",
          "Benin",
          "Bermuda",
          "Bhutan",
          "Bolivia",
          "Bosnia and Herzegovina",
          "Botswana",
          "Bouvet Island",
          "Brazil",
          "British Indian Ocean Territory",
          "Brunei Darussalam",
          "Bulgaria",
          "Burkina Faso",
          "Burundi",
          "Cambodia",
          "Cameroon",
          "Canada",
          "Canary Islands",
          "Cape Verde",
          "Cayman Islands",
          "Central African Republic",
          "Ceuta, Melilla",
          "Chad",
          "Chile",
          "China",
          "Christmas Island",
          "Cocos (Keeling) Islands",
          "Colombia",
          "Comoros",
          "Congo",
          "Congo, The Democratic Republic of the",
          "Cook Islands",
          "Costa Rica",
          "Cote D'Ivoire",
          "Croatia",
          "Cuba",
          "Cyprus",
          "Czech Republic",
          "Denmark",
          "Djibouti",
          "Dominica",
          "Dominican Republic",
          "Ecuador",
          "Egypt",
          "El Salvador",
          "Equatorial Guinea",
          "Eritrea",
          "Estonia",
          "Ethiopia",
          "Falkland Islands (Malvinas)",
          "Faroe Islands",
          "Fiji",
          "Finland",
          "France",
          "French Guiana",
          "French Polynesia",
          "French Southern Territories",
          "Gabon",
          "Gambia",
          "Georgia",
          "Germany",
          "Ghana",
          "Gibraltar",
          "Greece",
          "Greenland",
          "Grenada",
          "Guadeloupe",
          "Guam",
          "Guatemala",
          "Guernsey",
          "Guinea",
          "Guinea-Bissau",
          "Guyana",
          "Haiti",
          "Heard Island and Mcdonald Islands",
          "Holy See (Vatican City State)",
          "Honduras",
          "Hong Kong",
          "Hungary",
          "Iceland",
          "India",
          "Indonesia",
          "Iran, Islamic Republic Of",
          "Iraq",
          "Ireland",
          "Isle of Man",
          "Israel",
          "Italy",
          "Jamaica",
          "Japan",
          "Jersey",
          "Jordan",
          "Kazakhstan",
          "Kenya",
          "Kiribati",
          "Korea, Democratic People'S Republic of",
          "Korea, Republic of",
          "Kuwait",
          "Kyrgyzstan",
          "Lao People'S Democratic Republic",
          "Latvia",
          "Lebanon",
          "Lesotho",
          "Liberia",
          "Libyan Arab Jamahiriya",
          "Liechtenstein",
          "Lithuania",
          "Luxembourg",
          "Macao",
          "Macedonia, The Former Yugoslav Republic of",
          "Madagascar",
          "Malawi",
          "Malaysia",
          "Maldives",
          "Mali",
          "Malta",
          "Marshall Islands",
          "Martinique",
          "Mauritania",
          "Mauritius",
          "Mayotte",
          "Mexico",
          "Micronesia, Federated States of",
          "Moldova, Republic of",
          "Monaco",
          "Mongolia",
          "Montserrat",
          "Morocco",
          "Mozambique",
          "Myanmar",
          "Namibia",
          "Nauru",
          "Nepal",
          "Netherlands",
          "Netherlands Antilles",
          "New Caledonia",
          "New Zealand",
          "Nicaragua",
          "Niger",
          "Nigeria",
          "Niue",
          "Norfolk Island",
          "Northern Mariana Islands",
          "Norway",
          "Oman",
          "Pakistan",
          "Palau",
          "Palestinian Territory, Occupied",
          "Panama",
          "Papua New Guinea",
          "Paraguay",
          "Peru",
          "Philippines",
          "Pitcairn",
          "Poland",
          "Portugal",
          "Puerto Rico",
          "Qatar",
          "Reunion",
          "Romania",
          "Russian Federation",
          "RWANDA",
          "Saint Helena",
          "Saint Kitts and Nevis",
          "Saint Lucia",
          "Saint Pierre and Miquelon",
          "Saint Vincent and the Grenadines",
          "Samoa",
          "San Marino",
          "Sao Tome and Principe",
          "Saudi Arabia",
          "Senegal",
          "Serbia and Montenegro",
          "Seychelles",
          "Sierra Leone",
          "Singapore",
          "Slovakia",
          "Slovenia",
          "Solomon Islands",
          "Somalia",
          "South Africa",
          "South Georgia and the South Sandwich Islands",
          "Spain",
          "Sri Lanka",
          "Sudan",
          "Suriname",
          "Svalbard and Jan Mayen",
          "Swaziland",
          "Sweden",
          "Switzerland",
          "Syrian Arab Republic",
          "Taiwan, Province of China",
          "Tajikistan",
          "Tanzania, United Republic of",
          "Thailand",
          "Timor-Leste",
          "Togo",
          "Tokelau",
          "Tonga",
          "Trinidad and Tobago",
          "Tunisia",
          "Turkey",
          "Turkmenistan",
          "Turks and Caicos Islands",
          "Tuvalu",
          "Uganda",
          "Ukraine",
          "United Arab Emirates",
          "United Kingdom",
          "United States",
          "United States Minor Outlying Islands",
          "Uruguay",
          "Uzbekistan",
          "Vanuatu",
          "Venezuela",
          "Viet Nam",
          "Virgin Islands, British",
          "Virgin Islands, U.S.",
          "Wallis and Futuna",
          "Western Sahara",
          "Yemen",
          "Zambia",
          "Zimbabwe"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AllowedFileTypes": {
        "type": "string",
        "enum": [
          "ocr_results",
          "ocr_files",
          "payables",
          "receivables",
          "receipts",
          "userpics",
          "entity_logo",
          "companies_logo",
          "zip",
          "identity_documents",
          "additional_identity_documents"
        ],
        "description": "An enumeration."
      },
      "ApprovalPolicyCreate": {
        "required": ["name", "description", "script"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the approval policy."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the approval policy."
          },
          "script": {
            "type": "array",
            "items": {
              "anyOf": [
                { "type": "boolean" },
                { "minimum": 1.0, "type": "number" },
                { "type": "string" },
                { "type": "array", "items": {} },
                { "type": "object" }
              ]
            },
            "description": "A list of JSON objects that represents the approval policy script. The script contains the logic that determines whether an action should be sent to approval. This field is required, and it should contain at least one script object."
          },
          "trigger": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "number" },
              { "type": "string" },
              { "type": "array", "items": {} },
              { "type": "object" }
            ],
            "description": "A JSON object that represents the trigger for the approval policy.The trigger specifies the event that will trigger the policy to be evaluated.",
            "example": "{amount >= 1000}"
          }
        },
        "additionalProperties": false
      },
      "ApprovalPolicyCursorFields": {
        "enum": ["created_at", "updated_at"],
        "type": "string",
        "description": "An enumeration."
      },
      "ApprovalPolicyResource": {
        "required": [
          "name",
          "description",
          "script",
          "id",
          "status",
          "created_at",
          "updated_at",
          "created_by"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the approval policy."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the approval policy."
          },
          "script": {
            "type": "array",
            "items": {
              "anyOf": [
                { "type": "boolean" },
                { "minimum": 1.0, "type": "number" },
                { "type": "string" },
                { "type": "array", "items": {} },
                { "type": "object" }
              ]
            },
            "description": "A list of JSON objects that represents the approval policy script. The script contains the logic that determines whether an action should be sent to approval. This field is required, and it should contain at least one script object."
          },
          "trigger": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "number" },
              { "type": "string" },
              { "type": "array", "items": {} },
              { "type": "object" }
            ],
            "description": "A JSON object that represents the trigger for the approval policy.The trigger specifies the event that will trigger the policy to be evaluated.",
            "example": "{amount >= 1000}"
          },
          "id": { "type": "string", "format": "uuid" },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/ApprovalPolicyStatus" }],
            "description": "The current status of the approval policy."
          },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "created_by": { "type": "string", "format": "uuid" },
          "updated_by": { "type": "string", "format": "uuid" }
        }
      },
      "ApprovalPolicyResourceList": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ApprovalPolicyResource" }
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          }
        },
        "additionalProperties": false
      },
      "ApprovalPolicyStatus": {
        "enum": ["active", "deleted", "pending"],
        "type": "string",
        "description": "An enumeration."
      },
      "ApprovalPolicyUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the approval policy."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the approval policy."
          },
          "script": {
            "type": "array",
            "items": {
              "anyOf": [
                { "type": "boolean" },
                { "minimum": 1.0, "type": "number" },
                { "type": "string" },
                { "type": "array", "items": {} },
                { "type": "object" }
              ]
            },
            "description": "A list of JSON objects that represents the approval policy script. The script contains the logic that determines whether an action should be sent to approval. This field is required, and it should contain at least one script object."
          },
          "trigger": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "number" },
              { "type": "string" },
              { "type": "array", "items": {} },
              { "type": "object" }
            ],
            "description": "A JSON object that represents the trigger for the approval policy. The trigger specifies the event that will trigger the policy to be evaluated.",
            "example": "{amount >= 1000}"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/ApprovalPolicyStatus" }],
            "description": "A string that represents the current status of the approval policy."
          }
        },
        "additionalProperties": false
      },
      "ApprovalProcessResourceList": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProcessResource" }
          }
        }
      },
      "ApprovalProcessStepResource": {
        "required": [
          "approved_by",
          "object_id",
          "required_approval_count",
          "role_ids",
          "status",
          "user_ids"
        ],
        "type": "object",
        "properties": {
          "approved_by": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          },
          "object_id": { "type": "string", "format": "uuid" },
          "rejected_by": { "type": "string", "format": "uuid" },
          "required_approval_count": { "minimum": 1.0, "type": "integer" },
          "role_ids": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          },
          "status": {
            "$ref": "#/components/schemas/ApprovalProcessStepStatus"
          },
          "user_ids": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          }
        }
      },
      "ApprovalProcessStepResourceList": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApprovalProcessStepResource"
            }
          }
        }
      },
      "ApprovalProcessStepStatus": {
        "enum": [
          "waiting",
          "approved",
          "rejected",
          "canceled",
          "failed",
          "not_started",
          "skipped"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ApprovalRequestCreateByRoleRequest": {
        "required": [
          "object_id",
          "object_type",
          "required_approval_count",
          "role_ids"
        ],
        "type": "object",
        "properties": {
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "$ref": "#/components/schemas/ObjectType" },
          "required_approval_count": { "minimum": 1.0, "type": "integer" },
          "role_ids": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          }
        },
        "additionalProperties": false
      },
      "ApprovalRequestCreateByUserRequest": {
        "required": [
          "object_id",
          "object_type",
          "required_approval_count",
          "user_ids"
        ],
        "type": "object",
        "properties": {
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "$ref": "#/components/schemas/ObjectType" },
          "required_approval_count": { "minimum": 1.0, "type": "integer" },
          "user_ids": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          }
        },
        "additionalProperties": false
      },
      "ApprovalRequestCreateRequest": {
        "anyOf": [
          { "$ref": "#/components/schemas/ApprovalRequestCreateByRoleRequest" },
          { "$ref": "#/components/schemas/ApprovalRequestCreateByUserRequest" }
        ],
        "additionalProperties": false
      },
      "ApprovalRequestCursorFields": {
        "enum": ["created_at", "updated_at"],
        "type": "string",
        "description": "An enumeration."
      },
      "ApprovalRequestResourceList": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApprovalRequestResourceWithMetadata"
            }
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false
      },
      "ApprovalRequestResourceWithMetadata": {
        "required": [
          "id",
          "created_at",
          "updated_at",
          "approved_by",
          "created_by",
          "object_id",
          "object_type",
          "required_approval_count",
          "role_ids",
          "status",
          "user_ids"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "approved_by": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          },
          "created_by": {
            "type": "string",
            "description": "ID of the user who created the approval request",
            "format": "uuid",
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5"
          },
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "$ref": "#/components/schemas/ObjectType" },
          "rejected_by": { "type": "string", "format": "uuid" },
          "required_approval_count": { "minimum": 1.0, "type": "integer" },
          "role_ids": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          },
          "status": { "$ref": "#/components/schemas/ApprovalRequestStatus" },
          "user_ids": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          }
        }
      },
      "ApprovalRequestStatus": {
        "enum": ["waiting", "approved", "rejected", "canceled"],
        "type": "string",
        "description": "An enumeration."
      },
      "AttachFileToPayableRequest": {
        "properties": { "file": { "type": "string", "format": "binary" } },
        "type": "object",
        "required": ["file"]
      },
      "AuthPayload": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" },
          "password": { "minLength": 12, "type": "string" }
        },
        "additionalProperties": false
      },
      "AuthPaymentIntentPayload": {
        "properties": {
          "bank_id": { "type": "string" },
          "payer_account_identification": {
            "$ref": "#/components/schemas/AccountIdentification"
          },
          "payer_account_holder_name": { "type": "string" },
          "payer_account_country": {
            "$ref": "#/components/schemas/YapilyCountriesCoverageCodes"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["bank_id", "payer_account_identification"]
      },
      "AuthPaymentIntentResponse": {
        "properties": {
          "authorization_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["authorization_url"]
      },
      "AuthResponse": {
        "required": ["auth"],
        "type": "object",
        "properties": { "auth": { "$ref": "#/components/schemas/Token" } }
      },
      "Bank": {
        "properties": {
          "bank_id": { "type": "string" },
          "name": { "type": "string" },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "media": {
            "items": { "$ref": "#/components/schemas/Media" },
            "type": "array"
          },
          "payer_required": { "type": "boolean" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["bank_id", "name", "country", "media", "payer_required"]
      },
      "BankAccount": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "iban": { "type": "string", "maxLength": 34 },
          "bic": { "type": "string", "maxLength": 11 },
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Display name of a bank account"
          },
          "is_default": { "type": "boolean", "default": false },
          "display_name": { "type": "string" },
          "was_created_by_user_id": { "type": "string", "format": "uuid" },
          "account_holder_name": { "type": "string" },
          "account_number": { "type": "string" },
          "sort_code": { "type": "string" },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "country": { "$ref": "#/components/schemas/AllowedCountries" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id"]
      },
      "BankAccountVerificationType": {
        "type": "string",
        "enum": ["airwallex_plaid"],
        "description": "An enumeration."
      },
      "BankAccountVerifications": {
        "properties": {
          "airwallex_plaid": {
            "allOf": [
              { "$ref": "#/components/schemas/AirwallexPlaidVerification" }
            ],
            "description": "Airwallex Plaid verification"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "BanksResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/Bank" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "BasedOnTransitionType": {
        "type": "string",
        "enum": ["invoice", "credit_note"],
        "description": "An enumeration."
      },
      "BizObjectsSchema": {
        "properties": {
          "objects": {
            "items": { "$ref": "#/components/schemas/RootSchema" },
            "type": "array",
            "description": "List of objects"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "BusinessProfile": {
        "properties": {
          "mcc": {
            "type": "string",
            "maxLength": 4,
            "minLength": 4,
            "description": "The merchant category code for the entity. MCCs are used to classify businesses based on the goods or services they provide."
          },
          "url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "description": "The business`s publicly available website."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ButtonThemePayload": {
        "type": "object",
        "properties": {
          "primary_color": { "type": "string", "format": "color" },
          "primary_hover_color": { "type": "string", "format": "color" },
          "secondary_color": { "type": "string", "format": "color" },
          "secondary_hover_color": { "type": "string", "format": "color" }
        },
        "additionalProperties": false
      },
      "ButtonThemeResponse": {
        "type": "object",
        "properties": {
          "primary_color": { "type": "string", "format": "color" },
          "primary_hover_color": { "type": "string", "format": "color" },
          "secondary_color": { "type": "string", "format": "color" },
          "secondary_hover_color": { "type": "string", "format": "color" }
        }
      },
      "CardThemePayload": {
        "type": "object",
        "properties": {
          "background_color": { "type": "string", "format": "color" }
        },
        "additionalProperties": false
      },
      "CardThemeResponse": {
        "type": "object",
        "properties": {
          "background_color": { "type": "string", "format": "color" }
        }
      },
      "CommentCreateRequest": {
        "properties": {
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "type": "string" },
          "reply_to_entity_user_id": { "type": "string", "format": "uuid" },
          "text": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["object_id", "object_type", "text"]
      },
      "CommentCursorFields": {
        "type": "string",
        "enum": ["id"],
        "description": "An enumeration."
      },
      "CommentPayload": {
        "properties": {
          "comment": {
            "type": "string",
            "description": "An arbitrary comment that describes how and when this payable was paid."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CommentResource": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "created_by_entity_user_id": { "type": "string", "format": "uuid" },
          "entity_id": { "type": "string", "format": "uuid" },
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "type": "string" },
          "reply_to_entity_user_id": { "type": "string", "format": "uuid" },
          "status": { "$ref": "#/components/schemas/StatusEnum" },
          "text": { "type": "string" }
        },
        "type": "object",
        "required": [
          "id",
          "created_by_entity_user_id",
          "entity_id",
          "object_id",
          "object_type",
          "status",
          "text"
        ]
      },
      "CommentResourceList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/CommentResource" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "CommentUpdateRequest": {
        "properties": {
          "reply_to_entity_user_id": { "type": "string", "format": "uuid" },
          "text": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CommonSchema": {
        "properties": {
          "actions": {
            "items": { "$ref": "#/components/schemas/ActionSchema" },
            "type": "array",
            "description": "List of actions"
          },
          "object_type": {
            "type": "string",
            "enum": [
              "comment",
              "counterpart",
              "entity_user",
              "entity",
              "entity_vat_ids",
              "counterpart_vat_id",
              "entity_bank_account",
              "export",
              "payables_purchase_order",
              "payment_reminder",
              "overdue_reminder",
              "product",
              "receivable",
              "reconciliation",
              "role",
              "tag",
              "todo_task",
              "todo_task_mute",
              "transaction",
              "workflow",
              "approval_request",
              "approval_policy",
              "payment_record"
            ],
            "description": "Object type",
            "default": "comment"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CompanyLogoFileUpload": {
        "required": ["file"],
        "type": "object",
        "properties": { "file": { "type": "string", "format": "binary" } }
      },
      "CompanyRequest": {
        "required": ["name", "website"],
        "type": "object",
        "properties": {
          "contact_email": { "type": "string", "format": "email" },
          "contact_phone": { "type": "string" },
          "name": { "maxLength": 100, "minLength": 1, "type": "string" },
          "website": {
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "CompanyResponse": {
        "required": ["id", "name", "status", "website"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "contact_email": { "type": "string", "format": "email" },
          "contact_phone": { "type": "string" },
          "created_by_user_id": { "type": "string", "format": "uuid" },
          "logo": { "$ref": "#/components/schemas/FileSchema" },
          "name": { "maxLength": 100, "minLength": 1, "type": "string" },
          "status": { "$ref": "#/components/schemas/StatusEnum" },
          "website": {
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        }
      },
      "CompanyUpdateRequest": {
        "type": "object",
        "properties": {
          "contact_email": { "type": "string", "format": "email" },
          "contact_phone": { "type": "string" },
          "name": { "maxLength": 100, "minLength": 1, "type": "string" },
          "website": {
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "CompleteRefreshVerificationRequest": {
        "properties": {
          "type": { "$ref": "#/components/schemas/BankAccountVerificationType" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["type"]
      },
      "CompleteRefreshVerificationResponse": {
        "properties": {
          "verifications": {
            "$ref": "#/components/schemas/BankAccountVerifications"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["verifications"]
      },
      "CompleteVerificationAirwallexPlaidRequest": {
        "properties": {
          "public_token": {
            "type": "string",
            "minLength": 1,
            "description": "The Plaid Public Token"
          },
          "institution": {
            "allOf": [
              { "$ref": "#/components/schemas/AirwallexPlaidInstitution" }
            ],
            "description": "The financial institution that was selected in the Plaid Modal"
          },
          "account": {
            "allOf": [{ "$ref": "#/components/schemas/AirwallexPlaidAccount" }],
            "description": "The bank account that was selected in the Plaid Modal"
          },
          "mandate": { "$ref": "#/components/schemas/AirwallexMandate" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["public_token", "institution", "account", "mandate"]
      },
      "CompleteVerificationRequest": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/BankAccountVerificationType"
          },
          "airwallex_plaid": {
            "$ref": "#/components/schemas/CompleteVerificationAirwallexPlaidRequest"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["type", "airwallex_plaid"]
      },
      "CompleteVerificationResponse": {
        "properties": {
          "verifications": {
            "$ref": "#/components/schemas/BankAccountVerifications"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Deprecated. Use bank_account_id instead.",
            "deprecated": true
          },
          "bank_account_id": { "type": "string", "format": "uuid" },
          "iban": {
            "type": "string",
            "description": "The IBAN of the entity`s bank account."
          },
          "bic": {
            "type": "string",
            "description": "The BIC of the entity`s bank account."
          },
          "bank_name": {
            "type": "string",
            "description": "The name of the entity`s bank account."
          },
          "is_default": {
            "type": "boolean",
            "description": "Marks if a bank account should be used by default for the currency. Only 1 can be True for each currency."
          },
          "display_name": { "type": "string" },
          "was_created_by_user_id": { "type": "string", "format": "uuid" },
          "account_holder_name": {
            "type": "string",
            "description": "Account holder's name"
          },
          "account_number": {
            "type": "string",
            "description": "Account number (required if IBAN is not provided)"
          },
          "routing_number": {
            "type": "string",
            "description": "Routing number (US)"
          },
          "sort_code": { "type": "string", "description": "Sort code (GB)" },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "country": { "$ref": "#/components/schemas/AllowedCountries" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["verifications", "id", "bank_account_id", "is_default"]
      },
      "ConnectionStatus": {
        "enum": ["connected", "disconnected", "deauthorized", "pending_auth"],
        "type": "string",
        "description": "An enumeration."
      },
      "ConsentPayload": {
        "properties": { "consent": { "type": "string" } },
        "additionalProperties": false,
        "type": "object",
        "required": ["consent"]
      },
      "CounterpartAddress": {
        "properties": {
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["country", "city", "postal_code", "line1"],
        "description": "Address information."
      },
      "CounterpartAddressResourceList": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CounterpartAddressResponseWithCounterpartID"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "CounterpartAddressResponseWithCounterpartID": {
        "properties": {
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the address in the system"
          },
          "is_default": {
            "type": "boolean",
            "description": "True if address is the default address of the counterpart."
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart that owns the address."
          }
        },
        "type": "object",
        "required": [
          "country",
          "city",
          "postal_code",
          "line1",
          "id",
          "is_default",
          "counterpart_id"
        ],
        "description": "Address information."
      },
      "CounterpartBankAccountResourceList": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CounterpartBankAccountResponse"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "CounterpartBankAccountResponse": {
        "properties": {
          "iban": {
            "type": "string",
            "maxLength": 34,
            "description": "The IBAN of the bank account.",
            "example": "DE74500700100100000900"
          },
          "bic": {
            "type": "string",
            "maxLength": 11,
            "description": "The BIC/SWIFT code of the bank.",
            "example": "DEUTDEFFXXX"
          },
          "name": { "type": "string", "maxLength": 200 },
          "account_holder_name": {
            "type": "string",
            "description": "The name of the person or business that owns this bank account. Required for US bank accounts to accept ACH payments.",
            "example": "Bob Jones"
          },
          "account_number": {
            "type": "string",
            "description": "The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.",
            "example": "12345678"
          },
          "sort_code": {
            "type": "string",
            "description": "The bank's sort code.",
            "example": "123456"
          },
          "routing_number": {
            "type": "string",
            "description": "The bank's routing transit number (RTN). Required for US bank accounts to accept ACH payments. US routing numbers consist of 9 digits."
          },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs."
          },
          "is_default": { "type": "boolean", "default": false },
          "id": { "type": "string", "format": "uuid" },
          "counterpart_id": { "type": "string", "format": "uuid" }
        },
        "type": "object",
        "required": ["currency", "country", "id", "counterpart_id"]
      },
      "CounterpartContactResponse": {
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The first name of a contact person.",
            "example": "Mary"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of a contact person.",
            "example": "O'Brien"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of a contact person.",
            "example": "contact@example.org"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of a contact person",
            "example": "5551235476"
          },
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "The address of a contact person."
          },
          "title": {
            "type": "string",
            "description": "The title or honorific of a contact person. Examples: Mr., Ms., Dr., Prof.",
            "example": "Ms."
          },
          "id": { "type": "string", "format": "uuid" },
          "counterpart_id": { "type": "string", "format": "uuid" },
          "is_default": { "type": "boolean" }
        },
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "address",
          "id",
          "counterpart_id",
          "is_default"
        ],
        "description": "The contact person for an organization."
      },
      "CounterpartContactsResourceList": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CounterpartContactResponse"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "CounterpartCreatePayload": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CounterpartOrganizationRootCreatePayload"
          },
          {
            "$ref": "#/components/schemas/CounterpartIndividualRootCreatePayload"
          }
        ],
        "additionalProperties": false,
        "description": "This schema is used to create new counterparts (either organizations or individuals).\nThe counterpart type is specified by the `type` property. Depending on the `type`,\nyou need to provide the data for either the `individual` or `organization` property."
      },
      "CounterpartCursorFields": {
        "type": "string",
        "enum": ["counterpart_name"],
        "description": "An enumeration."
      },
      "CounterpartIndividualCreatePayload": {
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's first name.",
            "example": "Adnan"
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's last name.",
            "example": "Singh"
          },
          "title": {
            "type": "string",
            "description": "The person's title or honorific. Examples: Mr., Ms., Dr., Prof.",
            "example": "Mr."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "phone": {
            "type": "string",
            "description": "The person's phone number.",
            "example": "5553211234"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The person's email address.",
            "example": "asingh@example.net"
          },
          "residential_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "The person's address."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "is_vendor",
          "is_customer",
          "residential_address"
        ],
        "description": "Represents counterparts that are individuals (natural persons)."
      },
      "CounterpartIndividualResponse": {
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's first name.",
            "example": "Adnan"
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's last name.",
            "example": "Singh"
          },
          "title": {
            "type": "string",
            "description": "The person's title or honorific. Examples: Mr., Ms., Dr., Prof.",
            "example": "Mr."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "phone": {
            "type": "string",
            "description": "The person's phone number.",
            "example": "5553211234"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The person's email address.",
            "example": "asingh@example.net"
          }
        },
        "type": "object",
        "required": ["first_name", "last_name", "is_vendor", "is_customer"],
        "description": "Represents counterparts that are individuals (natural persons)."
      },
      "CounterpartIndividualRootCreatePayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": ["individual"],
            "description": "Must be \"individual\".",
            "example": "individual"
          },
          "individual": {
            "$ref": "#/components/schemas/CounterpartIndividualCreatePayload"
          },
          "reminders_enabled": { "type": "boolean", "default": false },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "An identification number of the counterpart"
          },
          "created_automatically": {
            "type": "boolean",
            "description": "`true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["type", "individual"],
        "description": "This schema is used to create counterparts that are individuals (natural persons)."
      },
      "CounterpartIndividualRootResponse": {
        "properties": {
          "default_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipping address."
          },
          "default_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartType" }],
            "description": "The counterpart type: `organization` (juridical person) or `individual` (natural person)."
          },
          "created_automatically": {
            "type": "boolean",
            "description": "`true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.",
            "default": false
          },
          "reminders_enabled": { "type": "boolean" },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity user ID of counterpart creator."
          },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "An identification number of the counterpart"
          },
          "individual": {
            "$ref": "#/components/schemas/CounterpartIndividualResponse"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "type", "individual"],
        "description": "Represents counterparts that are individuals (natural persons)."
      },
      "CounterpartIndividualRootUpdatePayload": {
        "properties": {
          "default_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipping address."
          },
          "default_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments."
          },
          "individual": {
            "$ref": "#/components/schemas/CounterpartIndividualUpdatePayload"
          },
          "reminders_enabled": { "type": "boolean" },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "An identification number of the counterpart"
          },
          "type": {
            "type": "string",
            "enum": ["individual"],
            "description": "Must be \"individual\".",
            "example": "individual"
          },
          "created_automatically": {
            "type": "boolean",
            "description": "`true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["individual", "type"],
        "description": "Represents counterparts that are individuals (natural persons)."
      },
      "CounterpartIndividualUpdatePayload": {
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's first name.",
            "example": "Adnan"
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's last name.",
            "example": "Singh"
          },
          "title": {
            "type": "string",
            "description": "The person's title or honorific. Examples: Mr., Ms., Dr., Prof.",
            "example": "Mr."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "phone": {
            "type": "string",
            "description": "The person's phone number.",
            "example": "5553211234"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The person's email address.",
            "example": "asingh@example.net"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Represents counterparts that are individuals (natural persons)."
      },
      "CounterpartOrganizationCreatePayload": {
        "properties": {
          "legal_name": {
            "type": "string",
            "description": "The legal name of the organization.",
            "example": "Acme Inc."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the organization",
            "example": "5551231234"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the organization",
            "example": "acme@example.com"
          },
          "registered_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "The address of the organization."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "legal_name",
          "is_vendor",
          "is_customer",
          "registered_address"
        ],
        "description": "Represents counterparts that are organizations (juridical persons)."
      },
      "CounterpartOrganizationResponse": {
        "properties": {
          "legal_name": {
            "type": "string",
            "description": "The legal name of the organization.",
            "example": "Acme Inc."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the organization",
            "example": "5551231234"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the organization",
            "example": "acme@example.com"
          }
        },
        "type": "object",
        "required": ["legal_name", "is_vendor", "is_customer"],
        "description": "Represents counterparts that are organizations (juridical persons)."
      },
      "CounterpartOrganizationRootCreatePayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": ["organization"],
            "description": "Must be \"organization\".",
            "example": "organization"
          },
          "organization": {
            "$ref": "#/components/schemas/CounterpartOrganizationCreatePayload"
          },
          "reminders_enabled": { "type": "boolean", "default": true },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "An identification number of the counterpart"
          },
          "created_automatically": {
            "type": "boolean",
            "description": "`true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["type", "organization"],
        "description": "This schema is used to create counterparts that are organizations (juridical persons)."
      },
      "CounterpartOrganizationRootResponse": {
        "properties": {
          "default_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipping address."
          },
          "default_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartType" }],
            "description": "The counterpart type: `organization` (juridical person) or `individual` (natural person)."
          },
          "created_automatically": {
            "type": "boolean",
            "description": "`true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.",
            "default": false
          },
          "reminders_enabled": { "type": "boolean" },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity user ID of counterpart creator."
          },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "An identification number of the counterpart"
          },
          "organization": {
            "$ref": "#/components/schemas/CounterpartOrganizationResponse"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "type", "organization"],
        "description": "Represents counterparts that are organizations (juridical persons)."
      },
      "CounterpartOrganizationRootUpdatePayload": {
        "properties": {
          "default_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipping address."
          },
          "default_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments."
          },
          "organization": {
            "$ref": "#/components/schemas/CounterpartOrganizationUpdatePayload"
          },
          "reminders_enabled": { "type": "boolean", "default": true },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "An identification number of the counterpart"
          },
          "type": {
            "type": "string",
            "enum": ["organization"],
            "description": "Must be \"organization\".",
            "example": "organization"
          },
          "created_automatically": {
            "type": "boolean",
            "description": "`true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["organization", "type"],
        "description": "Represents counterparts that are organizations (juridical persons)."
      },
      "CounterpartOrganizationUpdatePayload": {
        "properties": {
          "legal_name": {
            "type": "string",
            "description": "The legal name of the organization.",
            "example": "Acme Inc."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the organization.",
            "example": "5551231234"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the organization.",
            "example": "acme@example.com"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Represents counterparts that are organizations (juridical persons)."
      },
      "CounterpartPaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/CounterpartResponse" },
            "type": "array"
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          }
        },
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of counterparts"
      },
      "CounterpartRawAddress": {
        "properties": {
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          }
        },
        "type": "object",
        "description": "Address information."
      },
      "CounterpartRawAddressUpdateRequest": {
        "properties": {
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Address information."
      },
      "CounterpartRawBankAccount": {
        "properties": {
          "account_number": {
            "type": "string",
            "description": "Vendor's bank account number, IBAN, or similar (if specified in the payable document).",
            "example": "123456789012"
          },
          "bic": {
            "type": "string",
            "description": "SWIFT code (BIC) of the vendor's bank.",
            "example": "DEUTDE2HXXX"
          },
          "iban": {
            "type": "string",
            "description": "required for non-GB bank accounts"
          },
          "sort_code": {
            "type": "string",
            "description": "required for GB bank accounts"
          }
        },
        "type": "object"
      },
      "CounterpartRawBankAccountUpdateRequest": {
        "properties": {
          "account_number": {
            "type": "string",
            "description": "Vendor's bank account number, IBAN, or similar (if specified in the payable document).",
            "example": "123456789012"
          },
          "bic": {
            "type": "string",
            "maxLength": 11,
            "description": "SWIFT code (BIC) of the vendor's bank.",
            "example": "DEUTDE2HXXX"
          },
          "iban": {
            "type": "string",
            "maxLength": 34,
            "description": "required for non-GB bank accounts"
          },
          "sort_code": {
            "type": "string",
            "description": "required for GB bank accounts"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CounterpartRawData": {
        "properties": {
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartRawAddress" }],
            "description": "The address of the vendor or supplier."
          },
          "bank_account": {
            "allOf": [
              { "$ref": "#/components/schemas/CounterpartRawBankAccount" }
            ],
            "description": "Object representing counterpart bank account."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the organization",
            "example": "acme@example.com"
          },
          "name": {
            "type": "string",
            "description": "Vendor or supplier name.",
            "example": "Acme Inc."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the organization",
            "example": "5551231234"
          },
          "tax_id": {
            "type": "string",
            "description": "The tax id of the counterpart.",
            "example": "DE12345678"
          },
          "vat_id": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartRawVatID" }],
            "description": "VAT ID of the vendor or supplier which was used in the invoice."
          }
        },
        "type": "object"
      },
      "CounterpartRawDataUpdateRequest": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CounterpartRawAddressUpdateRequest"
              }
            ],
            "description": "The address of the vendor or supplier."
          },
          "bank_account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CounterpartRawBankAccountUpdateRequest"
              }
            ],
            "description": "Object representing counterpart bank account."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the organization",
            "example": "acme@example.com"
          },
          "name": {
            "type": "string",
            "description": "Vendor or supplier name.",
            "example": "Acme Inc."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the organization",
            "example": "5551231234"
          },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "The tax id of the counterpart.",
            "example": "DE12345678"
          },
          "vat_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CounterpartRawVatIDUpdateRequest"
              }
            ],
            "description": "VAT ID of the vendor or supplier which was used in the invoice."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CounterpartRawVatID": {
        "properties": {
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "type": { "type": "string" },
          "value": { "type": "string" }
        },
        "type": "object"
      },
      "CounterpartRawVatIDUpdateRequest": {
        "properties": {
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "type": { "type": "string" },
          "value": { "type": "string", "maxLength": 32 }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CounterpartResponse": {
        "anyOf": [
          { "$ref": "#/components/schemas/CounterpartIndividualRootResponse" },
          { "$ref": "#/components/schemas/CounterpartOrganizationRootResponse" }
        ],
        "description": "A Counterpart object contains information about an organization (juridical person) or\nindividual (natural person) that provides goods and services to or buys them from an\n[SME](https://docs.monite.com/docs/glossary#sme)."
      },
      "CounterpartType": {
        "type": "string",
        "enum": ["individual", "organization"],
        "description": "An enumeration."
      },
      "CounterpartUpdateAddress": {
        "properties": {
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CounterpartUpdatePayload": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CounterpartIndividualRootUpdatePayload"
          },
          {
            "$ref": "#/components/schemas/CounterpartOrganizationRootUpdatePayload"
          }
        ],
        "additionalProperties": false,
        "description": "This schema is used to update existing counterparts (organizations or individuals)."
      },
      "CounterpartUpdateVatID": {
        "properties": {
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/TaxIDTypeEnum" }],
            "example": "eu_vat"
          },
          "value": { "type": "string", "maxLength": 32 }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CounterpartVatID": {
        "properties": {
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/TaxIDTypeEnum" }],
            "default": "unknown",
            "example": "eu_vat"
          },
          "value": { "type": "string", "maxLength": 32, "example": "123456789" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["value"]
      },
      "CounterpartVatIDResourceList": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CounterpartVatIDResponse"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "CounterpartVatIDResponse": {
        "properties": {
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/TaxIDTypeEnum" }],
            "default": "unknown",
            "example": "eu_vat"
          },
          "value": {
            "type": "string",
            "maxLength": 32,
            "example": "123456789"
          },
          "id": { "type": "string", "format": "uuid" },
          "counterpart_id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["value", "id", "counterpart_id"]
      },
      "CreateCounterpartBankAccount": {
        "properties": {
          "iban": {
            "type": "string",
            "maxLength": 34,
            "description": "The IBAN of the bank account.",
            "example": "DE74500700100100000900"
          },
          "bic": {
            "type": "string",
            "maxLength": 11,
            "description": "The BIC/SWIFT code of the bank.",
            "example": "DEUTDEFFXXX"
          },
          "name": { "type": "string", "maxLength": 200 },
          "account_holder_name": {
            "type": "string",
            "description": "The name of the person or business that owns this bank account. Required for US bank accounts to accept ACH payments.",
            "example": "Bob Jones"
          },
          "account_number": {
            "type": "string",
            "description": "The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.",
            "example": "12345678"
          },
          "sort_code": {
            "type": "string",
            "description": "The bank's sort code.",
            "example": "123456"
          },
          "routing_number": {
            "type": "string",
            "description": "The bank's routing transit number (RTN). Required for US bank accounts to accept ACH payments. US routing numbers consist of 9 digits."
          },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs."
          },
          "is_default": { "type": "boolean", "default": false }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["currency", "country"]
      },
      "CreateCounterpartContactPayload": {
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The first name of a contact person.",
            "example": "Mary"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of a contact person.",
            "example": "O'Brien"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of a contact person.",
            "example": "contact@example.org"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of a contact person",
            "example": "5551235476"
          },
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "The address of a contact person."
          },
          "title": {
            "type": "string",
            "description": "The title or honorific of a contact person. Examples: Mr., Ms., Dr., Prof.",
            "example": "Ms."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["first_name", "last_name", "address"],
        "description": "The contact person for an organization."
      },
      "CreateEntityBankAccountRequest": {
        "properties": {
          "iban": {
            "type": "string",
            "maxLength": 34,
            "description": "The IBAN of the bank account. Required for EU bank accounts.",
            "example": "DE74500700100100000900"
          },
          "bic": {
            "type": "string",
            "maxLength": 11,
            "description": "The SWIFT/BIC code of the bank.",
            "example": "DEUTDEFFXXX"
          },
          "bank_name": {
            "type": "string",
            "description": "The bank name.",
            "example": "Deutsche Bank"
          },
          "display_name": {
            "type": "string",
            "description": "User-defined name of this bank account, such as 'Primary account' or 'Savings account'.",
            "example": "Primary account"
          },
          "is_default": {
            "type": "boolean",
            "description": "If set to `true` or if this is the first bank account added for the given currency, this account becomes the default one for its currency.",
            "default": false
          },
          "account_holder_name": {
            "type": "string",
            "description": "The name of the person or business that owns this bank account. Required for US bank accounts.",
            "example": "Cayla Lloyd"
          },
          "account_number": {
            "type": "string",
            "description": "The bank account number. Required for UK and US bank accounts. UK account numbers typically contain 8 digits. US account numbers contain 9 to 12 digits.",
            "example": "12345678"
          },
          "routing_number": {
            "type": "string",
            "description": "The bank's routing transit number (RTN). Required for US bank accounts. US routing numbers consist of 9 digits."
          },
          "sort_code": {
            "type": "string",
            "description": "The bank's sort code. Required for UK bank accounts.",
            "example": "123456"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency of the bank account, represented as a three-letter ISO [currency code](https://docs.monite.com/docs/currencies).",
            "example": "EUR"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "The country in which the bank account is registered, repsesented as a two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["currency", "country"],
        "description": "Represents a bank account owned by an entity."
      },
      "CreateEntityRequest": {
        "properties": {
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/EntityAddressRequest" }],
            "description": "An address description of the entity"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "An official email address of the entity"
          },
          "phone": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "A phone number of the entity"
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          },
          "organization": {
            "allOf": [
              { "$ref": "#/components/schemas/OrganizationSchemaRequest" }
            ],
            "description": "A set of meta data describing the organization"
          },
          "individual": {
            "allOf": [{ "$ref": "#/components/schemas/IndividualSchema" }],
            "description": "A set of meta data describing the individual"
          },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "minLength": 1,
            "description": "An identification number of the legal entity"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/EntityTypeEnum" }],
            "description": "A type for an entity"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["address", "email", "type"],
        "description": "A schema for a request to create an entity of different types"
      },
      "CreateEntityUserRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "An entity user business email"
          },
          "first_name": {
            "type": "string",
            "maxLength": 255,
            "description": "First name",
            "example": "Andrey"
          },
          "last_name": {
            "type": "string",
            "maxLength": 255,
            "description": "Last name",
            "example": "Korchak"
          },
          "login": { "type": "string", "maxLength": 255 },
          "phone": {
            "type": "string",
            "description": "An entity user phone number in the international format"
          },
          "role_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the role assigned to this entity user"
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "Title",
            "example": "Boss"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["first_name", "login"],
        "description": "A scheme for validation an entity user additional info"
      },
      "CreateExportTaskResponseSchema": {
        "required": ["id"],
        "type": "object",
        "properties": { "id": { "type": "string", "format": "uuid" } }
      },
      "CreateOnboardingLinkRequest": {
        "properties": {
          "recipient": { "$ref": "#/components/schemas/Recipient" },
          "refresh_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          },
          "return_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["recipient", "refresh_url", "return_url"]
      },
      "CreatePayableFromFileRequest": {
        "properties": { "file": { "type": "string", "format": "binary" } },
        "type": "object",
        "required": ["file"]
      },
      "CreatePaymentLinkRequest": {
        "anyOf": [
          { "$ref": "#/components/schemas/CreatePaymentLinkWithObject" },
          { "$ref": "#/components/schemas/CreatePaymentLinkWithoutObject" }
        ],
        "additionalProperties": false
      },
      "CreatePaymentLinkWithObject": {
        "properties": {
          "recipient": { "$ref": "#/components/schemas/PaymentAccountObject" },
          "return_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "example": "https://pay.monite.com/result"
          },
          "expires_at": { "type": "string", "format": "date-time" },
          "payment_methods": {
            "items": {
              "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
            },
            "type": "array",
            "minItems": 1,
            "uniqueItems": true
          },
          "object": { "$ref": "#/components/schemas/PaymentObject" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["recipient", "payment_methods", "object"]
      },
      "CreatePaymentLinkWithoutObject": {
        "properties": {
          "recipient": { "$ref": "#/components/schemas/PaymentAccountObject" },
          "return_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "example": "https://pay.monite.com/result"
          },
          "expires_at": { "type": "string", "format": "date-time" },
          "payment_methods": {
            "items": {
              "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
            },
            "type": "array",
            "minItems": 1,
            "uniqueItems": true
          },
          "amount": { "type": "integer", "exclusiveMinimum": true },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "payment_reference": { "type": "string" },
          "invoice": { "$ref": "#/components/schemas/Invoice" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "recipient",
          "payment_methods",
          "amount",
          "currency",
          "payment_reference"
        ]
      },
      "CreateRecurrencePayload": {
        "properties": {
          "invoice_id": { "type": "string", "format": "uuid" },
          "start_year": { "type": "integer", "maximum": 2077.0 },
          "start_month": { "type": "integer", "maximum": 12.0, "minimum": 1.0 },
          "end_year": { "type": "integer", "maximum": 2077.0 },
          "end_month": { "type": "integer", "maximum": 12.0, "minimum": 1.0 },
          "day_of_month": { "$ref": "#/components/schemas/DayOfMonth" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "invoice_id",
          "start_year",
          "start_month",
          "end_year",
          "end_month",
          "day_of_month"
        ]
      },
      "CreateRoleRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "Role name"
          },
          "permissions": {
            "allOf": [{ "$ref": "#/components/schemas/BizObjectsSchema" }],
            "description": "Access permissions"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "permissions"]
      },
      "CreateTextTemplatePayload": {
        "properties": {
          "document_type": { "$ref": "#/components/schemas/DocumentTypeEnum" },
          "name": { "type": "string" },
          "template": { "type": "string" },
          "type": { "$ref": "#/components/schemas/TextTemplateType" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["document_type", "name", "template", "type"]
      },
      "CreateWebhookSubscriptionRequest": {
        "properties": {
          "event_types": { "items": { "type": "string" }, "type": "array" },
          "object_type": { "$ref": "#/components/schemas/WebhookObjectType" },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["object_type", "url"]
      },
      "CreditNoteResponsePayload": {
        "properties": {
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard."
          },
          "document_id": {
            "type": "string",
            "description": "The sequential code systematically assigned to invoices."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency used in the receivable."
          },
          "subtotal": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The subtotal (excluding VAT), in [minor units](https://docs.monite.com/docs/currencies#minor-units)."
          },
          "line_items": {
            "items": { "$ref": "#/components/schemas/ResponseItem" },
            "type": "array"
          },
          "entity_address": {
            "$ref": "#/components/schemas/EntityAddressSchema"
          },
          "entity": {
            "anyOf": [
              { "$ref": "#/components/schemas/ReceivablesEntityOrganization" },
              { "$ref": "#/components/schemas/ReceivablesEntityIndividual" }
            ]
          },
          "entity_vat_id": {
            "$ref": "#/components/schemas/EntityVatIDResponse"
          },
          "counterpart_vat_id": {
            "$ref": "#/components/schemas/CounterpartVatIDResponse"
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The entity user who created this document."
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "counterpart_tax_id": {
            "type": "string",
            "description": "The VAT/TAX ID of the counterpart."
          },
          "counterpart_type": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartType" }],
            "description": "The type of the counterpart."
          },
          "counterpart_address": {
            "$ref": "#/components/schemas/CounterpartAddress"
          },
          "counterpart_contact": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableCounterpartContact" }
            ],
            "description": "Additional information about counterpart contacts."
          },
          "counterpart_name": {
            "type": "string",
            "description": "A legal name of a counterpart it is an organization"
          },
          "file_url": { "type": "string" },
          "file": { "$ref": "#/components/schemas/FileSchema" },
          "commercial_condition_description": {
            "type": "string",
            "description": "The commercial terms of the receivable (e.g. The products must be delivered in X days)."
          },
          "total_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total price of the receivable in [minor units](https://docs.monite.com/docs/currencies#minor-units). Calculated as a subtotal + total_vat_amount.",
            "default": 0
          },
          "total_vat_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The total VAT of all line items, in [minor units](https://docs.monite.com/docs/currencies#minor-units)."
          },
          "entity_bank_account": {
            "$ref": "#/components/schemas/EntityBankAccount"
          },
          "vat_exempt": {
            "type": "boolean",
            "description": "Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not."
          },
          "vat_exemption_rationale": {
            "type": "string",
            "description": "The reason for the VAT exemption, if applicable."
          },
          "based_on": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID of a previous document related to the receivable if applicable."
          },
          "based_on_document_id": {
            "type": "string",
            "description": "The unique document ID of a previous document related to the receivable if applicable."
          },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable."
          },
          "issue_date": {
            "type": "string",
            "format": "date-time",
            "description": "Optional field for the issue of the entry."
          },
          "counterpart_shipping_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "Address where goods were shipped / where services were provided."
          },
          "counterpart_billing_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "counterpart_business_type": {
            "type": "string",
            "maxLength": 50,
            "description": "Different types of companies for different countries, ex. GmbH, SAS, SNC, etc."
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount" }],
            "description": "The discount for a receivable."
          },
          "discounted_subtotal": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/docs/currencies#minor-units)."
          },
          "total_vat_amounts": {
            "items": { "$ref": "#/components/schemas/TotalVatAmountItem" },
            "type": "array",
            "description": "List of total vat amount for each VAT, presented in receivable"
          },
          "withholding_tax_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of tax withheld in percent minor units"
          },
          "total_withholding_tax": {
            "type": "integer",
            "description": "Total price of the receivable with tax withheld in minor units"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "Optional field representing date until which invoice should be paid"
          },
          "type": {
            "type": "string",
            "enum": ["credit_note"],
            "description": "The type of the receivable"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/CreditNoteStateEnum" }],
            "description": "The status of the Credit Note inside the receivable workflow."
          },
          "purchase_order": {
            "type": "string",
            "maxLength": 100,
            "description": "Contain purchase order number."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "currency",
          "line_items",
          "entity_address",
          "entity",
          "counterpart_id",
          "counterpart_type",
          "counterpart_address",
          "total_vat_amount",
          "type",
          "status"
        ]
      },
      "CreditNoteStateEnum": {
        "type": "string",
        "enum": ["draft", "issued", "deleted"],
        "description": "An enumeration."
      },
      "CurrencyDetails": {
        "properties": {
          "symbol": { "type": "string" },
          "name": { "type": "string" },
          "minor_units": { "type": "integer" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["symbol", "name", "minor_units"]
      },
      "CurrencyEnum": {
        "type": "string",
        "enum": [
          "AED",
          "AFN",
          "ALL",
          "AMD",
          "ANG",
          "AOA",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BAM",
          "BBD",
          "BDT",
          "BGN",
          "BHD",
          "BIF",
          "BND",
          "BOB",
          "BRL",
          "BSD",
          "BWP",
          "BYN",
          "BZD",
          "CAD",
          "CDF",
          "CHF",
          "CLP",
          "CNY",
          "COP",
          "CRC",
          "CVE",
          "CZK",
          "DJF",
          "DKK",
          "DOP",
          "DZD",
          "EGP",
          "ETB",
          "EUR",
          "FJD",
          "GBP",
          "GEL",
          "GIP",
          "GMD",
          "GNF",
          "GTQ",
          "GYD",
          "HKD",
          "HNL",
          "HRK",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "INR",
          "ISK",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KMF",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "MAD",
          "MDL",
          "MGA",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MYR",
          "MZN",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PAB",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "PYG",
          "QAR",
          "RON",
          "RSD",
          "RUB",
          "RWF",
          "SAR",
          "SBD",
          "SCR",
          "SEK",
          "SGD",
          "SLL",
          "SOS",
          "SRD",
          "SZL",
          "THB",
          "TJS",
          "TND",
          "TOP",
          "TRY",
          "TTD",
          "TWD",
          "TZS",
          "UAH",
          "UGX",
          "USD",
          "UYU",
          "UZS",
          "VND",
          "VUV",
          "WST",
          "XAF",
          "XCD",
          "XOF",
          "XPF",
          "YER",
          "ZAR",
          "ZMW"
        ],
        "description": "An enumeration."
      },
      "CurrencyExchangeSchema": {
        "properties": {
          "default_currency_code": { "type": "string" },
          "rate": { "type": "number", "exclusiveMinimum": true },
          "total": { "type": "number" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["default_currency_code", "rate", "total"]
      },
      "CurrencySettings": {
        "required": ["default"],
        "type": "object",
        "properties": {
          "default": { "$ref": "#/components/schemas/CurrencyEnum" },
          "exchange_rates": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ExchangeRate" }
          }
        },
        "additionalProperties": false
      },
      "CustomTemplateDataSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of email template"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Template created date and time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Template updated date and time"
          },
          "body_template": {
            "type": "string",
            "description": "Jinja2 compatible email body template"
          },
          "is_default": {
            "type": "boolean",
            "description": "Is default template"
          },
          "language_code": {
            "type": "string",
            "description": "ISO language code"
          },
          "subject_template": {
            "type": "string",
            "description": "Jinja2 compatible email subject template",
            "lte": 2048
          },
          "template_name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "description": "Name of the template"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "body_template",
          "is_default",
          "language_code",
          "subject_template",
          "template_name"
        ]
      },
      "CustomTemplates": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CustomTemplateDataSchema"
            },
            "type": "array",
            "description": "All user-defined email templates"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "DNSRecord": {
        "properties": {
          "is_active": { "type": "boolean" },
          "name": { "type": "string" },
          "record_purpose": {
            "allOf": [{ "$ref": "#/components/schemas/DNSRecordPurpose" }],
            "description": "Purpose of specific entry to distinguish between various TXT entries."
          },
          "record_type": { "$ref": "#/components/schemas/DNSRecordType" },
          "valid": {
            "type": "string",
            "description": "Field reflecting validation status by Mailgun."
          },
          "value": { "type": "string" }
        },
        "type": "object",
        "required": ["is_active", "record_type", "valid", "value"]
      },
      "DNSRecordPurpose": {
        "type": "string",
        "enum": ["DKIM", "SPF"],
        "description": "An enumeration."
      },
      "DNSRecordType": {
        "type": "string",
        "enum": ["TXT", "MX", "CNAME"],
        "description": "An enumeration."
      },
      "DNSRecords": {
        "properties": {
          "receiving_dns_records": {
            "items": { "$ref": "#/components/schemas/DNSRecord" },
            "type": "array",
            "description": "Set of DNS settings required by Mailgun for domain verification before emails receiving is possible."
          },
          "sending_dns_records": {
            "items": { "$ref": "#/components/schemas/DNSRecord" },
            "type": "array",
            "description": "Set of DNS settings required by Mailgun for domain verification before emails sending is possible."
          }
        },
        "type": "object",
        "required": ["receiving_dns_records", "sending_dns_records"]
      },
      "DataExportCursorFields": {
        "enum": ["created_at"],
        "type": "string",
        "description": "An enumeration."
      },
      "DayOfMonth": {
        "type": "string",
        "enum": ["first_day", "last_day"],
        "description": "An enumeration."
      },
      "DecryptTokenResponse": {
        "required": ["company_name", "email", "expired", "token_type"],
        "type": "object",
        "properties": {
          "company_name": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "expired": { "type": "boolean" },
          "token_type": {
            "$ref": "#/components/schemas/TokenSerializerTypeEnum"
          }
        }
      },
      "DictsResponse": {
        "required": ["name"],
        "type": "object",
        "properties": { "name": { "type": "string" } }
      },
      "Discount": {
        "properties": {
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/DiscountType" }],
            "description": "The field specifies whether to use product currency or %."
          },
          "amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The actual discount of the product in [minor units](https://docs.monite.com/docs/currencies#minor-units) if type field equals amount, else in percent minor units"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["type", "amount"]
      },
      "DiscountType": {
        "type": "string",
        "enum": ["amount", "percentage"],
        "description": "An enumeration."
      },
      "DocumentExportResponseSchema": {
        "required": [
          "id",
          "count",
          "entity_id",
          "format",
          "language",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "count": { "type": "integer" },
          "created_by_entity_user_id": { "type": "string", "format": "uuid" },
          "end_datetime": { "type": "string", "format": "date-time" },
          "entity_id": { "type": "string", "format": "uuid" },
          "format": { "type": "string" },
          "language": { "type": "string" },
          "source_url": {
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "start_datetime": { "type": "string", "format": "date-time" },
          "status": { "type": "string" }
        }
      },
      "DocumentTypeEnum": {
        "type": "string",
        "enum": [
          "quote",
          "invoice",
          "credit_note",
          "discount_reminder",
          "final_reminder",
          "payables_purchase_order",
          "overdue_reminder"
        ],
        "description": "An enumeration."
      },
      "DocumentTypeVariants": {
        "type": "object",
        "properties": {
          "payable": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PayableStateEnum" }
          },
          "receivable": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceStateEnumForAccountingSyncRules"
            }
          }
        },
        "additionalProperties": false
      },
      "DomainListResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/DomainResponse" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "DomainRequest": {
        "properties": { "domain": { "type": "string" } },
        "additionalProperties": false,
        "type": "object",
        "required": ["domain"]
      },
      "DomainResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Entry UUID"
          },
          "dedicated_ip": {
            "type": "string",
            "description": "A dedicated IP address assigned to this mailbox and used to send outgoing email."
          },
          "dns_records": {
            "anyOf": [
              { "$ref": "#/components/schemas/DNSRecords" },
              { "type": "object" }
            ]
          },
          "domain": { "type": "string" },
          "status": { "type": "string" }
        },
        "type": "object",
        "required": ["id", "dns_records", "domain", "status"]
      },
      "EInvoicingProviderEnum": {
        "enum": ["avalara"],
        "type": "string",
        "description": "An enumeration."
      },
      "EInvoicingSettingsPayload": {
        "required": ["client_id", "client_secret", "provider"],
        "type": "object",
        "properties": {
          "client_id": { "minLength": 1, "type": "string" },
          "client_secret": { "minLength": 1, "type": "string" },
          "provider": { "$ref": "#/components/schemas/EInvoicingProviderEnum" }
        },
        "additionalProperties": false
      },
      "EInvoicingSettingsResponse": {
        "required": ["client_id", "client_secret", "provider"],
        "type": "object",
        "properties": {
          "client_id": { "minLength": 1, "type": "string" },
          "client_secret": { "minLength": 1, "type": "string" },
          "provider": { "$ref": "#/components/schemas/EInvoicingProviderEnum" }
        }
      },
      "EnabledPaymentMethods": {
        "properties": {
          "payment_methods": {
            "items": {
              "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
            },
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "description": "Deprecated. Use payment_methods_receive instead.",
            "deprecated": true
          },
          "payment_methods_receive": {
            "items": {
              "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
            },
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "description": "Enable payment methods to receive money."
          },
          "payment_methods_send": {
            "items": {
              "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
            },
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "description": "Enable payment methods to send money."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "EntityAddressRequest": {
        "properties": {
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "A country name (as ISO code) where the entity is registered ",
            "default": "DE",
            "example": "DE"
          },
          "city": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A city (a full name) where the entity is registered"
          },
          "postal_code": {
            "type": "string",
            "maxLength": 10,
            "minLength": 1,
            "description": "A postal code of the address where the entity is registered"
          },
          "state": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A state in a country where the entity is registered"
          },
          "line1": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A street where the entity is registered"
          },
          "line2": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "An alternative street used by the entity"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["city", "postal_code", "line1"],
        "description": "A schema represents address info of the entity"
      },
      "EntityAddressResponse": {
        "properties": {
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "A country name (as ISO code) where the entity is registered ",
            "default": "DE",
            "example": "DE"
          },
          "city": {
            "type": "string",
            "maxLength": 255,
            "description": "A city (a full name) where the entity is registered"
          },
          "postal_code": {
            "type": "string",
            "maxLength": 10,
            "description": "A postal code of the address where the entity is registered"
          },
          "state": {
            "type": "string",
            "maxLength": 255,
            "description": "A state in a country where the entity is registered"
          },
          "line1": {
            "type": "string",
            "maxLength": 255,
            "description": "A street where the entity is registered"
          },
          "line2": {
            "type": "string",
            "maxLength": 100,
            "description": "An alternative street used by the entity"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["city", "postal_code", "line1"],
        "description": "A schema represents address info of the entity"
      },
      "EntityAddressSchema": {
        "properties": {
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "A country name (as ISO code) where the entity is registered ",
            "default": "DE"
          },
          "city": {
            "type": "string",
            "maxLength": 255,
            "description": "A city (a full name) where the entity is registered"
          },
          "postal_code": {
            "type": "string",
            "maxLength": 10,
            "description": "A postal code of the address where the entity is registered"
          },
          "state": {
            "type": "string",
            "description": "A state in a country where the entity is registered"
          },
          "line1": {
            "type": "string",
            "maxLength": 255,
            "description": "A street where the entity is registered"
          },
          "line2": {
            "type": "string",
            "maxLength": 100,
            "description": "An alternative street used by the entity"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["city", "postal_code", "line1"],
        "description": "A schema represents address info of the entity"
      },
      "EntityBankAccount": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the entity bank account."
          },
          "iban": {
            "type": "string",
            "description": "The IBAN of the entity's bank account."
          },
          "bic": {
            "type": "string",
            "description": "The BIC of the entity's bank account."
          },
          "bank_name": {
            "type": "string",
            "description": "The name of the entity's bank account."
          },
          "is_default": {
            "type": "boolean",
            "description": "Marks if a bank account should be used by default. Only 1 can be True",
            "default": false
          },
          "display_name": { "type": "string" },
          "was_created_by_user_id": { "type": "string", "format": "uuid" },
          "account_holder_name": {
            "type": "string",
            "description": "Account holder's name"
          },
          "account_number": {
            "type": "string",
            "description": "Account number (required if IBAN is not provided)"
          },
          "routing_number": {
            "type": "string",
            "description": "Routing number (US)"
          },
          "sort_code": { "type": "string", "description": "Sort code (GB)" },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "country": { "$ref": "#/components/schemas/AllowedCountries" }
        },
        "type": "object"
      },
      "EntityBankAccountPaginationResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/EntityBankAccountResponse"
            },
            "type": "array",
            "description": "A list of an entity's bank accounts."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of an entity's bank accounts."
      },
      "EntityBankAccountResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the bank account."
          },
          "iban": {
            "type": "string",
            "description": "The IBAN of the bank account. Required for EU bank accounts."
          },
          "bic": {
            "type": "string",
            "description": "The SWIFT/BIC code of the bank."
          },
          "bank_name": { "type": "string", "description": "The bank name." },
          "is_default": {
            "type": "boolean",
            "description": "Indicates whether this bank account is the default one for its currency.",
            "default": false
          },
          "display_name": {
            "type": "string",
            "description": "User-defined name of this bank account, such as 'Primary account' or 'Savings account'."
          },
          "was_created_by_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the entity user who added this bank account, or `null` if it was added using a partner access token."
          },
          "account_holder_name": {
            "type": "string",
            "description": "The name of the person or business that owns this bank account. Required for US bank accounts."
          },
          "account_number": {
            "type": "string",
            "description": "The bank account number. Required for UK and US bank accounts. UK account numbers typically contain 8 digits. US account numbers contain 9 to 12 digits."
          },
          "routing_number": {
            "type": "string",
            "description": "The bank's routing transit number (RTN). Required for US bank accounts. US routing numbers consist of 9 digits."
          },
          "sort_code": {
            "type": "string",
            "description": "The bank's sort code. Required for UK bank accounts."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency of the bank account, represented as a three-letter ISO [currency code](https://docs.monite.com/docs/currencies).",
            "example": "EUR"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "The country in which the bank account is registered, repsesented as a two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          }
        },
        "type": "object",
        "required": ["id"],
        "description": "Represents a bank account owned by an entity."
      },
      "EntityBusinessStructure": {
        "type": "string",
        "enum": [
          "incorporated_partnership",
          "unincorporated_partnership",
          "public_corporation",
          "private_corporation",
          "sole_proprietorship",
          "single_member_llc",
          "multi_member_llc",
          "private_partnership",
          "unincorporated_association",
          "public_partnership"
        ],
        "description": "An enumeration."
      },
      "EntityCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"],
        "description": "An enumeration."
      },
      "EntityIndividualRequest": {
        "properties": {
          "phone": {
            "type": "string",
            "description": "A phone number of the entity"
          },
          "logo": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A link to the entity logo"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "An email of the entity"
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the entity issuing the receivable"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the entity issuing the receivable"
          },
          "tax_id": {
            "type": "string",
            "description": "The Tax ID of the entity issuing the receivable"
          },
          "type": {
            "type": "string",
            "enum": ["individual"],
            "description": "The entity type"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["first_name", "last_name", "type"],
        "description": "A Request schema for an entity of individual type"
      },
      "EntityIndividualResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID entity ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/EntityAddressResponse" }],
            "description": "An address description of the entity"
          },
          "email": {
            "type": "string",
            "description": "An official email address of the entity"
          },
          "phone": {
            "type": "string",
            "maxLength": 100,
            "description": "A phone number of the entity"
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          },
          "logo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/package__entities__unversioned__schemas__file_saver__FileSchema"
              }
            ],
            "description": "A logo image of the entity"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/StatusEnum" }],
            "description": "record status, 'active' by default"
          },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "An identification number of the legal entity"
          },
          "type": {
            "type": "string",
            "enum": ["individual"],
            "description": "A type for an individual"
          },
          "individual": {
            "allOf": [{ "$ref": "#/components/schemas/IndividualSchema" }],
            "description": "A set of metadata describing an individual"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "address",
          "status",
          "type",
          "individual"
        ],
        "description": "A base for an entity response schema"
      },
      "EntityLogoUploadRequest": {
        "properties": { "file": { "type": "string", "format": "binary" } },
        "type": "object",
        "required": ["file"]
      },
      "EntityOnboardingDataRequest": {
        "properties": {
          "business_profile": {
            "allOf": [{ "$ref": "#/components/schemas/BusinessProfile" }],
            "description": "Business information about the entity."
          },
          "tos_acceptance": {
            "allOf": [
              { "$ref": "#/components/schemas/TermsOfServiceAcceptance" }
            ],
            "description": "Details on the acceptance of the Services Agreement."
          },
          "ownership_declaration": {
            "allOf": [{ "$ref": "#/components/schemas/OwnershipDeclaration" }],
            "description": "Used to attest that the beneficial owner information provided is both current and correct."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "EntityOnboardingDataResponse": {
        "properties": {
          "business_profile": {
            "allOf": [{ "$ref": "#/components/schemas/BusinessProfile" }],
            "description": "Business information about the entity."
          },
          "tos_acceptance": {
            "allOf": [
              { "$ref": "#/components/schemas/TermsOfServiceAcceptance" }
            ],
            "description": "Details on the acceptance of the Services Agreement."
          },
          "ownership_declaration": {
            "allOf": [{ "$ref": "#/components/schemas/OwnershipDeclaration" }],
            "description": "Used to attest that the beneficial owner information provided is both current and correct."
          }
        },
        "type": "object"
      },
      "EntityOnboardingDocuments": {
        "properties": {
          "verification_document_front": {
            "type": "string",
            "format": "binary"
          },
          "verification_document_back": {
            "type": "string",
            "format": "binary"
          },
          "additional_verification_document_front": {
            "type": "string",
            "format": "binary"
          },
          "additional_verification_document_back": {
            "type": "string",
            "format": "binary"
          },
          "bank_account_ownership_verification": {
            "items": { "type": "string", "format": "binary" },
            "type": "array",
            "minItems": 1
          },
          "company_license": {
            "items": { "type": "string", "format": "binary" },
            "type": "array",
            "minItems": 1
          },
          "company_memorandum_of_association": {
            "items": { "type": "string", "format": "binary" },
            "type": "array",
            "minItems": 1
          },
          "company_ministerial_decree": {
            "items": { "type": "string", "format": "binary" },
            "type": "array",
            "minItems": 1
          },
          "company_registration_verification": {
            "items": { "type": "string", "format": "binary" },
            "type": "array",
            "minItems": 1
          },
          "company_tax_id_verification": {
            "items": { "type": "string", "format": "binary" },
            "type": "array",
            "minItems": 1
          },
          "proof_of_registration": {
            "items": { "type": "string", "format": "binary" },
            "type": "array",
            "minItems": 1
          }
        },
        "type": "object"
      },
      "EntityOrganizationRequest": {
        "properties": {
          "phone": {
            "type": "string",
            "description": "A phone number of the entity"
          },
          "logo": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A link to the entity logo"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "An email of the entity"
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          },
          "name": {
            "type": "string",
            "description": "The name of the entity issuing the receivable, when it is an organization."
          },
          "tax_id": {
            "type": "string",
            "description": "The Tax ID of the entity issuing the receivable"
          },
          "type": {
            "type": "string",
            "enum": ["organization"],
            "description": "The entity type"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "type"],
        "description": "A Request schema for an entity of organization type"
      },
      "EntityOrganizationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID entity ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/EntityAddressResponse" }],
            "description": "An address description of the entity"
          },
          "email": {
            "type": "string",
            "description": "An official email address of the entity"
          },
          "phone": {
            "type": "string",
            "maxLength": 100,
            "description": "A phone number of the entity"
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          },
          "logo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/package__entities__unversioned__schemas__file_saver__FileSchema"
              }
            ],
            "description": "A logo image of the entity"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/StatusEnum" }],
            "description": "record status, 'active' by default"
          },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "An identification number of the legal entity"
          },
          "type": {
            "type": "string",
            "enum": ["organization"],
            "description": "A type for an organization"
          },
          "organization": {
            "allOf": [{ "$ref": "#/components/schemas/OrganizationSchema" }],
            "description": "A set of metadata describing an organization"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "address",
          "status",
          "type",
          "organization"
        ],
        "description": "A base for an entity response schema"
      },
      "EntityPaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/EntityResponse" },
            "type": "array",
            "description": "A set of entities of different types returned per page"
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "EntityResponse": {
        "oneOf": [
          { "$ref": "#/components/schemas/EntityOrganizationResponse" },
          { "$ref": "#/components/schemas/EntityIndividualResponse" }
        ],
        "description": "A schema for a response after creation of an entity of different types",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "organization": "#/components/schemas/EntityOrganizationResponse",
            "individual": "#/components/schemas/EntityIndividualResponse"
          }
        }
      },
      "EntityTypeEnum": {
        "type": "string",
        "enum": ["individual", "organization"],
        "description": "An enumeration."
      },
      "EntityUpdateVatID": {
        "properties": {
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/VatIDTypeEnum" }],
            "example": "eu_vat"
          },
          "value": { "type": "string", "maxLength": 32 }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "EntityUserCursorFields": {
        "type": "string",
        "enum": ["updated_at"],
        "description": "An enumeration."
      },
      "EntityUserPaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/EntityUserResponse" },
            "type": "array",
            "description": "array of records"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "EntityUserResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID entity user ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "An entity user business email"
          },
          "first_name": { "type": "string", "description": "First name" },
          "last_name": { "type": "string", "description": "Last name" },
          "login": {
            "type": "string",
            "description": "Login",
            "example": "Meme Lord"
          },
          "phone": {
            "type": "string",
            "description": "An entity user phone number in the international format"
          },
          "role": {
            "allOf": [
              { "$ref": "#/components/schemas/EntityUsersRoleResponse" }
            ],
            "description": "Role assigned to this entity user"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/StatusEnum" }],
            "description": "record status, 'active' by default"
          },
          "userpic": { "$ref": "#/components/schemas/FileSchema" }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "login", "status"],
        "description": "A scheme for validation an entity user additional info"
      },
      "EntityUsersRoleResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID role ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Role name"
          },
          "permissions": {
            "type": "object",
            "description": "Access permissions"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/StatusEnum" }],
            "description": "record status, 'active' by default"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "permissions",
          "status"
        ]
      },
      "EntityVatID": {
        "properties": {
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/VatIDTypeEnum" }],
            "default": "unknown",
            "example": "eu_vat"
          },
          "value": { "type": "string", "maxLength": 32, "example": "123456789" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["country", "value"]
      },
      "EntityVatIDResourceList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/EntityVatIDResponse" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "EntityVatIDResponse": {
        "properties": {
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/VatIDTypeEnum" }],
            "default": "unknown",
            "example": "eu_vat"
          },
          "value": {
            "type": "string",
            "maxLength": 32,
            "example": "123456789"
          },
          "id": { "type": "string", "format": "uuid" },
          "entity_id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["country", "value", "id", "entity_id"]
      },
      "EnvironmentEnum": {
        "enum": ["EU sandbox"],
        "type": "string",
        "description": "An enumeration."
      },
      "ErrorSchema": {
        "properties": { "message": { "type": "string" } },
        "type": "object",
        "required": ["message"]
      },
      "ErrorSchemaResponse": {
        "properties": {
          "error": { "$ref": "#/components/schemas/ErrorSchema" }
        },
        "type": "object",
        "required": ["error"]
      },
      "EventResource": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp that was generated at the time of making the database transaction that has initially caused the event"
          },
          "action": { "type": "string" },
          "api_version": { "type": "string" },
          "entity_id": { "type": "string", "format": "uuid" },
          "name": { "type": "string" },
          "object": {},
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "$ref": "#/components/schemas/WebhookObjectType" },
          "significance": { "type": "string", "default": "medium" }
        },
        "type": "object",
        "required": [
          "id",
          "action",
          "entity_id",
          "name",
          "object_id",
          "object_type"
        ]
      },
      "ExchangeRate": {
        "required": ["base", "rate", "to"],
        "type": "object",
        "properties": {
          "base": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "example": "USD"
          },
          "rate": {
            "exclusiveMinimum": true,
            "type": "number",
            "example": 0.98
          },
          "to": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "example": "EUR"
          }
        },
        "additionalProperties": false
      },
      "ExportFormat": {
        "enum": ["csv", "pdf", "csv_xero"],
        "type": "string",
        "description": "An enumeration."
      },
      "ExportObjectSchema": {
        "oneOf": [
          { "$ref": "#/components/schemas/ExportPayableSchema" },
          { "$ref": "#/components/schemas/ExportReceivableSchema" }
        ],
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "payable": "#/components/schemas/ExportPayableSchema",
            "receivable": "#/components/schemas/ExportReceivableSchema"
          }
        }
      },
      "ExportPayableSchema": {
        "required": ["name", "statuses"],
        "type": "object",
        "properties": {
          "name": { "enum": ["payable"], "type": "string" },
          "statuses": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PayableStateEnum" }
          }
        },
        "additionalProperties": false
      },
      "ExportPayloadSchema": {
        "required": ["date_from", "date_to", "format", "objects"],
        "type": "object",
        "properties": {
          "date_from": { "type": "string", "format": "date" },
          "date_to": { "type": "string", "format": "date" },
          "format": { "$ref": "#/components/schemas/ExportFormat" },
          "objects": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ExportObjectSchema" }
          }
        },
        "additionalProperties": false
      },
      "ExportReceivableSchema": {
        "required": ["name", "statuses"],
        "type": "object",
        "properties": {
          "name": { "enum": ["receivable"], "type": "string" },
          "statuses": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ReceivablesStatusEnum" }
          }
        },
        "additionalProperties": false
      },
      "ExportSettingCursorFields": {
        "enum": ["id", "created_at"],
        "type": "string",
        "description": "An enumeration."
      },
      "ExtraDataCreateRequest": {
        "required": ["field_name", "field_value", "object_id", "object_type"],
        "type": "object",
        "properties": {
          "field_name": { "$ref": "#/components/schemas/SupportedFieldNames" },
          "field_value": { "type": "string" },
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "enum": ["counterpart"], "type": "string" }
        },
        "additionalProperties": false
      },
      "ExtraDataResource": {
        "required": [
          "id",
          "created_at",
          "updated_at",
          "field_name",
          "field_value",
          "object_id",
          "object_type"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "created_by": { "type": "string", "format": "uuid" },
          "field_name": { "$ref": "#/components/schemas/SupportedFieldNames" },
          "field_value": { "type": "string" },
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "enum": ["counterpart"], "type": "string" }
        }
      },
      "ExtraDataResourceList": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ExtraDataResource" }
          },
          "next_pagination_token": { "type": "string" },
          "prev_pagination_token": { "type": "string" }
        }
      },
      "ExtraDataUpdateRequest": {
        "type": "object",
        "properties": {
          "field_name": { "$ref": "#/components/schemas/SupportedFieldNames" },
          "field_value": { "type": "string" },
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "enum": ["counterpart"], "type": "string" }
        },
        "additionalProperties": false
      },
      "FeaturesResponse": {
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "name": { "type": "string" }
        }
      },
      "FileResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "file_type": { "type": "string" },
          "name": { "type": "string" },
          "region": { "type": "string" },
          "md5": { "type": "string" },
          "mimetype": { "type": "string" },
          "url": { "type": "string" },
          "size": { "type": "integer" },
          "s3_bucket": { "type": "string" },
          "s3_file_path": { "type": "string" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "file_type",
          "name",
          "region",
          "md5",
          "mimetype",
          "url",
          "size",
          "s3_bucket",
          "s3_file_path",
          "created_at",
          "updated_at"
        ]
      },
      "FileSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of this file."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date and time when this workflow was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."
          },
          "file_type": {
            "type": "string",
            "description": "The type of the business object associated with this file.",
            "example": "payables"
          },
          "name": {
            "type": "string",
            "maxLength": 512,
            "description": "The original file name (if available).",
            "example": "invoice.pdf"
          },
          "region": {
            "type": "string",
            "description": "Geographical region of the data center where the file is stored.",
            "example": "eu-central-1"
          },
          "md5": {
            "type": "string",
            "description": "The MD5 hash of the file.",
            "example": "31d1a2dd1ad3dfc39be849d70a68dac0"
          },
          "mimetype": {
            "type": "string",
            "description": "The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).",
            "example": "application/pdf"
          },
          "url": {
            "type": "string",
            "description": "The URL to download the file.",
            "example": "https://bucketname.s3.amazonaws.com/12345/67890.pdf"
          },
          "size": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The file size in bytes.",
            "example": 24381
          },
          "previews": {
            "items": { "$ref": "#/components/schemas/PreviewSchema" },
            "type": "array",
            "description": "Preview images generated for this file. There can be multiple images with different sizes.",
            "default": []
          },
          "pages": {
            "items": { "$ref": "#/components/schemas/PageSchema" },
            "type": "array",
            "description": "If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "file_type",
          "name",
          "region",
          "md5",
          "mimetype",
          "url",
          "size"
        ],
        "description": "Represents a file (such as a PDF invoice) that was uploaded to Monite."
      },
      "FilesResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/FileResponse" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "GetAllPaymentReminders": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PaymentReminderResponse" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "GetAllRecurrences": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/Recurrence" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "GetSecretsResponse": {
        "required": ["secrets"],
        "type": "object",
        "properties": {
          "secrets": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/GetSecretsResponseSecret" }
          }
        },
        "additionalProperties": false
      },
      "GetSecretsResponseSecret": {
        "required": [
          "id",
          "created_at",
          "client_id",
          "client_secret_mask",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "created_at": { "type": "string", "format": "date-time" },
          "client_id": { "type": "string" },
          "client_secret_mask": { "type": "string" },
          "last_used_at": { "type": "string", "format": "date-time" },
          "name": { "type": "string" },
          "revoke_datetime": { "type": "string", "format": "date-time" },
          "status": { "$ref": "#/components/schemas/SecretStatusEnum" }
        }
      },
      "GrantType": {
        "type": "string",
        "enum": ["client_credentials", "entity_user"],
        "description": "An enumeration."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "IndividualSchema": {
        "properties": {
          "first_name": {
            "type": "string",
            "maxLength": 100,
            "description": "A first name of an individual"
          },
          "last_name": {
            "type": "string",
            "maxLength": 100,
            "description": "A last name of an individual"
          },
          "title": {
            "type": "string",
            "maxLength": 10,
            "description": "A title of an individual"
          },
          "date_of_birth": { "type": "string", "format": "date" },
          "id_number": { "type": "string" },
          "ssn_last_4": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["first_name", "last_name"],
        "description": "A schema contains metadata for an individual"
      },
      "InternalPaymentLinkResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "partner_id": { "type": "string", "format": "uuid" },
          "entity_id": { "type": "string", "format": "uuid" },
          "project_id": { "type": "string", "format": "uuid" },
          "status": { "type": "string" },
          "return_url": { "type": "string" },
          "expires_at": { "type": "string", "format": "date-time" },
          "payment_page_url": { "type": "string" },
          "payment_intent_id": { "type": "string", "format": "uuid" },
          "confirm_on_backend": { "type": "boolean", "default": true },
          "payment_intent": {
            "$ref": "#/components/schemas/PaymentIntentWithSecrets"
          }
        },
        "type": "object",
        "required": [
          "id",
          "partner_id",
          "entity_id",
          "project_id",
          "status",
          "expires_at",
          "payment_page_url",
          "payment_intent_id",
          "payment_intent"
        ]
      },
      "InviteRequest": {
        "required": ["users"],
        "type": "object",
        "properties": {
          "users": {
            "minItems": 1,
            "type": "array",
            "items": { "$ref": "#/components/schemas/UsersInviteRequest" }
          }
        },
        "additionalProperties": false
      },
      "Invoice": {
        "properties": {
          "issue_date": { "type": "string", "format": "date" },
          "due_date": { "type": "string", "format": "date" },
          "file": { "$ref": "#/components/schemas/InvoiceFile" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "InvoiceFile": {
        "properties": {
          "name": { "type": "string", "minLength": 1 },
          "mimetype": { "type": "string", "minLength": 1 },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "mimetype", "url"]
      },
      "InvoiceResponsePayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": ["invoice"],
            "description": "The type of the document uploaded."
          },
          "fulfillment_date": {
            "type": "string",
            "format": "date",
            "description": "The date when the goods are shipped or the service is provided.\n\nIf omitted, defaults to the invoice issue date,\nand the value is automatically set when the invoice status changes to `issued`."
          },
          "payment_page_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "Link for custom invoice payment page."
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard."
          },
          "document_id": {
            "type": "string",
            "description": "The sequential code systematically assigned to invoices."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency used in the receivable."
          },
          "subtotal": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The subtotal (excluding VAT), in [minor units](https://docs.monite.com/docs/currencies#minor-units)."
          },
          "line_items": {
            "items": { "$ref": "#/components/schemas/ResponseItem" },
            "type": "array"
          },
          "entity_address": {
            "$ref": "#/components/schemas/EntityAddressSchema"
          },
          "entity": {
            "anyOf": [
              { "$ref": "#/components/schemas/ReceivablesEntityOrganization" },
              { "$ref": "#/components/schemas/ReceivablesEntityIndividual" }
            ]
          },
          "entity_vat_id": {
            "$ref": "#/components/schemas/EntityVatIDResponse"
          },
          "counterpart_vat_id": {
            "$ref": "#/components/schemas/CounterpartVatIDResponse"
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The entity user who created this document."
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "counterpart_tax_id": {
            "type": "string",
            "description": "The VAT/TAX ID of the counterpart."
          },
          "counterpart_type": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartType" }],
            "description": "The type of the counterpart."
          },
          "counterpart_address": {
            "$ref": "#/components/schemas/CounterpartAddress"
          },
          "counterpart_contact": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableCounterpartContact" }
            ],
            "description": "Additional information about counterpart contacts."
          },
          "counterpart_name": {
            "type": "string",
            "description": "A legal name of a counterpart it is an organization"
          },
          "file_url": { "type": "string" },
          "file": { "$ref": "#/components/schemas/FileSchema" },
          "commercial_condition_description": {
            "type": "string",
            "description": "The commercial terms of the receivable (e.g. The products must be delivered in X days)."
          },
          "total_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total price of the receivable in [minor units](https://docs.monite.com/docs/currencies#minor-units). Calculated as a subtotal + total_vat_amount.",
            "default": 0
          },
          "total_vat_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The total VAT of all line items, in [minor units](https://docs.monite.com/docs/currencies#minor-units)."
          },
          "entity_bank_account": {
            "$ref": "#/components/schemas/EntityBankAccount"
          },
          "vat_exempt": {
            "type": "boolean",
            "description": "Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not."
          },
          "vat_exemption_rationale": {
            "type": "string",
            "description": "The reason for the VAT exemption, if applicable."
          },
          "based_on": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID of a previous document related to the receivable if applicable."
          },
          "based_on_document_id": {
            "type": "string",
            "description": "The unique document ID of a previous document related to the receivable if applicable."
          },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable."
          },
          "issue_date": {
            "type": "string",
            "format": "date-time",
            "description": "Optional field for the issue of the entry."
          },
          "counterpart_shipping_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "Address where goods were shipped / where services were provided."
          },
          "counterpart_billing_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "counterpart_business_type": {
            "type": "string",
            "maxLength": 50,
            "description": "Different types of companies for different countries, ex. GmbH, SAS, SNC, etc."
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount" }],
            "description": "The discount for a receivable."
          },
          "discounted_subtotal": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/docs/currencies#minor-units)."
          },
          "total_vat_amounts": {
            "items": { "$ref": "#/components/schemas/TotalVatAmountItem" },
            "type": "array",
            "description": "List of total vat amount for each VAT, presented in receivable"
          },
          "withholding_tax_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of tax withheld in percent minor units"
          },
          "total_withholding_tax": {
            "type": "integer",
            "description": "Total price of the receivable with tax withheld in minor units"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "Optional field representing date until which invoice should be paid"
          },
          "total_amount_with_credit_notes": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The total price of the receivable in [minor units](https://docs.monite.com/docs/currencies#minor-units), including VAT and excluding all issued credit notes."
          },
          "amount_due": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "How much is left to be paid in [minor units](https://docs.monite.com/docs/currencies#minor-units). Equal 0 if the Invoice is fully paid."
          },
          "amount_paid": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "How much has been paid [minor units](https://docs.monite.com/docs/currencies#minor-units)"
          },
          "payment_terms": { "$ref": "#/components/schemas/PaymentTerms" },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/ReceivablesStatusEnum" }],
            "description": "The status of the receivable inside the receivable workflow."
          },
          "payment_reminder_id": { "type": "string", "format": "uuid" },
          "overdue_reminder_id": { "type": "string", "format": "uuid" },
          "recurrence_id": {
            "type": "string",
            "format": "uuid",
            "description": "Stores an unique ID of a recurrence if the receivable is in a recurring status"
          },
          "purchase_order": {
            "type": "string",
            "maxLength": 100,
            "description": "Contain purchase order number."
          },
          "related_documents": {
            "allOf": [{ "$ref": "#/components/schemas/RelatedDocuments" }],
            "description": "Ids of documents that relate to invoice. I.e credit notes, proforma invoices, etc."
          },
          "comment": {
            "type": "string",
            "description": "Field with a comment for pay/partially/uncollectible info on this Invoice"
          },
          "amount_to_pay": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "How much is left to be paid in in [minor units](https://docs.monite.com/docs/currencies#minor-units), including payment_term discounts."
          }
        },
        "type": "object",
        "required": [
          "type",
          "id",
          "created_at",
          "updated_at",
          "currency",
          "line_items",
          "entity_address",
          "entity",
          "counterpart_id",
          "counterpart_type",
          "counterpart_address",
          "total_vat_amount",
          "total_amount_with_credit_notes",
          "amount_due",
          "amount_paid",
          "status",
          "related_documents"
        ]
      },
      "InvoiceStateEnumForAccountingSyncRules": {
        "enum": [
          "issued",
          "partially_paid",
          "paid",
          "overdue",
          "uncollectible",
          "canceled",
          "deleted"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "Item": {
        "properties": {
          "text": {
            "type": "string",
            "description": "The text as recognized by OCR.",
            "example": "€1,125.00"
          },
          "confidence": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "description": "OCR confidence score - the estimated accuracy percentage of character recognition of the extracted text, from 0 to 100%.",
            "example": 96.238
          },
          "processed_text": {
            "description": "If the `text` value is identified as a currency amount or a date, `processed_text` contains this value converted to a common format:\n\n* Currency amounts (such as the total, subtotal, tax/VAT, line item prices) are converted to numbers with the currency character removed. For example, \"€1,125.00\" becomes 1125.0.* Dates are converted to the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, `YYYY-MM-DDThh:mm:ss`. For example, \"26/3/2021\" becomes \"2021-03-26T00:00:00\".\n\nIf `text` is not a currency amount or a date, `processed_text` is `null`.",
            "example": 1125
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["text", "confidence"],
        "description": "Contains information about a text block or line extracted from an uploaded document by OCR."
      },
      "IterationStatus": {
        "type": "string",
        "enum": ["pending", "completed", "canceled", "issue_failed"],
        "description": "An enumeration."
      },
      "LabelNValue": {
        "properties": {
          "label": {
            "allOf": [{ "$ref": "#/components/schemas/Item" }],
            "description": "Text label.",
            "example": { "text": "total", "confidence": 99.799 }
          },
          "value": {
            "allOf": [{ "$ref": "#/components/schemas/Item" }],
            "description": "The value (if any)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["label", "value"],
        "description": "A label-value pair extracted from an uploaded document by OCR.\nFor example, the label could be \"Total\" and the value could be a currency amount."
      },
      "LanguageCodeEnum": {
        "type": "string",
        "enum": [
          "ab",
          "aa",
          "af",
          "ak",
          "sq",
          "am",
          "ar",
          "an",
          "hy",
          "av",
          "ae",
          "ay",
          "az",
          "bm",
          "ba",
          "eu",
          "be",
          "bn",
          "bi",
          "bs",
          "br",
          "bg",
          "my",
          "ca",
          "ch",
          "ce",
          "ny",
          "zh",
          "cu",
          "cv",
          "kw",
          "co",
          "cr",
          "hr",
          "cs",
          "da",
          "dv",
          "nl",
          "dz",
          "en",
          "eo",
          "et",
          "ee",
          "fo",
          "fj",
          "fi",
          "fr",
          "fy",
          "ff",
          "gd",
          "gl",
          "lg",
          "ka",
          "de",
          "el",
          "kl",
          "gn",
          "gu",
          "ht",
          "ha",
          "he",
          "hz",
          "hi",
          "ho",
          "hu",
          "io",
          "ig",
          "id",
          "ia",
          "ie",
          "iu",
          "ik",
          "ga",
          "it",
          "ja",
          "jv",
          "kn",
          "kr",
          "ks",
          "kk",
          "km",
          "ki",
          "rw",
          "ky",
          "kv",
          "kg",
          "ko",
          "kj",
          "ku",
          "lo",
          "la",
          "lv",
          "li",
          "ln",
          "lt",
          "lu",
          "lb",
          "mk",
          "mg",
          "ms",
          "ml",
          "mt",
          "gv",
          "mi",
          "mr",
          "mh",
          "mn",
          "na",
          "nv",
          "nd",
          "nr",
          "ng",
          "ne",
          "no",
          "nb",
          "nn",
          "ii",
          "oc",
          "oj",
          "om",
          "os",
          "pi",
          "ps",
          "fa",
          "pl",
          "pt",
          "pa",
          "qu",
          "ro",
          "rm",
          "rn",
          "ru",
          "se",
          "sm",
          "sg",
          "sa",
          "sc",
          "sr",
          "sn",
          "sd",
          "si",
          "sk",
          "sl",
          "so",
          "st",
          "es",
          "su",
          "sw",
          "ss",
          "sv",
          "tl",
          "ty",
          "tg",
          "ta",
          "tt",
          "te",
          "th",
          "bo",
          "ti",
          "to",
          "ts",
          "tn",
          "tr",
          "tk",
          "tw",
          "ug",
          "uk",
          "ur",
          "uz",
          "ve",
          "vi",
          "vo",
          "wa",
          "cy",
          "wo",
          "xh",
          "yi",
          "yo",
          "za",
          "zu"
        ],
        "description": "An enumeration."
      },
      "LedgerAccountCursorFields": {
        "enum": ["name"],
        "type": "string",
        "description": "An enumeration."
      },
      "LedgerAccountListResponse": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LedgerAccountResponse" }
          },
          "next_pagination_token": { "type": "string" },
          "prev_pagination_token": { "type": "string" }
        },
        "additionalProperties": false
      },
      "LedgerAccountResponse": {
        "required": [
          "id",
          "currency",
          "is_bank_account",
          "name",
          "status",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "current_balance": { "type": "integer" },
          "description": { "type": "string" },
          "is_bank_account": { "type": "boolean" },
          "name": { "type": "string" },
          "nominal_code": { "type": "string" },
          "status": { "type": "string" },
          "subtype": { "type": "string" },
          "type": { "type": "string" }
        },
        "additionalProperties": false
      },
      "LineItem": {
        "properties": {
          "quantity": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The quantity of each of the goods, materials, or services listed in the receivable."
          },
          "product_id": { "type": "string", "format": "uuid" },
          "vat_rate_id": { "type": "string", "format": "uuid" },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount" }],
            "description": "The discount for a product."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["quantity", "product_id", "vat_rate_id"]
      },
      "LineItemCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"],
        "description": "An enumeration."
      },
      "LineItemDataResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "description": {
            "type": "string",
            "description": "Description of the product."
          },
          "ledger_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the account record used to store bookkeeping entries for balance-sheet and income-statement transactions.",
            "example": "7df884fd-8be8-4eba-b6ff-417b66efe033"
          },
          "name": { "type": "string", "description": "Name of the product." },
          "quantity": {
            "type": "number",
            "description": "The quantity of each of the goods, materials, or services listed in the payable.",
            "example": 1.22
          },
          "subtotal": {
            "type": "integer",
            "description": "The subtotal (excluding VAT), in [minor units](https://docs.monite.com/docs/currencies#minor-units).",
            "example": 1250
          },
          "tax": {
            "type": "integer",
            "description": "VAT rate in percent [minor units](https://docs.monite.com/docs/currencies#minor-units). Example: 12.5% is 1250.",
            "example": 2000
          },
          "tax_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the tax rate ref account which stores the tax for the specified type of products.",
            "example": "dd13735f-ef3a-4312-8c37-835d70341375"
          },
          "total": {
            "type": "integer",
            "description": "The actual price of the product.",
            "example": 1200
          },
          "unit_price": {
            "type": "integer",
            "description": "The unit price of the product, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1500
          },
          "was_created_by_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who created the tag.",
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5"
          }
        },
        "type": "object",
        "required": ["id"]
      },
      "LineItemPaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/LineItemResponse" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "LineItemProduct": {
        "properties": {
          "name": { "type": "string", "description": "Name of the product." },
          "type": {
            "allOf": [
              { "$ref": "#/components/schemas/ProductServiceTypeEnum" }
            ],
            "description": "Specifies whether this offering is a product or service. This may affect the applicable tax rates.",
            "default": "product"
          },
          "description": {
            "type": "string",
            "description": "Description of the product."
          },
          "price": { "$ref": "#/components/schemas/Price" },
          "measure_unit_id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms)."
          },
          "smallest_amount": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The smallest amount allowed for this product."
          },
          "ledger_account_id": { "type": "string", "format": "uuid" },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the product."
          },
          "entity_id": { "type": "string", "format": "uuid" },
          "entity_user_id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the product was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the product was last updated. Timestamps follow the ISO 8601 standard."
          },
          "vat_rate": { "$ref": "#/components/schemas/VatRateResponse" },
          "measure_unit": { "$ref": "#/components/schemas/UnitResponse" }
        },
        "type": "object",
        "required": [
          "name",
          "measure_unit_id",
          "id",
          "entity_id",
          "created_at",
          "updated_at",
          "vat_rate",
          "measure_unit"
        ]
      },
      "LineItemRequest": {
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the product."
          },
          "ledger_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the account record used to store bookkeeping entries for balance-sheet and income-statement transactions.",
            "example": "7df884fd-8be8-4eba-b6ff-417b66efe033"
          },
          "name": { "type": "string", "description": "Name of the product." },
          "quantity": {
            "type": "number",
            "minimum": 0.0,
            "description": "The quantity of each of the goods, materials, or services listed in the payable.",
            "example": 1.22
          },
          "subtotal": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The subtotal (excluding VAT), in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250..",
            "example": 1200
          },
          "tax": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "VAT rate in percent [minor units](https://docs.monite.com/docs/currencies#minor-units). Example: 12.5% is 1250.",
            "example": 1250
          },
          "total": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The actual price of the product.",
            "example": 1200
          },
          "unit_price": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The unit price of the product, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1200
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "LineItemResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "description": {
            "type": "string",
            "description": "Description of the product."
          },
          "ledger_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the account record used to store bookkeeping entries for balance-sheet and income-statement transactions.",
            "example": "7df884fd-8be8-4eba-b6ff-417b66efe033"
          },
          "name": { "type": "string", "description": "Name of the product." },
          "payable_id": { "type": "string", "format": "uuid" },
          "quantity": {
            "type": "number",
            "description": "The quantity of each of the goods, materials, or services listed in the payable.",
            "example": 1.22
          },
          "subtotal": {
            "type": "integer",
            "description": "The subtotal (excluding VAT), in [minor units](https://docs.monite.com/docs/currencies#minor-units).",
            "example": 1250
          },
          "tax": {
            "type": "integer",
            "description": "VAT rate in percent [minor units](https://docs.monite.com/docs/currencies#minor-units). Example: 12.5% is 1250.",
            "example": 2000
          },
          "tax_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the tax rate ref account which stores the tax for the specified type of products.",
            "example": "dd13735f-ef3a-4312-8c37-835d70341375"
          },
          "total": {
            "type": "integer",
            "description": "The actual price of the product.",
            "example": 1200
          },
          "unit_price": {
            "type": "integer",
            "description": "The unit price of the product, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1500
          },
          "was_created_by_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who created the tag.",
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5"
          }
        },
        "type": "object",
        "required": ["id", "payable_id"]
      },
      "LineItemUpdate": {
        "properties": {
          "price": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The actual price of the product in [minor units](https://docs.monite.com/docs/currencies#minor-units)."
          },
          "quantity": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The quantity of each of the goods, materials, or services listed in the receivable."
          },
          "vat_rate_id": {
            "type": "string",
            "format": "uuid",
            "description": "Vat rate object id"
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount" }],
            "description": "The discount for a product."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "LineItemsResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ResponseItem" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "LogMethodEnum": {
        "type": "string",
        "enum": ["GET", "POST", "PUT", "PATCH", "DELETE"],
        "description": "An enumeration."
      },
      "LogResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "body": {
            "anyOf": [{ "type": "object" }, { "items": {}, "type": "array" }]
          },
          "content_type": { "type": "string" },
          "entity_id": { "type": "string", "format": "uuid" },
          "entity_user_id": { "type": "string", "format": "uuid" },
          "headers": { "type": "object" },
          "method": { "type": "string" },
          "params": { "type": "string" },
          "parent_log_id": { "type": "string", "format": "uuid" },
          "partner_id": { "type": "string", "format": "uuid" },
          "path": { "type": "string" },
          "status_code": { "type": "integer" },
          "target_service": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "type": { "type": "string" }
        },
        "type": "object",
        "required": [
          "id",
          "content_type",
          "entity_id",
          "partner_id",
          "target_service",
          "timestamp",
          "type"
        ]
      },
      "LogTypeEnum": {
        "type": "string",
        "enum": ["request", "response"],
        "description": "An enumeration."
      },
      "LogsResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/LogResponse" },
            "type": "array"
          },
          "next_pagination_token": { "type": "string" },
          "prev_pagination_token": { "type": "string" },
          "total_logs": { "type": "integer" },
          "total_pages": { "type": "integer" }
        },
        "type": "object",
        "required": ["data", "total_logs", "total_pages"]
      },
      "MailSettingsPayload": {
        "required": ["attach_documents_as_pdf"],
        "type": "object",
        "properties": { "attach_documents_as_pdf": { "type": "boolean" } },
        "additionalProperties": false
      },
      "MailSettingsResponse": {
        "required": ["attach_documents_as_pdf"],
        "type": "object",
        "properties": { "attach_documents_as_pdf": { "type": "boolean" } }
      },
      "MailboxDataResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/MailboxResponse" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MailboxDomainRequest": {
        "properties": {
          "mailbox_domain_id": { "type": "string", "format": "uuid" },
          "mailbox_name": { "type": "string" },
          "related_object_type": {
            "allOf": [{ "$ref": "#/components/schemas/MailboxObjectTypeEnum" }],
            "description": "Related object type: payable and so on"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["mailbox_domain_id", "mailbox_name", "related_object_type"]
      },
      "MailboxMultipleEntitiesRequest": {
        "properties": {
          "entity_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["entity_ids"]
      },
      "MailboxObjectTypeEnum": {
        "type": "string",
        "enum": ["payable"],
        "description": "An enumeration."
      },
      "MailboxResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Mailbox UUID"
          },
          "mailbox_domain_id": { "type": "string", "format": "uuid" },
          "mailbox_full_address": { "type": "string" },
          "mailbox_name": { "type": "string" },
          "related_object_type": { "type": "string" },
          "status": { "type": "string" }
        },
        "type": "object",
        "required": [
          "id",
          "mailbox_full_address",
          "mailbox_name",
          "related_object_type",
          "status"
        ]
      },
      "Media": {
        "properties": {
          "source": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          },
          "type": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["source", "type"]
      },
      "MergedSettingsResponse": {
        "properties": {
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencySettings" }],
            "description": "Custom currency exchange rates."
          },
          "reminder": { "$ref": "#/components/schemas/RemindersSettings" },
          "payment_priority": {
            "allOf": [{ "$ref": "#/components/schemas/PaymentPriorityEnum" }],
            "description": "Payment preferences for entity to automate calculating suggested payment date basing on payment terms and entity preferences",
            "default": "working_capital"
          },
          "receivable_edit_flow": {
            "allOf": [{ "$ref": "#/components/schemas/ReceivableEditFlow" }],
            "default": "compliant"
          },
          "payable": {
            "allOf": [
              { "$ref": "#/components/schemas/PayableSettingsResponse" }
            ],
            "description": "Settings for the payables module."
          },
          "receivable": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableSettingsResponse" }
            ],
            "description": "Settings for the receivables module."
          },
          "mail": {
            "allOf": [{ "$ref": "#/components/schemas/MailSettingsResponse" }],
            "description": "Settings for email and mailboxes."
          },
          "commercial_conditions": {
            "items": { "type": "string" },
            "type": "array",
            "description": "Commercial conditions for receivables."
          },
          "units": {
            "items": { "$ref": "#/components/schemas/Unit" },
            "type": "array",
            "description": "Measurement units."
          },
          "website": { "type": "string" },
          "default_role": {
            "type": "object",
            "description": "A default role to provision upon new entity creation."
          },
          "payments": {
            "allOf": [
              { "$ref": "#/components/schemas/PaymentsSettingsResponse" }
            ],
            "description": "Settings for the payments module."
          },
          "accounting": {
            "allOf": [
              { "$ref": "#/components/schemas/AccountingSettingsResponse" }
            ],
            "description": "Settings for the accounting module."
          },
          "einvoicing": {
            "allOf": [
              { "$ref": "#/components/schemas/EInvoicingSettingsResponse" }
            ],
            "description": "Settings for the e-invoicing module."
          },
          "api_version": {
            "allOf": [{ "$ref": "#/components/schemas/APIVersion" }],
            "description": "Default API version for partner."
          }
        },
        "type": "object"
      },
      "MessageResponse": {
        "properties": { "message": { "type": "string" } },
        "type": "object",
        "required": ["message"]
      },
      "MissingFields": {
        "properties": {
          "receivable": {
            "items": { "type": "string" },
            "type": "array",
            "description": "Missing fields of receivable."
          },
          "entity": {
            "items": { "type": "string" },
            "type": "array",
            "description": "Missing fields of entity."
          },
          "counterpart": {
            "items": { "type": "string" },
            "type": "array",
            "description": "Missing fields of counterpart."
          },
          "products": {
            "items": { "$ref": "#/components/schemas/MissingLineItemFields" },
            "type": "array",
            "description": "Missing fields of line items."
          },
          "vat_rates": {
            "items": { "type": "string" },
            "type": "array",
            "description": "List of invalid vat rates."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "MissingLineItemFields": {
        "properties": {
          "line_item_number": {
            "type": "integer",
            "description": "Order number of line item."
          },
          "missing_fields": {
            "items": { "type": "string" },
            "type": "array",
            "description": "Missing fields of line item."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["line_item_number", "missing_fields"]
      },
      "MoniteAllPaymentMethods": {
        "type": "string",
        "enum": [
          "SEPA Payments",
          "US ACH Payments",
          "BLIK",
          "Card payments",
          "Bancontact",
          "Electronic Payment Standard",
          "Giropay",
          "iDEAL",
          "Przelewy24",
          "SEPA Direct Debit",
          "SOFORT"
        ],
        "description": "An enumeration."
      },
      "MoniteAllPaymentMethodsTypes": {
        "type": "string",
        "enum": [
          "sepa_credit",
          "us_ach",
          "blik",
          "card",
          "bancontact",
          "eps",
          "giropay",
          "ideal",
          "p24",
          "sepa_debit",
          "sofort"
        ],
        "description": "An enumeration."
      },
      "OCRAddress": {
        "properties": {
          "country": {
            "type": "string",
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "original_country_name": {
            "type": "string",
            "description": "Country name as it is stated in the document.",
            "example": "Berlin"
          },
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "In general it's compatible with CounterpartAddress model but\n* All fields are optional\n* There is an additional field original_country_name"
      },
      "OCRResponseInvoiceReceiptData": {
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total in cents/eurocents",
            "example": 7000
          },
          "total_excl_vat": {
            "type": "integer",
            "description": "Subtotal cents/eurocents",
            "example": 7000
          },
          "total_vat_amount": {
            "type": "integer",
            "description": "VAT amount in cents",
            "example": 700
          },
          "total_vat_rate": {
            "type": "integer",
            "description": "VAT Percent minor units. Example: 12.5% is 1250.",
            "example": 1250
          },
          "currency": {
            "type": "string",
            "description": "ISO 4217 currency code",
            "example": "EUR"
          },
          "counterpart_name": {
            "type": "string",
            "description": "Counterpart name",
            "example": "Monite GMbH"
          },
          "counterpart_address": {
            "type": "string",
            "description": "Counterpart address"
          },
          "counterpart_account_id": {
            "type": "string",
            "description": "Counterpart bank ID",
            "example": "DEUTDEFF"
          },
          "document_id": {
            "type": "string",
            "description": "Invoice/receipt ID",
            "example": "CST-13341"
          },
          "payment_terms": {
            "type": "string",
            "description": "Payment terms",
            "example": "Delivery upon Payment"
          },
          "tax_payer_id": {
            "type": "string",
            "description": "Tax payer ID (aka VAT ID)",
            "example": "DE88939004"
          },
          "document_issued_at_date": {
            "type": "string",
            "description": "Document issuance date in ISO format"
          },
          "document_due_date": {
            "type": "string",
            "description": "Document due date in ISO format"
          },
          "counterpart_address_object": {
            "allOf": [{ "$ref": "#/components/schemas/OCRAddress" }],
            "description": "Counterpart address as a json object compatible with counterparts service"
          },
          "line_items": {
            "items": {
              "$ref": "#/components/schemas/OCRResponseInvoiceReceiptLineItem"
            },
            "type": "array",
            "description": "List of line items from documen",
            "default": []
          }
        },
        "type": "object"
      },
      "OCRResponseInvoiceReceiptLineItem": {
        "properties": {
          "line_item_ocr_id": {
            "type": "string",
            "description": "OCR Id of line item"
          },
          "description": {
            "type": "string",
            "description": "Human-readable line item description",
            "example": "Impact Players : How to Take the Lead , Play Bigger , and Multiply Your"
          },
          "quantity": {
            "type": "number",
            "description": "Quanity",
            "example": 1.22
          },
          "unit_price": {
            "type": "integer",
            "description": "Price in  cents/eurocents",
            "example": 1200
          },
          "unit": {
            "type": "string",
            "description": "Unit",
            "example": "meters"
          },
          "vat_percentage": {
            "type": "integer",
            "description": "VAT Percent minor units. Example: 12.5% is 1250.",
            "example": 1250
          },
          "total_excl_vat": {
            "type": "integer",
            "description": "Total excl VAT",
            "example": 12300
          }
        },
        "type": "object"
      },
      "ObjectMatchTypes": {
        "enum": ["product", "customer", "vendor", "receivable", "bill"],
        "type": "string",
        "description": "An enumeration."
      },
      "ObjectType": {
        "enum": [
          "account",
          "approval",
          "approval_request",
          "approval_policy",
          "monitescript_process",
          "audit_trail",
          "comment",
          "counterpart",
          "counterpart_address",
          "counterpart_bank_account",
          "counterpart_contact_person",
          "counterpart_partner_metadata",
          "counterpart_tax_id",
          "counterpart_vat_id",
          "entity",
          "entity_bank_account",
          "entity_settings",
          "entity_token",
          "entity_user",
          "entity_user_token",
          "entity_vat_ids",
          "export",
          "partner",
          "partner_internal_config",
          "partner_settings",
          "partner_token",
          "payable",
          "payable_line_item",
          "payables_purchase_order",
          "payment",
          "payment_intent",
          "payment_link",
          "payment_record",
          "payment_reminder",
          "product",
          "receivable",
          "reconciliation",
          "recurrence",
          "role",
          "tag",
          "todo_task",
          "todo_task_mute",
          "transaction",
          "webhook",
          "workflow",
          "workflow_pipeline",
          "overdue_reminder",
          "einvoicing"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ObjectTypeAvailableComment": {
        "enum": ["payable"],
        "description": "An enumeration."
      },
      "ObjectTypeEnum": {
        "type": "string",
        "enum": ["receivable", "payable"],
        "description": "An enumeration."
      },
      "ObtainSecretResponse": {
        "required": [
          "id",
          "created_at",
          "client_id",
          "client_secret",
          "client_secret_mask"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "client_id": { "type": "string" },
          "client_secret": { "type": "string" },
          "client_secret_mask": { "type": "string" },
          "name": { "type": "string" }
        }
      },
      "ObtainTokenPayload": {
        "properties": {
          "client_id": { "type": "string", "format": "uuid" },
          "client_secret": { "type": "string" },
          "entity_user_id": { "type": "string", "format": "uuid" },
          "grant_type": { "$ref": "#/components/schemas/GrantType" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["client_id", "client_secret", "grant_type"]
      },
      "OcrRecognitionResponse": {
        "properties": {
          "summary": {
            "items": { "$ref": "#/components/schemas/LabelNValue" },
            "type": "array",
            "description": "Invoice text content other than the line items. Such as the invoice issue and due dates, vendor name and address, and other general information."
          },
          "line_items": {
            "items": { "$ref": "#/components/schemas/LabelNValue" },
            "type": "array",
            "description": "Text content of the invoice line items as recognized by OCR."
          }
        },
        "type": "object",
        "description": "Contains information about all text blocks extracted from an uploaded invoice by OCR.\nThe text blocks are grouped into `line_items` (invoice line items) and `summary` (all other information)."
      },
      "OnboardingLinkInternalResponse": {
        "properties": {
          "refresh_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          },
          "return_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          },
          "expires_at": { "type": "string", "format": "date-time" },
          "id": { "type": "string", "format": "uuid" },
          "entity_id": { "type": "string", "format": "uuid" },
          "url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          },
          "partner_id": { "type": "string", "format": "uuid" },
          "project_id": { "type": "string", "format": "uuid" },
          "provider": { "$ref": "#/components/schemas/Provider" },
          "phone": { "type": "string" },
          "is_exhausted": { "type": "boolean" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "refresh_url",
          "return_url",
          "expires_at",
          "id",
          "entity_id",
          "url",
          "partner_id",
          "project_id",
          "provider",
          "is_exhausted"
        ]
      },
      "OnboardingLinkPublicResponse": {
        "properties": {
          "refresh_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          },
          "return_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          },
          "expires_at": { "type": "string", "format": "date-time" },
          "id": { "type": "string", "format": "uuid" },
          "entity_id": { "type": "string", "format": "uuid" },
          "url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "refresh_url",
          "return_url",
          "expires_at",
          "id",
          "entity_id",
          "url"
        ]
      },
      "OnboardingLinkRequest": {
        "properties": {
          "refresh_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          },
          "return_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          },
          "expires_at": { "type": "string", "format": "date-time" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["refresh_url", "return_url", "expires_at"]
      },
      "OnboardingLinkResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "expires_at": { "type": "string", "format": "date-time" },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          },
          "recipient": { "$ref": "#/components/schemas/Recipient" },
          "refresh_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          },
          "return_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "expires_at",
          "url",
          "recipient",
          "refresh_url",
          "return_url"
        ]
      },
      "OnboardingLinksAddress": {
        "properties": {
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "line1": { "type": "string", "minLength": 1 },
          "line2": { "type": "string", "minLength": 1 },
          "postal_code": { "type": "string", "minLength": 1 },
          "city": { "type": "string", "minLength": 1 },
          "state": { "type": "string", "minLength": 1 }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksAirwallexComponentCodeRequest": {
        "properties": {
          "code_challenge": {
            "type": "string",
            "minLength": 1,
            "description": "A challenge token generated together with the code_verifier with the S256 generation method"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["code_challenge"]
      },
      "OnboardingLinksAirwallexComponentCodeResponse": {
        "properties": {
          "authorization_code": {
            "type": "string",
            "description": "Code that should be used to init Airwallex onboarding SDK"
          },
          "client_id": {
            "type": "string",
            "description": "client ID that should be used to init Airwallex onboarding SDK"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["authorization_code", "client_id"]
      },
      "OnboardingLinksAirwallexComponentData": {
        "properties": {
          "tos_acceptance_date": { "type": "string", "format": "date-time" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksAirwallexComponentDataResponse": {
        "properties": {
          "requirements": {
            "items": {
              "$ref": "#/components/schemas/OnboardingLinksRequirement"
            },
            "type": "array"
          },
          "data": {
            "$ref": "#/components/schemas/OnboardingLinksAirwallexComponentData"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["requirements", "data"]
      },
      "OnboardingLinksBankAccount": {
        "properties": {
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "iban": { "type": "string", "minLength": 1 },
          "account_number": {
            "type": "string",
            "maxLength": 8,
            "minLength": 8
          },
          "sort_code": { "type": "string", "maxLength": 6, "minLength": 6 }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksBusinessProfile": {
        "properties": {
          "mcc": { "type": "string", "maxLength": 4, "minLength": 4 },
          "url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksBusinessType": {
        "type": "string",
        "enum": ["organization", "individual"],
        "description": "An enumeration."
      },
      "OnboardingLinksCompany": {
        "properties": {
          "name": { "type": "string", "minLength": 1 },
          "tax_id": { "type": "string", "minLength": 1 },
          "address": { "$ref": "#/components/schemas/OnboardingLinksAddress" },
          "phone": { "type": "string", "minLength": 1 },
          "email": { "type": "string", "format": "email" },
          "representative_provided": { "type": "boolean" },
          "owners_provided": { "type": "boolean" },
          "directors_provided": { "type": "boolean" },
          "executives_provided": { "type": "boolean" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksIndividual": {
        "properties": {
          "first_name": { "type": "string", "minLength": 1 },
          "last_name": { "type": "string", "minLength": 1 },
          "address": { "$ref": "#/components/schemas/OnboardingLinksAddress" },
          "date_of_birth": { "type": "string", "format": "date" },
          "phone": { "type": "string", "minLength": 1 },
          "email": { "type": "string", "format": "email" },
          "id_number": { "type": "string", "minLength": 1 },
          "ssn_last_4": { "type": "string", "maxLength": 4, "minLength": 4 }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksPerson": {
        "properties": {
          "first_name": { "type": "string", "minLength": 1 },
          "last_name": { "type": "string", "minLength": 1 },
          "address": { "$ref": "#/components/schemas/OnboardingLinksAddress" },
          "date_of_birth": { "type": "string", "format": "date" },
          "phone": { "type": "string", "minLength": 1 },
          "email": { "type": "string", "format": "email" },
          "id_number": { "type": "string", "minLength": 1 },
          "ssn_last_4": { "type": "string", "maxLength": 4, "minLength": 4 },
          "relationship": {
            "$ref": "#/components/schemas/OnboardingLinksRelationship"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksRelationship": {
        "properties": {
          "title": { "type": "string", "minLength": 1 },
          "representative": { "type": "boolean" },
          "owner": { "type": "boolean" },
          "executive": { "type": "boolean" },
          "director": { "type": "boolean" },
          "percent_ownership": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksRequirement": {
        "type": "string",
        "enum": [
          "tos_acceptance_date",
          "ownership_declaration_date",
          "individual",
          "company",
          "business_profile",
          "bank_account",
          "representative",
          "owners",
          "executives",
          "directors"
        ],
        "description": "An enumeration."
      },
      "OnboardingLinksStripeData": {
        "properties": {
          "business_profile": {
            "$ref": "#/components/schemas/OnboardingLinksBusinessProfile"
          },
          "tos_acceptance_date": { "type": "string", "format": "date-time" },
          "bank_account": {
            "$ref": "#/components/schemas/OnboardingLinksBankAccount"
          },
          "individual": {
            "$ref": "#/components/schemas/OnboardingLinksIndividual"
          },
          "company": { "$ref": "#/components/schemas/OnboardingLinksCompany" },
          "persons": {
            "items": { "$ref": "#/components/schemas/OnboardingLinksPerson" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksStripeDataResponse": {
        "properties": {
          "business_type": {
            "$ref": "#/components/schemas/OnboardingLinksBusinessType"
          },
          "requirements": {
            "items": {
              "$ref": "#/components/schemas/OnboardingLinksRequirement"
            },
            "type": "array"
          },
          "masks": {
            "additionalProperties": {
              "$ref": "#/components/schemas/OnboardingLinksPerson"
            },
            "type": "object"
          },
          "data": { "$ref": "#/components/schemas/OnboardingLinksStripeData" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["business_type", "requirements", "masks", "data"]
      },
      "OnboardingPaymentMethodsResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PaymentMethod" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "OnboardingRequirementsResponse": {
        "properties": {
          "verification_status": {
            "$ref": "#/components/schemas/VerificationStatusEnum"
          },
          "disabled_reason": {
            "$ref": "#/components/schemas/AccountDisabledReason"
          },
          "requirements_errors": {
            "items": { "$ref": "#/components/schemas/RequirementsError" },
            "type": "array"
          },
          "verification_errors": {
            "items": { "$ref": "#/components/schemas/VerificationError" },
            "type": "array"
          },
          "requirements": { "$ref": "#/components/schemas/PaymentRequirements" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "verification_status",
          "requirements_errors",
          "verification_errors",
          "requirements"
        ]
      },
      "OptionalIndividualSchema": {
        "properties": {
          "first_name": {
            "type": "string",
            "maxLength": 100,
            "description": "A first name of an individual"
          },
          "last_name": {
            "type": "string",
            "maxLength": 100,
            "description": "A last name of an individual"
          },
          "title": {
            "type": "string",
            "maxLength": 10,
            "description": "A title of an individual"
          },
          "date_of_birth": { "type": "string", "format": "date" },
          "id_number": { "type": "string" },
          "ssn_last_4": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "A schema for metadata for updating an individual"
      },
      "OptionalOrganizationSchema": {
        "properties": {
          "legal_name": {
            "type": "string",
            "maxLength": 255,
            "description": "A legal name of an organization"
          },
          "legal_entity_id": {
            "type": "string",
            "maxLength": 20,
            "description": "A code which identifies uniquely a party of a transaction worldwide"
          },
          "business_structure": {
            "allOf": [
              { "$ref": "#/components/schemas/EntityBusinessStructure" }
            ],
            "description": "Business structure of the company"
          },
          "directors_provided": { "type": "boolean" },
          "executives_provided": { "type": "boolean" },
          "owners_provided": { "type": "boolean" },
          "representative_provided": { "type": "boolean" }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "A schema contains metadata for updating an organization"
      },
      "OptionalPersonAddress": {
        "properties": {
          "country": {
            "type": "string",
            "description": "Two-letter country code (ISO 3166-1 alpha-2)"
          },
          "line1": {
            "type": "string",
            "description": "Address line 1 (e.g., street, PO Box, or company name)"
          },
          "line2": {
            "type": "string",
            "description": "Address line 2 (e.g., apartment, suite, unit, or building)"
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code"
          },
          "city": {
            "type": "string",
            "description": "City, district, suburb, town, or village"
          },
          "state": {
            "type": "string",
            "description": "State, county, province, or region"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OptionalPersonRelationship": {
        "properties": {
          "title": {
            "type": "string",
            "description": "The person's title (e.g., CEO, Support Engineer)"
          },
          "representative": {
            "type": "boolean",
            "description": "Whether the person is authorized as the primary representative of the account"
          },
          "executive": {
            "type": "boolean",
            "description": "Whether the person has significant responsibility to control, manage, or direct the organization"
          },
          "director": {
            "type": "boolean",
            "description": "Whether the person is a director of the account's legal entity"
          },
          "owner": {
            "type": "boolean",
            "description": "Whether the person is an owner of the account's legal entity"
          },
          "percent_ownership": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "description": "The percent owned by the person of the account's legal entity"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OptionalPersonRequest": {
        "properties": {
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/OptionalPersonAddress" }],
            "description": "The person's address"
          },
          "date_of_birth": {
            "type": "string",
            "format": "date",
            "description": "The person's date of birth"
          },
          "first_name": {
            "type": "string",
            "description": "The person's first name"
          },
          "last_name": {
            "type": "string",
            "description": "The person's last name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The person's email address"
          },
          "phone": {
            "type": "string",
            "description": "The person's phone number"
          },
          "relationship": {
            "allOf": [
              { "$ref": "#/components/schemas/OptionalPersonRelationship" }
            ],
            "description": "Describes the person's relationship to the entity"
          },
          "id_number": {
            "type": "string",
            "description": "The person's ID number, as appropriate for their country"
          },
          "ssn_last_4": {
            "type": "string",
            "description": "The last four digits of the person's Social Security number"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OrderEnum": {
        "type": "string",
        "enum": ["asc", "desc"],
        "description": "An enumeration."
      },
      "OrganizationSchema": {
        "properties": {
          "legal_name": {
            "type": "string",
            "maxLength": 255,
            "description": "A legal name of an organization"
          },
          "legal_entity_id": {
            "type": "string",
            "maxLength": 20,
            "description": "A code which identifies uniquely a party of a transaction worldwide"
          },
          "directors_provided": { "type": "boolean" },
          "executives_provided": { "type": "boolean" },
          "owners_provided": { "type": "boolean" },
          "representative_provided": { "type": "boolean" },
          "business_structure": {
            "allOf": [
              { "$ref": "#/components/schemas/EntityBusinessStructure" }
            ],
            "description": "Business structure of the company"
          }
        },
        "type": "object",
        "required": ["legal_name"],
        "description": "A schema contains metadata for an organization"
      },
      "OrganizationSchemaRequest": {
        "properties": {
          "legal_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A legal name of an organization"
          },
          "legal_entity_id": {
            "type": "string",
            "maxLength": 20,
            "description": "A code which identifies uniquely a party of a transaction worldwide"
          },
          "directors_provided": { "type": "boolean" },
          "executives_provided": { "type": "boolean" },
          "owners_provided": { "type": "boolean" },
          "representative_provided": { "type": "boolean" },
          "business_structure": {
            "allOf": [
              { "$ref": "#/components/schemas/EntityBusinessStructure" }
            ],
            "description": "Business structure of the company"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["legal_name"],
        "description": "A schema contains metadata for creating organization"
      },
      "OverdueReminderRequest": {
        "properties": {
          "name": { "type": "string" },
          "term": {
            "allOf": [
              { "$ref": "#/components/schemas/OverdueReminderTermRequest" }
            ],
            "description": "Overdue reminder to send for payment term"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "term"]
      },
      "OverdueReminderResponse": {
        "properties": {
          "name": { "type": "string" },
          "term": {
            "allOf": [
              { "$ref": "#/components/schemas/OverdueReminderTermResponse" }
            ],
            "description": "Overdue reminder to send for payment term"
          },
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the OverdueReminder was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the OverdueReminder was last updated. Timestamps follow the ISO 8601 standard."
          }
        },
        "type": "object",
        "required": ["name", "term", "id", "created_at", "updated_at"]
      },
      "OverdueReminderTermRequest": {
        "properties": {
          "days_after": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 1.0
          },
          "body": { "type": "string" },
          "subject": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["days_after", "body", "subject"]
      },
      "OverdueReminderTermResponse": {
        "properties": {
          "days_after": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 1.0
          },
          "body": { "type": "string" },
          "subject": { "type": "string" }
        },
        "type": "object",
        "required": ["days_after", "body", "subject"]
      },
      "OwnershipDeclaration": {
        "properties": {
          "ip": {
            "type": "string",
            "description": "The IP address from which the beneficial owner attestation was made."
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime in ISO format marking when the beneficial owner attestation was made."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PageSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of the image."
          },
          "mimetype": {
            "type": "string",
            "description": "The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the image.",
            "example": "image/png"
          },
          "size": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Image file size, in bytes.",
            "example": 21972
          },
          "number": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The page number in the PDF document, from 0.",
            "example": 0
          },
          "url": {
            "type": "string",
            "description": "The URL to download the image.",
            "example": "https://bucket.s3.amazonaws.com/123/456.png"
          }
        },
        "type": "object",
        "required": ["id", "mimetype", "size", "number", "url"],
        "description": "When a PDF document is uploaded to Monite, it extracts individual pages from the document\nand saves them as PNG images. This object contains the image and metadata of a single page."
      },
      "PartiallyPaidPayload": {
        "properties": {
          "amount_paid": {
            "type": "integer",
            "minimum": 0.0,
            "description": "How much was paid on the invoice (in minor units)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["amount_paid"]
      },
      "PartnerMetadata": {
        "properties": {
          "metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          }
        },
        "type": "object",
        "required": ["metadata"]
      },
      "PartnerMetadataResponse": {
        "properties": {
          "metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          }
        },
        "type": "object"
      },
      "PartnerProjectSettingsPayload": {
        "type": "object",
        "properties": {
          "accounting": {
            "allOf": [
              { "$ref": "#/components/schemas/AccountingSettingsPayload" }
            ],
            "description": "Settings for the accounting module."
          },
          "api_version": {
            "allOf": [{ "$ref": "#/components/schemas/APIVersion" }],
            "description": "Default API version for partner."
          },
          "commercial_conditions": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Commercial conditions for receivables."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencySettings" }],
            "description": "Custom currency exchange rates."
          },
          "default_role": {
            "type": "object",
            "description": "A default role to provision upon new entity creation."
          },
          "einvoicing": {
            "allOf": [
              { "$ref": "#/components/schemas/EInvoicingSettingsPayload" }
            ],
            "description": "Settings for the e-invoicing module."
          },
          "mail": {
            "allOf": [{ "$ref": "#/components/schemas/MailSettingsPayload" }],
            "description": "Settings for email and mailboxes."
          },
          "payable": {
            "allOf": [
              { "$ref": "#/components/schemas/PayableSettingsPayload" }
            ],
            "description": "Settings for the payables module."
          },
          "payments": {
            "allOf": [
              { "$ref": "#/components/schemas/PaymentsSettingsPayload" }
            ],
            "description": "Settings for the payments module."
          },
          "receivable": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableSettingsPayload" }
            ],
            "description": "Settings for the receivables module."
          },
          "units": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Unit" },
            "description": "Measurement units."
          },
          "website": { "type": "string" }
        },
        "additionalProperties": false
      },
      "PartnerProjectSettingsResponse": {
        "type": "object",
        "properties": {
          "accounting": {
            "allOf": [
              { "$ref": "#/components/schemas/AccountingSettingsResponse" }
            ],
            "description": "Settings for the accounting module."
          },
          "api_version": {
            "allOf": [{ "$ref": "#/components/schemas/APIVersion" }],
            "description": "Default API version for partner."
          },
          "commercial_conditions": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Commercial conditions for receivables."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencySettings" }],
            "description": "Custom currency exchange rates."
          },
          "default_role": {
            "type": "object",
            "description": "A default role to provision upon new entity creation."
          },
          "einvoicing": {
            "allOf": [
              { "$ref": "#/components/schemas/EInvoicingSettingsResponse" }
            ],
            "description": "Settings for the e-invoicing module."
          },
          "mail": {
            "allOf": [{ "$ref": "#/components/schemas/MailSettingsResponse" }],
            "description": "Settings for email and mailboxes."
          },
          "payable": {
            "allOf": [
              { "$ref": "#/components/schemas/PayableSettingsResponse" }
            ],
            "description": "Settings for the payables module."
          },
          "payments": {
            "allOf": [
              { "$ref": "#/components/schemas/PaymentsSettingsResponse" }
            ],
            "description": "Settings for the payments module."
          },
          "receivable": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableSettingsResponse" }
            ],
            "description": "Settings for the receivables module."
          },
          "units": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Unit" },
            "description": "Measurement units."
          },
          "website": { "type": "string" }
        }
      },
      "PatchSettingsPayload": {
        "properties": {
          "currency": { "$ref": "#/components/schemas/CurrencySettings" },
          "reminder": { "$ref": "#/components/schemas/RemindersSettings" },
          "payment_priority": {
            "allOf": [{ "$ref": "#/components/schemas/PaymentPriorityEnum" }],
            "description": "Payment preferences for entity to automate calculating suggested payment date basing on payment terms and entity preferences",
            "default": "working_capital"
          },
          "receivable_edit_flow": {
            "allOf": [{ "$ref": "#/components/schemas/ReceivableEditFlow" }],
            "default": "compliant"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PayableActionEnum": {
        "type": "string",
        "enum": [
          "create",
          "read",
          "update",
          "delete",
          "pay",
          "approve",
          "cancel",
          "submit",
          "create_from_mail",
          "reopen"
        ],
        "description": "An enumeration."
      },
      "PayableActionSchema": {
        "properties": {
          "action_name": {
            "allOf": [{ "$ref": "#/components/schemas/PayableActionEnum" }],
            "description": "Action name",
            "default": "read"
          },
          "permission": {
            "allOf": [{ "$ref": "#/components/schemas/PermissionEnum" }],
            "description": "Permission type",
            "default": "allowed"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PayableCursorFields": {
        "type": "string",
        "enum": ["id", "created_at"],
        "description": "An enumeration."
      },
      "PayableEntityAddressSchema": {
        "properties": {
          "city": {
            "type": "string",
            "maxLength": 255,
            "description": "A city (a full name) where the entity is registered"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "A country name (as ISO code) where the entity is registered ",
            "default": "DE"
          },
          "line1": {
            "type": "string",
            "maxLength": 255,
            "description": "A street where the entity is registered"
          },
          "line2": {
            "type": "string",
            "maxLength": 100,
            "description": "An alternative street used by the entity"
          },
          "postal_code": {
            "type": "string",
            "maxLength": 10,
            "description": "A postal code of the address where the entity is registered"
          },
          "state": {
            "type": "string",
            "description": "A state in a country where the entity is registered"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["city", "line1", "postal_code"],
        "description": "A schema represents address info of the entity"
      },
      "PayableEntityIndividualResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID entity ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "address": {
            "$ref": "#/components/schemas/PayableEntityAddressSchema"
          },
          "email": {
            "type": "string",
            "description": "An official email address of the entity"
          },
          "individual": {
            "allOf": [
              { "$ref": "#/components/schemas/PayableIndividualSchema" }
            ],
            "description": "A set of metadata describing an individual"
          },
          "logo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/entities__v2022_11_16__schemas__file_saver__FileSchema"
              }
            ],
            "description": "A logo image of the entity"
          },
          "phone": {
            "type": "string",
            "maxLength": 100,
            "description": "A phone number of the entity"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/StatusEnum" }],
            "description": "record status, 'active' by default"
          },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "An identification number of the legal entity"
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "address",
          "individual",
          "status"
        ],
        "description": "A base for an entity response schema"
      },
      "PayableEntityOrganizationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID entity ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "address": {
            "$ref": "#/components/schemas/PayableEntityAddressSchema"
          },
          "email": {
            "type": "string",
            "description": "An official email address of the entity"
          },
          "logo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/entities__v2022_11_16__schemas__file_saver__FileSchema"
              }
            ],
            "description": "A logo image of the entity"
          },
          "organization": {
            "allOf": [
              { "$ref": "#/components/schemas/PayableOrganizationSchema" }
            ],
            "description": "A set of metadata describing an organization"
          },
          "phone": {
            "type": "string",
            "maxLength": 100,
            "description": "A phone number of the entity"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/StatusEnum" }],
            "description": "record status, 'active' by default"
          },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "An identification number of the legal entity"
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "address",
          "organization",
          "status"
        ],
        "description": "A base for an entity response schema"
      },
      "PayableIndividualSchema": {
        "properties": {
          "date_of_birth": { "type": "string", "format": "date" },
          "first_name": {
            "type": "string",
            "maxLength": 100,
            "description": "A first name of an individual"
          },
          "id_number": { "type": "string" },
          "last_name": {
            "type": "string",
            "maxLength": 100,
            "description": "A last name of an individual"
          },
          "ssn_last_4": { "type": "string" },
          "title": {
            "type": "string",
            "maxLength": 10,
            "description": "A title of an individual"
          }
        },
        "type": "object",
        "required": ["first_name", "last_name"],
        "description": "A schema contains metadata for an individual"
      },
      "PayableOrganizationSchema": {
        "properties": {
          "business_structure": {
            "allOf": [
              { "$ref": "#/components/schemas/EntityBusinessStructure" }
            ],
            "description": "Business structure of the company"
          },
          "directors_provided": { "type": "boolean" },
          "executives_provided": { "type": "boolean" },
          "legal_entity_id": {
            "type": "string",
            "maxLength": 20,
            "description": "A code which identifies uniquely a party of a transaction worldwide"
          },
          "legal_name": {
            "type": "string",
            "maxLength": 255,
            "description": "A legal name of an organization"
          },
          "owners_provided": { "type": "boolean" },
          "representative_provided": { "type": "boolean" }
        },
        "type": "object",
        "required": ["legal_name"],
        "description": "A schema contains metadata for an organization"
      },
      "PayableOriginEnum": {
        "type": "string",
        "enum": ["upload", "email"],
        "description": "An enumeration."
      },
      "PayablePaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PayableResponseSchema" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of payables."
      },
      "PayableResponseSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID assigned to this payable."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date and time when this payable was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date and time when this payable was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."
          },
          "amount": {
            "type": "integer",
            "description": "The total amount to be paid, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1500
          },
          "amount_due": {
            "type": "integer",
            "description": "How much is left to be paid on the invoice (in minor units).",
            "example": 1000
          },
          "amount_paid": {
            "type": "integer",
            "description": "How much was paid on the invoice (in minor units).",
            "example": 1000
          },
          "amount_to_pay": {
            "type": "integer",
            "description": "How much is left to be paid on the invoice (in minor units) with discounts from payment terms.",
            "example": 1000
          },
          "approval_policy_id": {
            "type": "string",
            "format": "uuid",
            "description": "Id of existing approval policy that applies to this payable, if any. A policy is applied if the payable matches the policy trigger conditions."
          },
          "counterpart": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartRawData" }],
            "description": "Object representing de-normalized counterpart data. Filled at the moment of invoice submitting for approval or payment."
          },
          "counterpart_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart address object stored in counterparts service"
          },
          "counterpart_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart bank account object stored in counterparts service"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the counterpart object that represents the vendor or supplier."
          },
          "counterpart_raw_data": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartRawData" }],
            "description": "Object representing counterpart data which was extracted by OCR. Used for informational purposes."
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart VAT ID object stored in counterparts service"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The [currency code](https://docs.monite.com/docs/currencies) of the currency used in the payable.",
            "example": "EUR"
          },
          "currency_exchange": {
            "$ref": "#/components/schemas/CurrencyExchangeSchema"
          },
          "description": {
            "type": "string",
            "description": "An arbitrary description of this payable."
          },
          "document_id": {
            "type": "string",
            "description": "A unique invoice number assigned by the invoice issuer for payment tracking purposes. This is different from `id` which is an internal ID created automatically by Monite.",
            "example": "DE2287"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "The date by which the payable must be paid, in the YYYY-MM-DD format. If the payable specifies payment terms with early payment discounts, this is the final payment date."
          },
          "entity_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the entity to which the payable was issued."
          },
          "file": {
            "allOf": [
              {
                "$ref": "#/components/schemas/monite__schemas__file_saver__FileSchema"
              }
            ],
            "description": "The original file from which this payable was created."
          },
          "issued_at": {
            "type": "string",
            "format": "date",
            "description": "The date when the payable was issued, in the YYYY-MM-DD format."
          },
          "line_items": {
            "items": { "$ref": "#/components/schemas/LineItemDataResponse" },
            "type": "array",
            "description": "The list of items present in the payable."
          },
          "marked_as_paid_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the entity user who marked this document as paid.",
            "example": "71e8875a-43b3-434f-b12a-54c84c176ef3"
          },
          "marked_as_paid_with_comment": {
            "type": "string",
            "description": "An arbitrary comment that describes how and when this payable was paid.",
            "example": "Was paid partly in the end of the month."
          },
          "ocr_request_id": {
            "type": "string",
            "format": "uuid",
            "description": "Id of OCR request to match asynchronous result of processing payable."
          },
          "other_extracted_data": {
            "anyOf": [
              { "$ref": "#/components/schemas/OcrRecognitionResponse" },
              { "$ref": "#/components/schemas/OCRResponseInvoiceReceiptData" }
            ],
            "description": "Data extracted from the uploaded payable by OCR."
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "payable_origin": {
            "allOf": [{ "$ref": "#/components/schemas/PayableOriginEnum" }],
            "description": "Specifies how this payable was created in Monite: `upload` - created via an API call, `email` - sent via email to the entity's mailbox."
          },
          "payment_terms": {
            "allOf": [
              { "$ref": "#/components/schemas/PaymentTermsCreatePayload" }
            ],
            "description": "The number of days to pay with potential discount for options shorter than due_date"
          },
          "sender": {
            "type": "string",
            "format": "email",
            "description": "The email address from which the invoice was sent to the entity.",
            "example": "hello@example.com"
          },
          "source_of_payable_data": {
            "allOf": [
              { "$ref": "#/components/schemas/SourceOfPayableDataEnum" }
            ],
            "description": "Specifies how the property values of this payable were provided: `ocr` - Monite OCR service extracted the values from the provided PDF or image file, `user_specified` - values were added or updated via an API call."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/PayableStateEnum" }],
            "description": "The [status](https://docs.monite.com/docs/payables-lifecycle) of the payable."
          },
          "subtotal": {
            "type": "integer",
            "description": "The subtotal amount to be paid, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1250
          },
          "suggested_payment_term": {
            "allOf": [{ "$ref": "#/components/schemas/SuggestedPaymentTerm" }],
            "description": "The suggested date and corresponding discount in which payable could be paid. The date is in the YYYY-MM-DD format. The discount is calculated as X * (10^-4) - for example, 100 is 1%, 25 is 0,25%, 10000 is 100 %. Date varies depending on the payment terms and may even be equal to the due date with discount 0."
          },
          "tags": {
            "items": { "$ref": "#/components/schemas/TagReadSchema" },
            "type": "array",
            "description": "A list of user-defined tags (labels) assigned to this payable. Tags can be used to trigger a specific approval policy for this payable."
          },
          "tax": {
            "type": "integer",
            "description": "Registered tax percentage applied for a service price in minor units, e.g. 200 means 2%, 1050 means 10.5%.",
            "example": 2000
          },
          "was_created_by_user_id": { "type": "string", "format": "uuid" }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "entity_id",
          "payable_origin",
          "source_of_payable_data",
          "status"
        ],
        "description": "Represents an Accounts Payable document received from a vendor or supplier."
      },
      "PayableSchema": {
        "properties": {
          "actions": {
            "items": { "$ref": "#/components/schemas/PayableActionSchema" },
            "type": "array",
            "description": "List of actions"
          },
          "object_type": {
            "type": "string",
            "enum": ["payable"],
            "description": "Object type",
            "default": "payable"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PayableSettingsPayload": {
        "required": ["approve_page_url"],
        "type": "object",
        "properties": {
          "allow_cancel_duplicates_automatically": {
            "type": "boolean",
            "default": false
          },
          "allow_counterpart_autocreation": {
            "type": "boolean",
            "default": false
          },
          "allow_counterpart_autolinking": {
            "type": "boolean",
            "default": false
          },
          "approve_page_url": {
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri",
            "example": "https://monite.com"
          },
          "default_state": {
            "type": "string",
            "description": "A state each new payable will have upon creation",
            "example": "new"
          }
        },
        "additionalProperties": false
      },
      "PayableSettingsResponse": {
        "required": ["approve_page_url"],
        "type": "object",
        "properties": {
          "allow_cancel_duplicates_automatically": {
            "type": "boolean",
            "default": false
          },
          "allow_counterpart_autocreation": {
            "type": "boolean",
            "default": false
          },
          "allow_counterpart_autolinking": {
            "type": "boolean",
            "default": false
          },
          "approve_page_url": {
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri",
            "example": "https://monite.com"
          },
          "default_state": {
            "type": "string",
            "description": "A state each new payable will have upon creation",
            "example": "new"
          }
        }
      },
      "PayableStateEnum": {
        "type": "string",
        "enum": [
          "draft",
          "new",
          "approve_in_progress",
          "waiting_to_be_paid",
          "partially_paid",
          "paid",
          "canceled",
          "rejected"
        ],
        "description": "An enumeration."
      },
      "PayableUpdateSchema": {
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The total amount to be paid, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1500
          },
          "counterpart_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart address object stored in counterparts service"
          },
          "counterpart_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart bank account object stored in counterparts service"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the counterpart object that represents the vendor or supplier."
          },
          "counterpart_raw_data": {
            "allOf": [
              { "$ref": "#/components/schemas/CounterpartRawDataUpdateRequest" }
            ],
            "description": "Allows to fix some data in counterpart recognised fields to correct them in order to make autolinking happen."
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart VAT ID object stored in counterparts service"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The [currency code](https://docs.monite.com/docs/currencies) of the currency used in the payable.",
            "example": "EUR"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "An arbitrary description of this payable."
          },
          "document_id": {
            "type": "string",
            "description": "A unique invoice number assigned by the invoice issuer for payment tracking purposes.",
            "example": "DE2287"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "The date by which the payable must be paid, in the YYYY-MM-DD format. If the payable specifies payment terms with early payment discounts, this is the final payment date."
          },
          "issued_at": {
            "type": "string",
            "format": "date",
            "description": "The date when the payable was issued, in the YYYY-MM-DD format."
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "payment_terms": {
            "allOf": [
              { "$ref": "#/components/schemas/PaymentTermsCreatePayload" }
            ],
            "description": "The number of days to pay with potential discount for options shorter than due_date"
          },
          "sender": {
            "type": "string",
            "format": "email",
            "description": "The email address from which the invoice was sent to the entity.",
            "example": "hello@example.com"
          },
          "subtotal": {
            "type": "integer",
            "description": "The subtotal amount to be paid, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1250
          },
          "suggested_payment_term": {
            "allOf": [{ "$ref": "#/components/schemas/SuggestedPaymentTerm" }],
            "description": "The suggested date and corresponding discount in which payable could be paid. The date is in the YYYY-MM-DD format. The discount is calculated as X * (10^-4) - for example, 100 is 1%, 25 is 0,25%, 10000 is 100 %. Date varies depending on the payment terms and may even be equal to the due date with discount 0."
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this payable. Tags can be used to trigger a specific approval policy for this payable."
          },
          "tax": {
            "type": "integer",
            "description": "Registered tax percentage applied for a service price in minor units, e.g. 200 means 2%, 1050 means 10.5%.",
            "example": 1900
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "This schema is used to update the data of an existing payable."
      },
      "PayableUploadWithDataSchema": {
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The total amount to be paid, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1500
          },
          "base64_encoded_file": {
            "type": "string",
            "description": "Base64-encoded contents of the original issued payable. The file is provided for reference purposes as the original source of the data.\n\n Any file formats are allowed. The most common formats are PDF, PNG, JPEG, TIFF."
          },
          "counterpart_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart address object stored in counterparts service"
          },
          "counterpart_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart bank account object stored in counterparts service"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the counterpart object that represents the vendor or supplier."
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart VAT ID object stored in counterparts service"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The [currency code](https://docs.monite.com/docs/currencies) of the currency used in the payable.",
            "example": "EUR"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "An arbitrary description of this payable."
          },
          "document_id": {
            "type": "string",
            "description": "A unique invoice number assigned by the invoice issuer for payment tracking purposes.",
            "example": "DE2287"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "The date by which the payable must be paid, in the YYYY-MM-DD format. If the payable specifies payment terms with early payment discounts, this is the final payment date."
          },
          "file_name": {
            "type": "string",
            "maxLength": 512,
            "description": "The original file name.",
            "example": "invoice.pdf"
          },
          "issued_at": {
            "type": "string",
            "format": "date",
            "description": "The date when the payable was issued, in the YYYY-MM-DD format."
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "payment_terms": {
            "allOf": [
              { "$ref": "#/components/schemas/PaymentTermsCreatePayload" }
            ],
            "description": "The number of days to pay with potential discount for options shorter than due_date"
          },
          "sender": {
            "type": "string",
            "format": "email",
            "description": "The email address from which the invoice was sent to the entity.",
            "example": "hello@example.com"
          },
          "subtotal": {
            "type": "integer",
            "description": "The subtotal amount to be paid, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1250
          },
          "suggested_payment_term": {
            "allOf": [{ "$ref": "#/components/schemas/SuggestedPaymentTerm" }],
            "description": "The suggested date and corresponding discount in which payable could be paid. The date is in the YYYY-MM-DD format. The discount is calculated as X * (10^-4) - for example, 100 is 1%, 25 is 0,25%, 10000 is 100 %. Date varies depending on the payment terms and may even be equal to the due date with discount 0."
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this payable. Tags can be used to trigger a specific approval policy for this payable."
          },
          "tax": {
            "type": "integer",
            "description": "Registered tax percentage applied for a service price in minor units, e.g. 200 means 2%. 1050 means 10.5%.",
            "example": 1900
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "This schema is used to create a new payable by providing its data along with the original file."
      },
      "PaymentAccountObject": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "type": { "$ref": "#/components/schemas/PaymentAccountType" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "PaymentAccountType": {
        "type": "string",
        "enum": ["entity", "counterpart"],
        "description": "An enumeration."
      },
      "PaymentIntent": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "status": { "type": "string" },
          "application_fee_amount": { "type": "integer" },
          "selected_payment_method": { "type": "string" },
          "provider": { "type": "string" },
          "object": { "$ref": "#/components/schemas/PaymentObject" },
          "updated_at": { "type": "string", "format": "date-time" }
        },
        "type": "object",
        "required": ["id", "status", "updated_at"]
      },
      "PaymentIntentAccountType": {
        "type": "string",
        "enum": ["IBAN"],
        "description": "An enumeration."
      },
      "PaymentIntentHistory": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "payment_intent_id": { "type": "string", "format": "uuid" },
          "status": { "type": "string" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "payment_intent_id",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "PaymentIntentHistoryResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PaymentIntentHistory" },
            "type": "array",
            "description": "Payment intent history"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "PaymentIntentResponse": {
        "properties": {
          "payer": { "$ref": "#/components/schemas/AccountResponse" },
          "recipient": {
            "$ref": "#/components/schemas/RecipientAccountResponse"
          },
          "id": { "type": "string", "format": "uuid" },
          "status": { "type": "string" },
          "amount": { "type": "integer" },
          "payment_methods": {
            "items": {
              "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
            },
            "type": "array"
          },
          "selected_payment_method": {
            "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
          },
          "payment_link_id": { "type": "string", "format": "uuid" },
          "batch_payment_id": { "type": "string", "format": "uuid" },
          "currency": { "type": "string" },
          "payment_reference": { "type": "string" },
          "provider": { "type": "string" },
          "application_fee_amount": { "type": "integer" },
          "invoice": { "$ref": "#/components/schemas/Invoice" },
          "object": { "$ref": "#/components/schemas/PaymentObject" },
          "updated_at": { "type": "string", "format": "date-time" }
        },
        "type": "object",
        "required": [
          "recipient",
          "id",
          "status",
          "amount",
          "payment_methods",
          "currency",
          "updated_at"
        ]
      },
      "PaymentIntentWithSecrets": {
        "properties": {
          "payer": { "$ref": "#/components/schemas/AccountResponse" },
          "recipient": {
            "$ref": "#/components/schemas/RecipientAccountResponse"
          },
          "id": { "type": "string", "format": "uuid" },
          "status": { "type": "string" },
          "amount": { "type": "integer" },
          "payment_methods": {
            "items": {
              "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
            },
            "type": "array"
          },
          "selected_payment_method": {
            "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
          },
          "payment_link_id": { "type": "string", "format": "uuid" },
          "batch_payment_id": { "type": "string", "format": "uuid" },
          "currency": { "type": "string" },
          "payment_reference": { "type": "string" },
          "provider": { "type": "string" },
          "application_fee_amount": { "type": "integer" },
          "invoice": { "$ref": "#/components/schemas/Invoice" },
          "object": { "$ref": "#/components/schemas/PaymentObject" },
          "updated_at": { "type": "string", "format": "date-time" },
          "key": { "$ref": "#/components/schemas/Stripe" },
          "confirm_on_backend": { "type": "boolean", "default": true }
        },
        "type": "object",
        "required": [
          "recipient",
          "id",
          "status",
          "amount",
          "payment_methods",
          "currency",
          "updated_at"
        ]
      },
      "PaymentIntentsRecipient": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "type": { "type": "string", "enum": ["counterpart"] },
          "bank_account_id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type", "bank_account_id"]
      },
      "PaymentMethod": {
        "properties": {
          "name": { "$ref": "#/components/schemas/MoniteAllPaymentMethods" },
          "type": {
            "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
          },
          "status": { "$ref": "#/components/schemas/PaymentMethodStatus" },
          "direction": { "$ref": "#/components/schemas/PaymentMethodDirection" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "type", "status", "direction"]
      },
      "PaymentMethodDirection": {
        "type": "string",
        "enum": ["receive", "send"],
        "description": "An enumeration."
      },
      "PaymentMethodStatus": {
        "type": "string",
        "enum": ["active", "inactive"],
        "description": "An enumeration."
      },
      "PaymentMethodsConfirmPaymentPayload": {
        "properties": { "payment_method_id": { "type": "string" } },
        "additionalProperties": false,
        "type": "object",
        "required": ["payment_method_id"]
      },
      "PaymentMethodsConfirmResponse": {
        "properties": {
          "client_secret": { "type": "string" },
          "is_next_action_needed": { "type": "boolean" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["client_secret", "is_next_action_needed"]
      },
      "PaymentObject": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "type": { "$ref": "#/components/schemas/PaymentObjectType" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "PaymentObjectPayable": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "type": { "type": "string", "enum": ["payable"] }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "PaymentObjectType": {
        "type": "string",
        "enum": ["payable", "receivable"],
        "description": "An enumeration."
      },
      "PaymentPageThemePayload": {
        "type": "object",
        "properties": {
          "background_color": { "type": "string", "format": "color" },
          "border_radius": { "type": "string" },
          "button": { "$ref": "#/components/schemas/ButtonThemePayload" },
          "card": { "$ref": "#/components/schemas/CardThemePayload" },
          "font_color": { "type": "string", "format": "color" },
          "font_family": { "type": "string" },
          "font_link_href": {
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "logo_src": {
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "PaymentPageThemeResponse": {
        "type": "object",
        "properties": {
          "background_color": { "type": "string", "format": "color" },
          "border_radius": { "type": "string" },
          "button": { "$ref": "#/components/schemas/ButtonThemeResponse" },
          "card": { "$ref": "#/components/schemas/CardThemeResponse" },
          "font_color": { "type": "string", "format": "color" },
          "font_family": { "type": "string" },
          "font_link_href": {
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "logo_src": {
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        }
      },
      "PaymentPriorityEnum": {
        "type": "string",
        "enum": ["working_capital", "balanced", "bottom_line"],
        "description": "An enumeration."
      },
      "PaymentRecordCursorFields": {
        "type": "string",
        "enum": ["paid_at", "amount", "overpaid_amount"],
        "description": "An enumeration."
      },
      "PaymentRecordObjectRequest": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the invoice"
          },
          "type": { "$ref": "#/components/schemas/ObjectTypeEnum" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "PaymentRecordObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the invoice"
          },
          "new_status": {
            "type": "string",
            "description": "Status, in which object has been moved"
          },
          "old_status": {
            "type": "string",
            "description": "Status, in which object was before payment"
          },
          "type": { "$ref": "#/components/schemas/ObjectTypeEnum" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "new_status", "old_status", "type"]
      },
      "PaymentRecordRequest": {
        "properties": {
          "amount": { "type": "integer", "exclusiveMinimum": true },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "entity_user_id": { "type": "string", "format": "uuid" },
          "object": {
            "$ref": "#/components/schemas/PaymentRecordObjectRequest"
          },
          "paid_at": { "type": "string", "format": "date-time" },
          "payment_intent_id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "amount",
          "currency",
          "object",
          "paid_at",
          "payment_intent_id"
        ]
      },
      "PaymentRecordResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "amount": { "type": "integer", "exclusiveMinimum": true },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "entity_user_id": { "type": "string", "format": "uuid" },
          "is_external": { "type": "boolean" },
          "object": {
            "$ref": "#/components/schemas/PaymentRecordObjectResponse"
          },
          "overpaid_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Filled in a case, if payment amount is more, than total_amount",
            "default": 0
          },
          "paid_at": { "type": "string", "format": "date-time" },
          "payment_intent_id": { "type": "string", "format": "uuid" }
        },
        "type": "object",
        "required": [
          "id",
          "amount",
          "currency",
          "is_external",
          "object",
          "paid_at",
          "payment_intent_id"
        ]
      },
      "PaymentRecordResponseList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PaymentRecordResponse" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "PaymentReminder": {
        "properties": {
          "name": { "type": "string" },
          "term_1_reminder": {
            "allOf": [{ "$ref": "#/components/schemas/Reminder" }],
            "description": "Reminder to send for first payment term"
          },
          "term_2_reminder": {
            "allOf": [{ "$ref": "#/components/schemas/Reminder" }],
            "description": "Reminder to send for second payment term"
          },
          "term_final_reminder": {
            "allOf": [{ "$ref": "#/components/schemas/Reminder" }],
            "description": "Reminder to send for final payment term"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name"]
      },
      "PaymentReminderResponse": {
        "properties": {
          "name": { "type": "string" },
          "term_1_reminder": {
            "allOf": [{ "$ref": "#/components/schemas/Reminder" }],
            "description": "Reminder to send for first payment term"
          },
          "term_2_reminder": {
            "allOf": [{ "$ref": "#/components/schemas/Reminder" }],
            "description": "Reminder to send for second payment term"
          },
          "term_final_reminder": {
            "allOf": [{ "$ref": "#/components/schemas/Reminder" }],
            "description": "Reminder to send for final payment term"
          },
          "id": { "type": "string", "format": "uuid" },
          "entity_id": { "type": "string", "format": "uuid" },
          "status": { "$ref": "#/components/schemas/StatusEnum" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the PaymentReminder was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the PaymentReminder was last updated. Timestamps follow the ISO 8601 standard."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "id",
          "entity_id",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "PaymentRequirements": {
        "properties": {
          "currently_due": { "items": { "type": "string" }, "type": "array" },
          "eventually_due": { "items": { "type": "string" }, "type": "array" },
          "current_deadline": { "type": "string", "format": "date-time" },
          "pending_verification": {
            "items": { "type": "string" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["currently_due", "eventually_due", "pending_verification"]
      },
      "PaymentTerm": {
        "properties": {
          "number_of_days": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of days after the invoice issue date."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["number_of_days"]
      },
      "PaymentTermDiscount": {
        "properties": {
          "number_of_days": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of days after the invoice issue date."
          },
          "discount": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The discount percentage in minor units. E.g., 200 means 2%. 1050 means 10.5%."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["number_of_days", "discount"]
      },
      "PaymentTermDiscountWithDate": {
        "properties": {
          "number_of_days": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of days after the invoice issue date."
          },
          "discount": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The discount percentage in minor units. E.g., 200 means 2%. 1050 means 10.5%."
          },
          "end_date": { "type": "string", "format": "date" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["number_of_days", "discount"]
      },
      "PaymentTerms": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "name": { "type": "string" },
          "term_final": { "$ref": "#/components/schemas/TermFinalWithDate" },
          "term_1": {
            "$ref": "#/components/schemas/PaymentTermDiscountWithDate"
          },
          "term_2": {
            "$ref": "#/components/schemas/PaymentTermDiscountWithDate"
          }
        },
        "type": "object",
        "required": ["id", "term_final"]
      },
      "PaymentTermsCreatePayload": {
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "term_final": { "$ref": "#/components/schemas/PaymentTerm" },
          "term_1": { "$ref": "#/components/schemas/PaymentTermDiscount" },
          "term_2": { "$ref": "#/components/schemas/PaymentTermDiscount" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "term_final"]
      },
      "PaymentTermsListResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PaymentTermsResponse" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PaymentTermsResponse": {
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "term_final": { "$ref": "#/components/schemas/PaymentTerm" },
          "term_1": { "$ref": "#/components/schemas/PaymentTermDiscount" },
          "term_2": { "$ref": "#/components/schemas/PaymentTermDiscount" },
          "id": { "type": "string", "format": "uuid" }
        },
        "type": "object",
        "required": ["name", "term_final", "id"]
      },
      "PaymentTermsUpdatePayload": {
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "term_final": { "$ref": "#/components/schemas/PaymentTerm" },
          "term_1": { "$ref": "#/components/schemas/PaymentTermDiscount" },
          "term_2": { "$ref": "#/components/schemas/PaymentTermDiscount" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PaymentsBatchPaymentRequest": {
        "properties": {
          "payment_method": { "type": "string", "enum": ["us_ach"] },
          "payer_bank_account_id": { "type": "string", "format": "uuid" },
          "payment_intents": {
            "items": { "$ref": "#/components/schemas/SinglePaymentIntent" },
            "type": "array",
            "minItems": 1
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "payment_method",
          "payer_bank_account_id",
          "payment_intents"
        ]
      },
      "PaymentsBatchPaymentResponse": {
        "properties": {
          "payment_method": { "type": "string", "enum": ["us_ach"] },
          "payer_bank_account_id": { "type": "string", "format": "uuid" },
          "payment_intents": {
            "items": {
              "$ref": "#/components/schemas/SinglePaymentIntentResponse"
            },
            "type": "array",
            "minItems": 1
          },
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "status": {
            "$ref": "#/components/schemas/PaymentsBatchPaymentStatus"
          },
          "total_amount": { "type": "integer" },
          "error": { "type": "object" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "payment_method",
          "payer_bank_account_id",
          "payment_intents",
          "id",
          "created_at",
          "status"
        ]
      },
      "PaymentsBatchPaymentStatus": {
        "type": "string",
        "enum": [
          "created",
          "processing",
          "partially_successful",
          "succeeded",
          "failed"
        ],
        "description": "An enumeration."
      },
      "PaymentsSettingsPayload": {
        "type": "object",
        "properties": {
          "payment_page_domain": { "type": "string" },
          "payment_page_theme": {
            "$ref": "#/components/schemas/PaymentPageThemePayload"
          }
        },
        "additionalProperties": false
      },
      "PaymentsSettingsResponse": {
        "type": "object",
        "properties": {
          "payment_page_domain": { "type": "string" },
          "payment_page_theme": {
            "$ref": "#/components/schemas/PaymentPageThemeResponse"
          }
        }
      },
      "PermissionEnum": {
        "type": "string",
        "enum": ["allowed", "allowed_for_own", "not_allowed"],
        "description": "An enumeration."
      },
      "PersonAddress": {
        "properties": {
          "country": {
            "type": "string",
            "description": "Two-letter country code (ISO 3166-1 alpha-2)"
          },
          "line1": {
            "type": "string",
            "description": "Address line 1 (e.g., street, PO Box, or company name)"
          },
          "line2": {
            "type": "string",
            "description": "Address line 2 (e.g., apartment, suite, unit, or building)"
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code"
          },
          "city": {
            "type": "string",
            "description": "City, district, suburb, town, or village"
          },
          "state": {
            "type": "string",
            "description": "State, county, province, or region"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["country", "line1", "postal_code", "city"]
      },
      "PersonOnboardingDocuments": {
        "properties": {
          "verification_document_front": {
            "type": "string",
            "format": "binary"
          },
          "verification_document_back": {
            "type": "string",
            "format": "binary"
          },
          "additional_verification_document_front": {
            "type": "string",
            "format": "binary"
          },
          "additional_verification_document_back": {
            "type": "string",
            "format": "binary"
          }
        },
        "type": "object"
      },
      "PersonRelationship": {
        "properties": {
          "title": {
            "type": "string",
            "description": "The person's title (e.g., CEO, Support Engineer)"
          },
          "representative": {
            "type": "boolean",
            "description": "Whether the person is authorized as the primary representative of the account",
            "default": false
          },
          "executive": {
            "type": "boolean",
            "description": "Whether the person has significant responsibility to control, manage, or direct the organization",
            "default": false
          },
          "director": {
            "type": "boolean",
            "description": "Whether the person is a director of the account's legal entity",
            "default": false
          },
          "owner": {
            "type": "boolean",
            "description": "Whether the person is an owner of the account's legal entity",
            "default": false
          },
          "percent_ownership": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "description": "The percent owned by the person of the account's legal entity"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PersonRequest": {
        "properties": {
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/PersonAddress" }],
            "description": "The person's address"
          },
          "date_of_birth": {
            "type": "string",
            "format": "date",
            "description": "The person's date of birth"
          },
          "first_name": {
            "type": "string",
            "description": "The person's first name"
          },
          "last_name": {
            "type": "string",
            "description": "The person's last name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The person's email address"
          },
          "phone": {
            "type": "string",
            "description": "The person's phone number"
          },
          "relationship": {
            "allOf": [{ "$ref": "#/components/schemas/PersonRelationship" }],
            "description": "Describes the person's relationship to the entity"
          },
          "id_number": {
            "type": "string",
            "description": "The person's ID number, as appropriate for their country"
          },
          "ssn_last_4": {
            "type": "string",
            "description": "The last four digits of the person's Social Security number"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["first_name", "last_name", "email", "relationship"]
      },
      "PersonResponse": {
        "properties": {
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/PersonAddress" }],
            "description": "The person's address"
          },
          "date_of_birth": {
            "type": "string",
            "format": "date",
            "description": "The person's date of birth"
          },
          "first_name": {
            "type": "string",
            "description": "The person's first name"
          },
          "last_name": {
            "type": "string",
            "description": "The person's last name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The person's email address"
          },
          "phone": {
            "type": "string",
            "description": "The person's phone number"
          },
          "relationship": {
            "allOf": [{ "$ref": "#/components/schemas/PersonRelationship" }],
            "description": "Describes the person's relationship to the entity"
          },
          "id_number": {
            "type": "string",
            "description": "The person's ID number, as appropriate for their country"
          },
          "ssn_last_4": {
            "type": "string",
            "description": "The last four digits of the person's Social Security number"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The person's unique identifier"
          },
          "entity_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity user ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the person was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the person was updated"
          }
        },
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email",
          "relationship",
          "id",
          "entity_id",
          "created_at",
          "updated_at"
        ]
      },
      "PersonsResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PersonResponse" },
            "type": "array",
            "description": "array of records"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "PhoneNumberVerificationCheckPayload": {
        "properties": {
          "phone": {
            "type": "string",
            "description": "The phone number of person attached to onboarding link"
          },
          "code": {
            "type": "string",
            "description": "Verification code received on phone number"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["code"]
      },
      "Platform": {
        "enum": ["Xero", "QuickBooks Online", "QuickBooks Online Sandbox"],
        "type": "string",
        "description": "An enumeration."
      },
      "PortalUserProfileResponseWithOptionalRole": {
        "required": ["id", "company", "email", "fullname", "status"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "avatar": { "$ref": "#/components/schemas/FileSchema" },
          "company": { "$ref": "#/components/schemas/CompanyResponse" },
          "email": { "type": "string", "format": "email" },
          "fullname": { "type": "string" },
          "role_id": { "type": "string", "format": "uuid" },
          "status": { "$ref": "#/components/schemas/PortalUserStatus" }
        }
      },
      "PortalUserStatus": {
        "enum": ["sent_confirmation", "active", "deleted"],
        "type": "string",
        "description": "An enumeration."
      },
      "PreviewSchema": {
        "properties": {
          "url": {
            "type": "string",
            "description": "The image URL.",
            "example": "https://bucketname.s3.amazonaws.com/1/2/3.png"
          },
          "width": {
            "type": "integer",
            "description": "The image width in pixels.",
            "example": 200
          },
          "height": {
            "type": "integer",
            "description": "The image height in pixels.",
            "example": 400
          }
        },
        "type": "object",
        "required": ["url", "width", "height"],
        "description": "A preview image generated for a file."
      },
      "Price": {
        "properties": {
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency in which the price of the product is set."
          },
          "value": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The actual price of the product."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["currency", "value"]
      },
      "ProcessResource": {
        "required": ["id", "status", "input", "metadata", "created_at"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/ProcessStatusEnum" }],
            "description": "Tthe current status of the approval policy process."
          },
          "input": {
            "type": "object",
            "description": "The input for the script."
          },
          "error": {
            "type": "object",
            "description": "The error for the process."
          },
          "script_snapshot": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "number" },
              { "type": "string" },
              { "type": "array", "items": {} },
              { "type": "object" }
            ],
            "description": "The script snapshot taken when script started."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata for the process."
          },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "created_by": { "type": "string", "format": "uuid" },
          "updated_by": { "type": "string", "format": "uuid" }
        }
      },
      "ProcessStatusEnum": {
        "enum": [
          "succeeded",
          "waiting",
          "failed",
          "running",
          "canceled",
          "timed_out"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ProductCursorFields": {
        "type": "string",
        "enum": ["name"],
        "description": "An enumeration."
      },
      "ProductServicePaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ProductServiceResponse" },
            "type": "array"
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of products and services"
      },
      "ProductServiceRequest": {
        "properties": {
          "name": { "type": "string", "description": "Name of the product." },
          "type": {
            "allOf": [
              { "$ref": "#/components/schemas/ProductServiceTypeEnum" }
            ],
            "description": "Specifies whether this offering is a product or service. This may affect the applicable tax rates.",
            "default": "product"
          },
          "description": {
            "type": "string",
            "description": "Description of the product."
          },
          "price": { "$ref": "#/components/schemas/Price" },
          "measure_unit_id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms)."
          },
          "smallest_amount": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The smallest amount allowed for this product."
          },
          "ledger_account_id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "measure_unit_id"]
      },
      "ProductServiceResponse": {
        "properties": {
          "name": { "type": "string", "description": "Name of the product." },
          "type": {
            "allOf": [
              { "$ref": "#/components/schemas/ProductServiceTypeEnum" }
            ],
            "description": "Specifies whether this offering is a product or service. This may affect the applicable tax rates.",
            "default": "product"
          },
          "description": {
            "type": "string",
            "description": "Description of the product."
          },
          "price": { "$ref": "#/components/schemas/Price" },
          "measure_unit_id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms)."
          },
          "smallest_amount": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The smallest amount allowed for this product."
          },
          "ledger_account_id": { "type": "string", "format": "uuid" },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the product."
          },
          "entity_id": { "type": "string", "format": "uuid" },
          "entity_user_id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the product was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the product was last updated. Timestamps follow the ISO 8601 standard."
          }
        },
        "type": "object",
        "required": [
          "name",
          "measure_unit_id",
          "id",
          "entity_id",
          "created_at",
          "updated_at"
        ]
      },
      "ProductServiceTypeEnum": {
        "type": "string",
        "enum": ["product", "service"],
        "description": "An enumeration."
      },
      "ProductServiceUpdate": {
        "properties": {
          "name": { "type": "string", "description": "Name of the product." },
          "type": {
            "allOf": [
              { "$ref": "#/components/schemas/ProductServiceTypeEnum" }
            ],
            "description": "Specifies whether this offering is a product or service. This may affect the applicable tax rates."
          },
          "description": {
            "type": "string",
            "description": "Description of the product."
          },
          "price": { "$ref": "#/components/schemas/Price" },
          "measure_unit_id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms)."
          },
          "smallest_amount": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The smallest amount allowed for this product."
          },
          "ledger_account_id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ProfileAvatarFileUpload": {
        "required": ["file"],
        "type": "object",
        "properties": { "file": { "type": "string", "format": "binary" } }
      },
      "ProfileAvatarUpdateResponse": {
        "required": ["avatar"],
        "type": "object",
        "properties": {
          "avatar": { "$ref": "#/components/schemas/FileSchema" }
        }
      },
      "ProjectResponse": {
        "required": ["id", "company", "created_by_user_id", "features", "name"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "company": { "$ref": "#/components/schemas/CompanyResponse" },
          "created_by_user_id": { "type": "string", "format": "uuid" },
          "description": { "minLength": 1, "type": "string" },
          "environment": {
            "allOf": [{ "$ref": "#/components/schemas/EnvironmentEnum" }],
            "default": "EU sandbox"
          },
          "features": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FeaturesResponse" }
          },
          "name": { "maxLength": 100, "minLength": 1, "type": "string" },
          "region": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountriesNames" }],
            "default": "Germany"
          }
        }
      },
      "ProjectUpdateRequest": {
        "type": "object",
        "properties": {
          "description": { "minLength": 1, "type": "string" },
          "environment": { "$ref": "#/components/schemas/EnvironmentEnum" },
          "features": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          },
          "name": { "maxLength": 100, "minLength": 1, "type": "string" },
          "project_settings": {
            "$ref": "#/components/schemas/ProjectsSettingsRequest"
          },
          "region": { "$ref": "#/components/schemas/AllowedCountriesNames" }
        },
        "additionalProperties": false
      },
      "ProjectsRequest": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "description": { "minLength": 1, "type": "string" },
          "environment": {
            "allOf": [{ "$ref": "#/components/schemas/EnvironmentEnum" }],
            "default": "EU sandbox"
          },
          "name": { "maxLength": 100, "minLength": 1, "type": "string" },
          "region": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountriesNames" }],
            "default": "Germany"
          }
        },
        "additionalProperties": false
      },
      "ProjectsSettingsRequest": {
        "required": ["currency"],
        "type": "object",
        "properties": {
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "units": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Unit" }
          }
        },
        "additionalProperties": false
      },
      "ProjectsSettingsResponse": {
        "required": ["project_id"],
        "type": "object",
        "properties": {
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "project_id": { "type": "string", "format": "uuid" },
          "units": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Unit" }
          }
        }
      },
      "Provider": {
        "type": "string",
        "enum": ["stripe", "airwallex", "airwallex_component"],
        "description": "An enumeration."
      },
      "PublicPaymentLinkResponse": {
        "properties": {
          "payer": { "$ref": "#/components/schemas/AccountResponse" },
          "recipient": {
            "$ref": "#/components/schemas/RecipientAccountResponse"
          },
          "id": { "type": "string", "format": "uuid" },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "status": { "type": "string" },
          "payment_reference": { "type": "string" },
          "amount": { "type": "integer" },
          "payment_methods": { "items": { "type": "string" }, "type": "array" },
          "return_url": { "type": "string" },
          "invoice": { "$ref": "#/components/schemas/Invoice" },
          "expires_at": { "type": "string", "format": "date-time" },
          "payment_intent_id": { "type": "string", "format": "uuid" },
          "payment_page_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          },
          "payment_intent": { "$ref": "#/components/schemas/PaymentIntent" }
        },
        "type": "object",
        "required": [
          "recipient",
          "id",
          "currency",
          "status",
          "amount",
          "payment_methods",
          "expires_at",
          "payment_intent_id",
          "payment_page_url"
        ]
      },
      "PurchaseOrderCounterpartIndividualResponse": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The person's email address.",
            "example": "asingh@example.net"
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's first name.",
            "example": "Adnan"
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's last name.",
            "example": "Singh"
          },
          "phone": {
            "type": "string",
            "description": "The person's phone number.",
            "example": "5553211234"
          },
          "title": {
            "type": "string",
            "description": "The person's title or honorific. Examples: Mr., Ms., Dr., Prof.",
            "example": "Mr."
          }
        },
        "type": "object",
        "required": ["first_name", "is_customer", "is_vendor", "last_name"],
        "description": "Represents counterparts that are individuals (natural persons)."
      },
      "PurchaseOrderCounterpartIndividualRootResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "created_automatically": {
            "type": "boolean",
            "description": "`true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.",
            "default": false
          },
          "default_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the billing address."
          },
          "default_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipping address."
          },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity user ID of counterpart creator."
          },
          "individual": {
            "$ref": "#/components/schemas/PurchaseOrderCounterpartIndividualResponse"
          },
          "reminders_enabled": { "type": "boolean" },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "An identification number of the counterpart"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartType" }],
            "description": "The counterpart type: `organization` (juridical person) or `individual` (natural person)."
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "individual", "type"],
        "description": "Represents counterparts that are individuals (natural persons)."
      },
      "PurchaseOrderCounterpartOrganizationResponse": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the organization",
            "example": "acme@example.com"
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "legal_name": {
            "type": "string",
            "description": "The legal name of the organization.",
            "example": "Acme Inc."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the organization",
            "example": "5551231234"
          }
        },
        "type": "object",
        "required": ["is_customer", "is_vendor", "legal_name"],
        "description": "Represents counterparts that are organizations (juridical persons)."
      },
      "PurchaseOrderCounterpartOrganizationRootResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "created_automatically": {
            "type": "boolean",
            "description": "`true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.",
            "default": false
          },
          "default_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the billing address."
          },
          "default_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipping address."
          },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity user ID of counterpart creator."
          },
          "organization": {
            "$ref": "#/components/schemas/PurchaseOrderCounterpartOrganizationResponse"
          },
          "reminders_enabled": { "type": "boolean" },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "An identification number of the counterpart"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartType" }],
            "description": "The counterpart type: `organization` (juridical person) or `individual` (natural person)."
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "organization", "type"],
        "description": "Represents counterparts that are organizations (juridical persons)."
      },
      "PurchaseOrderCounterpartSchema": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/PurchaseOrderCounterpartIndividualRootResponse"
          },
          {
            "$ref": "#/components/schemas/PurchaseOrderCounterpartOrganizationRootResponse"
          }
        ],
        "description": "A Counterpart object contains information about an organization (juridical person) or\nindividual (natural person) that provides goods and services to or buys them from an\n[SME](https://docs.monite.com/docs/glossary#sme)."
      },
      "PurchaseOrderCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"],
        "description": "An enumeration."
      },
      "PurchaseOrderEmailPreviewRequest": {
        "properties": {
          "body_text": { "type": "string" },
          "subject_text": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["body_text", "subject_text"],
        "description": "A schema for request for preview of purchase order email"
      },
      "PurchaseOrderEmailPreviewResponse": {
        "properties": {
          "body_preview": { "type": "string" },
          "subject_preview": { "type": "string" }
        },
        "type": "object",
        "required": ["body_preview", "subject_preview"],
        "description": "A schema for returning a response for email preview"
      },
      "PurchaseOrderEmailSentResponse": {
        "properties": { "mail_id": { "type": "string", "format": "uuid" } },
        "type": "object",
        "required": ["mail_id"],
        "description": "A schema for returning a response an email with a link to purchase order document has been sent"
      },
      "PurchaseOrderItem": {
        "properties": {
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency in which the price of the product is set."
          },
          "name": {
            "type": "string",
            "description": "The name of the product to purchase"
          },
          "price": {
            "type": "integer",
            "description": "The subtotal cost (excluding VAT), in [minor units](https://docs.monite.com/docs/currencies#minor-units)."
          },
          "quantity": {
            "type": "integer",
            "description": "Number (quantity) of products"
          },
          "unit": {
            "type": "string",
            "description": "Units (hours, meters, unit)"
          },
          "vat_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "currency",
          "name",
          "price",
          "quantity",
          "unit",
          "vat_rate"
        ]
      },
      "PurchaseOrderPaginationResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderResponseSchema"
            },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of purchase orders."
      },
      "PurchaseOrderPayloadSchema": {
        "properties": {
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart unique ID."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency in which the price of the product is set. (all items need to have the same currency)"
          },
          "entity_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity VAT ID identifier that applied to purchase order"
          },
          "items": {
            "items": { "$ref": "#/components/schemas/PurchaseOrderItem" },
            "type": "array",
            "description": "List of item to purchase"
          },
          "message": {
            "type": "string",
            "description": "Msg which will be send to counterpart for who the purchase order is issued."
          },
          "valid_for_days": {
            "type": "integer",
            "exclusiveMinimum": true,
            "description": "Number of days for which purchase order is valid"
          }
        },
        "type": "object",
        "required": [
          "counterpart_id",
          "currency",
          "entity_vat_id_id",
          "items",
          "message",
          "valid_for_days"
        ],
        "description": "Represents an Accounts Purchase Order document created by entity."
      },
      "PurchaseOrderResponseSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID assigned to this purchase order."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard."
          },
          "counterpart": {
            "allOf": [
              { "$ref": "#/components/schemas/PurchaseOrderCounterpartSchema" }
            ],
            "description": "Counterpart information about an organization (juridical person) or individual (natural person) that provides goods and services to or buys them from an"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart unique ID."
          },
          "created_by_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the creator of the purchase order"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency in which the price of the product is set. (all items need to have the same currency)"
          },
          "document_id": { "type": "string" },
          "entity": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PayableEntityIndividualResponse"
              },
              {
                "$ref": "#/components/schemas/PayableEntityOrganizationResponse"
              }
            ],
            "description": "Data of the entity (address, name, contact)"
          },
          "entity_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the entity which issued the purchase order."
          },
          "entity_vat_id": {
            "$ref": "#/components/schemas/PurchaseOrderVatId"
          },
          "file_id": { "type": "string", "format": "uuid" },
          "file_url": { "type": "string" },
          "issued_at": {
            "type": "string",
            "format": "date",
            "description": "When status changed from 'draft' to 'send', so after sending purchase order"
          },
          "items": {
            "items": { "$ref": "#/components/schemas/PurchaseOrderItem" },
            "type": "array",
            "description": "List of item to purchase"
          },
          "message": {
            "type": "string",
            "description": "Msg which will be send to counterpart for who the purchase order is issued."
          },
          "status": {
            "type": "string",
            "description": "Purchase order can be in 'draft' state before sending it to counterpart. After that state is 'issued'"
          },
          "valid_for_days": {
            "type": "integer",
            "exclusiveMinimum": true,
            "description": "Number of days for which purchase order is valid"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "counterpart",
          "counterpart_id",
          "currency",
          "document_id",
          "entity",
          "entity_id",
          "items",
          "message",
          "status",
          "valid_for_days"
        ],
        "description": "Represents response for an Accounts Purchase Order document created by entity."
      },
      "PurchaseOrderStatusEnum": {
        "type": "string",
        "enum": ["draft", "issued"],
        "description": "An enumeration."
      },
      "PurchaseOrderVatId": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "country": { "type": "string" },
          "entity_id": { "type": "string", "format": "uuid" },
          "type": { "type": "string" },
          "value": { "type": "string" }
        },
        "type": "object",
        "required": ["id", "country", "entity_id", "type", "value"]
      },
      "QuoteResponsePayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": ["quote"],
            "description": "The type of the document uploaded."
          },
          "expiry_date": {
            "type": "string",
            "format": "date",
            "description": "The date (in ISO 8601 format) until which the quote is valid."
          },
          "quote_accept_page_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "description": "Link for custom quote accept page"
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard."
          },
          "document_id": {
            "type": "string",
            "description": "The sequential code systematically assigned to invoices."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency used in the receivable."
          },
          "subtotal": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The subtotal (excluding VAT), in [minor units](https://docs.monite.com/docs/currencies#minor-units)."
          },
          "line_items": {
            "items": { "$ref": "#/components/schemas/ResponseItem" },
            "type": "array"
          },
          "entity_address": {
            "$ref": "#/components/schemas/EntityAddressSchema"
          },
          "entity": {
            "anyOf": [
              { "$ref": "#/components/schemas/ReceivablesEntityOrganization" },
              { "$ref": "#/components/schemas/ReceivablesEntityIndividual" }
            ]
          },
          "entity_vat_id": {
            "$ref": "#/components/schemas/EntityVatIDResponse"
          },
          "counterpart_vat_id": {
            "$ref": "#/components/schemas/CounterpartVatIDResponse"
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The entity user who created this document."
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "counterpart_tax_id": {
            "type": "string",
            "description": "The VAT/TAX ID of the counterpart."
          },
          "counterpart_type": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartType" }],
            "description": "The type of the counterpart."
          },
          "counterpart_address": {
            "$ref": "#/components/schemas/CounterpartAddress"
          },
          "counterpart_contact": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableCounterpartContact" }
            ],
            "description": "Additional information about counterpart contacts."
          },
          "counterpart_name": {
            "type": "string",
            "description": "A legal name of a counterpart it is an organization"
          },
          "file_url": { "type": "string" },
          "file": { "$ref": "#/components/schemas/FileSchema" },
          "commercial_condition_description": {
            "type": "string",
            "description": "The commercial terms of the receivable (e.g. The products must be delivered in X days)."
          },
          "total_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total price of the receivable in [minor units](https://docs.monite.com/docs/currencies#minor-units). Calculated as a subtotal + total_vat_amount.",
            "default": 0
          },
          "total_vat_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The total VAT of all line items, in [minor units](https://docs.monite.com/docs/currencies#minor-units)."
          },
          "entity_bank_account": {
            "$ref": "#/components/schemas/EntityBankAccount"
          },
          "vat_exempt": {
            "type": "boolean",
            "description": "Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not."
          },
          "vat_exemption_rationale": {
            "type": "string",
            "description": "The reason for the VAT exemption, if applicable."
          },
          "based_on": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID of a previous document related to the receivable if applicable."
          },
          "based_on_document_id": {
            "type": "string",
            "description": "The unique document ID of a previous document related to the receivable if applicable."
          },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable."
          },
          "issue_date": {
            "type": "string",
            "format": "date-time",
            "description": "Optional field for the issue of the entry."
          },
          "counterpart_shipping_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "Address where goods were shipped / where services were provided."
          },
          "counterpart_billing_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "counterpart_business_type": {
            "type": "string",
            "maxLength": 50,
            "description": "Different types of companies for different countries, ex. GmbH, SAS, SNC, etc."
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount" }],
            "description": "The discount for a receivable."
          },
          "discounted_subtotal": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/docs/currencies#minor-units)."
          },
          "total_vat_amounts": {
            "items": { "$ref": "#/components/schemas/TotalVatAmountItem" },
            "type": "array",
            "description": "List of total vat amount for each VAT, presented in receivable"
          },
          "withholding_tax_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of tax withheld in percent minor units"
          },
          "total_withholding_tax": {
            "type": "integer",
            "description": "Total price of the receivable with tax withheld in minor units"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "Optional field representing date until which invoice should be paid"
          },
          "comment": {
            "type": "string",
            "description": "Field with a comment on why the client declined this Quote"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/QuoteStateEnum" }],
            "description": "The status of the Quote inside the receivable workflow."
          }
        },
        "type": "object",
        "required": [
          "type",
          "id",
          "created_at",
          "updated_at",
          "currency",
          "line_items",
          "entity_address",
          "entity",
          "counterpart_id",
          "counterpart_type",
          "counterpart_address",
          "total_vat_amount",
          "status"
        ]
      },
      "QuoteStateEnum": {
        "type": "string",
        "enum": [
          "draft",
          "issued",
          "accepted",
          "expired",
          "declined",
          "deleted"
        ],
        "description": "An enumeration."
      },
      "ReceivableCounterpartContact": {
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The first name of the counterpart contact.",
            "example": "Marge"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the counterpart contact.",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The contact email of the counterpart.",
            "example": "marge@example.org"
          },
          "phone": {
            "type": "string",
            "description": "The contact phone number of the counterpart.",
            "example": "55512378654"
          },
          "title": {
            "type": "string",
            "description": "The counterpart contact title (e.g. Dr., Mr., Mrs., Ms., etc).",
            "example": "Dr."
          },
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "The contact address of the counterpart"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["first_name", "last_name", "address"]
      },
      "ReceivableCreateBasedOnPayload": {
        "properties": {
          "based_on": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID of a previous document related to the receivable if applicable."
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/BasedOnTransitionType" }],
            "description": "The type of a created receivable. Currently supported transitions:quote -> invoice; invoice -> credit_note"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["based_on", "type"]
      },
      "ReceivableCursorFields": {
        "type": "string",
        "enum": ["counterpart_name", "amount", "status"],
        "description": "An enumeration."
      },
      "ReceivableDeclinePayload": {
        "properties": {
          "comment": {
            "type": "string",
            "description": "Field with a comment on why the client declined this Quote",
            "example": "The quote was declined for some reasons"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Payload for decline a Qoute with a comment"
      },
      "ReceivableEditFlow": {
        "type": "string",
        "enum": ["compliant", "partially_compliant", "non_compliant"],
        "description": "An enumeration."
      },
      "ReceivableFacadeCreateInvoicePayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": ["invoice"],
            "description": "The type of the document uploaded."
          },
          "fulfillment_date": {
            "type": "string",
            "format": "date",
            "description": "The date when the goods are shipped or the service is provided.\n\nIf omitted, defaults to the invoice issue date,\nand the value is automatically set when the invoice status changes to `issued`."
          },
          "payment_page_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "Link for custom invoice payment page."
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "line_items": {
            "items": { "$ref": "#/components/schemas/LineItem" },
            "type": "array"
          },
          "counterpart_id": { "type": "string", "format": "uuid" },
          "commercial_condition_description": { "type": "string" },
          "entity_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity bank account ID"
          },
          "vat_exempt": { "type": "boolean" },
          "vat_exemption_rationale": { "type": "string" },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable"
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount" }],
            "description": "The discount for a receivable."
          },
          "counterpart_shipping_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "Address where goods were shipped / where services were provided."
          },
          "counterpart_billing_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "counterpart_business_type": {
            "type": "string",
            "maxLength": 50,
            "description": "Different types of companies for different countries, ex. GmbH, SAS, SNC, etc."
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart VAT ID id"
          },
          "entity_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity VAT ID id"
          },
          "withholding_tax_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of tax withheld in percent minor units"
          },
          "payment_terms_id": { "type": "string", "format": "uuid" },
          "payment_reminder_id": { "type": "string", "format": "uuid" },
          "overdue_reminder_id": { "type": "string", "format": "uuid" },
          "purchase_order": {
            "type": "string",
            "maxLength": 100,
            "description": "Contain purchase order number."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["type", "currency", "line_items", "counterpart_id"]
      },
      "ReceivableFacadeCreatePayload": {
        "anyOf": [
          { "$ref": "#/components/schemas/ReceivableFacadeCreateQuotePayload" },
          {
            "$ref": "#/components/schemas/ReceivableFacadeCreateInvoicePayload"
          },
          { "$ref": "#/components/schemas/ReceivableCreateBasedOnPayload" }
        ],
        "additionalProperties": false
      },
      "ReceivableFacadeCreateQuotePayload": {
        "properties": {
          "type": {
            "type": "string",
            "enum": ["quote"],
            "description": "The type of the document uploaded."
          },
          "expiry_date": {
            "type": "string",
            "format": "date",
            "description": "The date (in ISO 8601 format) until which the quote is valid."
          },
          "quote_accept_page_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "description": "Link for custom quote accept page"
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "line_items": {
            "items": { "$ref": "#/components/schemas/LineItem" },
            "type": "array"
          },
          "counterpart_id": { "type": "string", "format": "uuid" },
          "commercial_condition_description": { "type": "string" },
          "entity_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity bank account ID"
          },
          "vat_exempt": { "type": "boolean" },
          "vat_exemption_rationale": { "type": "string" },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable"
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount" }],
            "description": "The discount for a receivable."
          },
          "counterpart_shipping_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "Address where goods were shipped / where services were provided."
          },
          "counterpart_billing_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "counterpart_business_type": {
            "type": "string",
            "maxLength": 50,
            "description": "Different types of companies for different countries, ex. GmbH, SAS, SNC, etc."
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart VAT ID id"
          },
          "entity_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity VAT ID id"
          },
          "withholding_tax_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of tax withheld in percent minor units"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["type", "currency", "line_items", "counterpart_id"]
      },
      "ReceivableFileUrl": {
        "properties": { "file_url": { "type": "string" } },
        "type": "object"
      },
      "ReceivablePaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ReceivableResponse" },
            "type": "array"
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of receivables"
      },
      "ReceivablePaidPayload": {
        "properties": {
          "comment": {
            "type": "string",
            "description": "Optional comment explaining how the payment was made."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ReceivablePartiallyPaidPayload": {
        "properties": {
          "amount_paid": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "exclusiveMinimum": true,
            "description": "How much has been paid on the invoice (in minor units)."
          },
          "comment": {
            "type": "string",
            "description": "Optional comment explaining how the payment was made."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["amount_paid"]
      },
      "ReceivablePreviewRequest": {
        "properties": {
          "subject_text": {
            "type": "string",
            "minLength": 1,
            "description": "Subject text of the content"
          },
          "body_text": {
            "type": "string",
            "minLength": 1,
            "description": "Body text of the content"
          },
          "language": {
            "type": "string",
            "minLength": 1,
            "description": "Language code for localization purposes",
            "default": "en"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["subject_text", "body_text"],
        "description": "A schema for receiving a request for previewing an email with a receivable document"
      },
      "ReceivablePreviewResponse": {
        "properties": {
          "subject_preview": { "type": "string" },
          "body_preview": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["subject_preview", "body_preview"],
        "description": "A schema for receiving a request for previewing an email with a receivable document"
      },
      "ReceivableResponse": {
        "anyOf": [
          { "$ref": "#/components/schemas/QuoteResponsePayload" },
          { "$ref": "#/components/schemas/InvoiceResponsePayload" },
          { "$ref": "#/components/schemas/CreditNoteResponsePayload" }
        ]
      },
      "ReceivableSendRequest": {
        "properties": {
          "subject_text": {
            "type": "string",
            "minLength": 1,
            "description": "Subject text of the content"
          },
          "body_text": {
            "type": "string",
            "minLength": 1,
            "description": "Body text of the content"
          },
          "language": {
            "type": "string",
            "minLength": 1,
            "description": "Lowercase ISO code of language",
            "default": "en"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["subject_text", "body_text"],
        "description": "A schema for receiving a request for sending a receivable"
      },
      "ReceivableSendResponse": {
        "properties": { "mail_id": { "type": "string", "format": "uuid" } },
        "additionalProperties": false,
        "type": "object",
        "required": ["mail_id"],
        "description": "A schema for returning a response an email with a link to receivable document has been sent"
      },
      "ReceivableSettingsPayload": {
        "required": ["create_without_personal_info"],
        "type": "object",
        "properties": { "create_without_personal_info": { "type": "boolean" } },
        "additionalProperties": false
      },
      "ReceivableSettingsResponse": {
        "required": ["create_without_personal_info"],
        "type": "object",
        "properties": { "create_without_personal_info": { "type": "boolean" } }
      },
      "ReceivableTemplatesVariable": {
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "description"]
      },
      "ReceivableTemplatesVariablesObject": {
        "properties": {
          "object_type": { "type": "string" },
          "object_subtype": { "$ref": "#/components/schemas/VariablesType" },
          "variables": {
            "items": {
              "$ref": "#/components/schemas/ReceivableTemplatesVariable"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["object_type", "object_subtype", "variables"]
      },
      "ReceivableTemplatesVariablesObjectList": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ReceivableTemplatesVariablesObject"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "ReceivableType": {
        "type": "string",
        "enum": ["quote", "invoice", "credit_note"],
        "description": "An enumeration."
      },
      "ReceivableUncollectiblePayload": {
        "properties": {
          "comment": {
            "type": "string",
            "description": "Optional comment explains why the Invoice goes uncollectible."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ReceivableUpdatePayload": {
        "anyOf": [
          { "$ref": "#/components/schemas/UpdateQuotePayload" },
          { "$ref": "#/components/schemas/UpdateInvoicePayload" },
          { "$ref": "#/components/schemas/UpdateCreditNotePayload" },
          { "$ref": "#/components/schemas/UpdateIssuedInvoicePayload" }
        ],
        "additionalProperties": false
      },
      "ReceivablesEntityIndividual": {
        "properties": {
          "phone": {
            "type": "string",
            "description": "A phone number of the entity"
          },
          "logo": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A link to the entity logo"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "An email of the entity"
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the entity issuing the receivable"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the entity issuing the receivable"
          },
          "tax_id": {
            "type": "string",
            "description": "The Tax ID of the entity issuing the receivable"
          },
          "type": {
            "type": "string",
            "enum": ["individual"],
            "description": "The entity type"
          }
        },
        "type": "object",
        "required": ["first_name", "last_name", "type"],
        "description": "A Response schema for an entity of individual type"
      },
      "ReceivablesEntityOrganization": {
        "properties": {
          "phone": {
            "type": "string",
            "description": "A phone number of the entity"
          },
          "logo": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A link to the entity logo"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "An email of the entity"
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          },
          "name": {
            "type": "string",
            "description": "The name of the entity issuing the receivable, when it is an organization."
          },
          "tax_id": {
            "type": "string",
            "description": "The Tax ID of the entity issuing the receivable"
          },
          "vat_id": {
            "type": "string",
            "description": "The VAT ID of the entity issuing the receivable, when it is an organization."
          },
          "type": {
            "type": "string",
            "enum": ["organization"],
            "description": "The entity type"
          }
        },
        "type": "object",
        "required": ["name", "type"],
        "description": "A Response schema for an entity of organization type"
      },
      "ReceivablesStatusEnum": {
        "type": "string",
        "enum": [
          "draft",
          "issued",
          "accepted",
          "expired",
          "declined",
          "recurring",
          "partially_paid",
          "paid",
          "overdue",
          "uncollectible",
          "canceled",
          "deleted"
        ],
        "description": "This Enum the results of combining two types of statuses from\nQuoteStateEnum, CreditNoteStateEnum and InvoiceStateEnum. You shouldn't use\nit in your scenarios if only for edge cases in workers, but ideally need to\nremove this shared Enum."
      },
      "Recipient": {
        "properties": {
          "type": { "$ref": "#/components/schemas/RecipientType" },
          "id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["type", "id"]
      },
      "RecipientAccountResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "type": { "$ref": "#/components/schemas/PaymentAccountType" },
          "bank_accounts": {
            "items": { "$ref": "#/components/schemas/BankAccount" },
            "type": "array"
          },
          "name": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "RecipientType": {
        "type": "string",
        "enum": ["entity", "counterpart"],
        "description": "An enumeration."
      },
      "Recurrence": {
        "properties": {
          "invoice_id": { "type": "string", "format": "uuid" },
          "start_year": { "type": "integer", "maximum": 2077.0 },
          "start_month": { "type": "integer", "maximum": 12.0, "minimum": 1.0 },
          "end_year": { "type": "integer", "maximum": 2077.0 },
          "end_month": { "type": "integer", "maximum": 12.0, "minimum": 1.0 },
          "day_of_month": { "$ref": "#/components/schemas/DayOfMonth" },
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard."
          },
          "iterations": {
            "items": { "$ref": "#/components/schemas/RecurrenceIteration" },
            "type": "array"
          },
          "status": { "$ref": "#/components/schemas/RecurrenceStatus" },
          "current_iteration": { "type": "integer" }
        },
        "type": "object",
        "required": [
          "invoice_id",
          "start_year",
          "start_month",
          "end_year",
          "end_month",
          "day_of_month",
          "id",
          "created_at",
          "updated_at",
          "iterations",
          "status",
          "current_iteration"
        ]
      },
      "RecurrenceIteration": {
        "properties": {
          "issue_at": { "type": "string", "format": "date" },
          "issued_invoice_id": { "type": "string", "format": "uuid" },
          "status": { "$ref": "#/components/schemas/IterationStatus" },
          "iteration": { "type": "integer", "default": 1 }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["issue_at", "status"]
      },
      "RecurrenceStatus": {
        "type": "string",
        "enum": ["active", "canceled", "completed"],
        "description": "An enumeration."
      },
      "RegisterPartnerUserPayload": {
        "required": [
          "company_name",
          "company_website",
          "email",
          "fullname",
          "password"
        ],
        "type": "object",
        "properties": {
          "company_name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "company_website": {
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "email": { "type": "string", "format": "email" },
          "fullname": { "minLength": 1, "type": "string" },
          "password": { "minLength": 12, "type": "string" }
        },
        "additionalProperties": false
      },
      "RegisterResponse": {
        "required": ["invited_users", "not_invited_users"],
        "type": "object",
        "properties": {
          "invited_users": {
            "type": "array",
            "items": { "type": "string", "format": "email" }
          },
          "not_invited_users": {
            "type": "array",
            "items": { "type": "string", "format": "email" }
          }
        }
      },
      "RelatedDocuments": {
        "properties": {
          "credit_note_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          },
          "proforma_invoice_id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "Reminder": {
        "properties": {
          "days_before": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 1.0
          },
          "body": { "type": "string" },
          "subject": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["days_before", "body", "subject"]
      },
      "RemindersSettings": {
        "properties": { "enabled": { "type": "boolean", "default": true } },
        "type": "object"
      },
      "RequestResendInvite": {
        "required": ["email", "old_invitation_token"],
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" },
          "old_invitation_token": { "type": "string" }
        },
        "additionalProperties": false
      },
      "RequirementsError": {
        "properties": {
          "code": { "type": "string" },
          "reason": { "type": "string" },
          "requirement": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["code", "reason", "requirement"]
      },
      "ResetPasswordPayload": {
        "required": ["email"],
        "type": "object",
        "properties": { "email": { "type": "string", "format": "email" } },
        "additionalProperties": false
      },
      "ResponseItem": {
        "properties": {
          "quantity": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The quantity of each of the goods, materials, or services listed in the receivable."
          },
          "product": { "$ref": "#/components/schemas/LineItemProduct" },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount" }],
            "description": "The discount for a product."
          },
          "total_before_vat": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total of line_item before VAT in [minor units](https://docs.monite.com/docs/currencies#minor-units)."
          }
        },
        "type": "object",
        "required": ["quantity", "product"]
      },
      "RevokeTokenPayload": {
        "properties": {
          "client_id": { "type": "string", "format": "uuid" },
          "client_secret": { "type": "string" },
          "token": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["client_id", "client_secret", "token"]
      },
      "RoleCursorFields": {
        "type": "string",
        "enum": ["updated_at", "created_at"],
        "description": "An enumeration."
      },
      "RolePaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/RoleResponse" },
            "type": "array",
            "description": "array of records"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "RoleResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID role ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Role name"
          },
          "permissions": {
            "allOf": [{ "$ref": "#/components/schemas/BizObjectsSchema" }],
            "description": "Access permissions"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/StatusEnum" }],
            "description": "record status, 'active' by default"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "permissions",
          "status"
        ]
      },
      "RolesCreatePayload": {
        "required": ["name", "permissions"],
        "type": "object",
        "properties": {
          "description": { "minLength": 1, "type": "string" },
          "name": { "minLength": 1, "type": "string" },
          "permissions": {
            "allOf": [{ "$ref": "#/components/schemas/BizObjectsSchema" }],
            "description": "Access permissions"
          }
        },
        "additionalProperties": false
      },
      "RolesResponse": {
        "required": ["id", "name", "permissions"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_by_user_id": { "type": "string", "format": "uuid" },
          "description": { "type": "string" },
          "name": { "minLength": 1, "type": "string" },
          "permissions": {
            "allOf": [{ "$ref": "#/components/schemas/BizObjectsSchema" }],
            "description": "Access permissions"
          }
        }
      },
      "RolesUpdatePayload": {
        "type": "object",
        "properties": {
          "description": { "minLength": 1, "type": "string" },
          "name": { "minLength": 1, "type": "string" },
          "permissions": {
            "allOf": [{ "$ref": "#/components/schemas/BizObjectsSchema" }],
            "description": "Access permissions"
          }
        },
        "additionalProperties": false
      },
      "RootSchema": {
        "oneOf": [
          { "$ref": "#/components/schemas/CommonSchema" },
          { "$ref": "#/components/schemas/PayableSchema" }
        ],
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "object_type",
          "mapping": {
            "comment": "#/components/schemas/CommonSchema",
            "counterpart": "#/components/schemas/CommonSchema",
            "entity_user": "#/components/schemas/CommonSchema",
            "entity": "#/components/schemas/CommonSchema",
            "entity_vat_ids": "#/components/schemas/CommonSchema",
            "counterpart_vat_id": "#/components/schemas/CommonSchema",
            "entity_bank_account": "#/components/schemas/CommonSchema",
            "export": "#/components/schemas/CommonSchema",
            "payables_purchase_order": "#/components/schemas/CommonSchema",
            "payment_reminder": "#/components/schemas/CommonSchema",
            "overdue_reminder": "#/components/schemas/CommonSchema",
            "product": "#/components/schemas/CommonSchema",
            "receivable": "#/components/schemas/CommonSchema",
            "reconciliation": "#/components/schemas/CommonSchema",
            "role": "#/components/schemas/CommonSchema",
            "tag": "#/components/schemas/CommonSchema",
            "todo_task": "#/components/schemas/CommonSchema",
            "todo_task_mute": "#/components/schemas/CommonSchema",
            "transaction": "#/components/schemas/CommonSchema",
            "workflow": "#/components/schemas/CommonSchema",
            "approval_request": "#/components/schemas/CommonSchema",
            "approval_policy": "#/components/schemas/CommonSchema",
            "payment_record": "#/components/schemas/CommonSchema",
            "payable": "#/components/schemas/PayableSchema"
          }
        }
      },
      "SecretRequest": {
        "required": ["project_id"],
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "project_id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false
      },
      "SecretStatusEnum": {
        "enum": ["active", "revoked", "scheduled_to_revoke"],
        "type": "string",
        "description": "An enumeration."
      },
      "SendPurchaseOrderViaEmailRequest": {
        "properties": {
          "body_text": { "type": "string" },
          "subject_text": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["body_text", "subject_text"],
        "description": "A schema for request for sending purchase order via email"
      },
      "SetPasswordPayload": {
        "required": ["new_password", "token"],
        "type": "object",
        "properties": {
          "new_password": { "minLength": 12, "type": "string" },
          "token": { "type": "string" }
        },
        "additionalProperties": false
      },
      "SinglePaymentIntent": {
        "properties": {
          "payment_reference": {
            "type": "string",
            "description": "Must be provided if payable's document id is missing."
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentIntentsRecipient"
          },
          "object": { "$ref": "#/components/schemas/PaymentObjectPayable" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["recipient", "object"]
      },
      "SinglePaymentIntentResponse": {
        "properties": {
          "payment_reference": { "type": "string" },
          "recipient": {
            "$ref": "#/components/schemas/PaymentIntentsRecipient"
          },
          "object": { "$ref": "#/components/schemas/PaymentObjectPayable" },
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "amount": { "type": "integer" },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "status": { "type": "string" },
          "error": { "type": "object" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "payment_reference",
          "recipient",
          "object",
          "id",
          "created_at",
          "amount",
          "currency",
          "status"
        ]
      },
      "SourceOfPayableDataEnum": {
        "type": "string",
        "enum": ["ocr", "user_specified"],
        "description": "An enumeration."
      },
      "StatusEnum": {
        "type": "string",
        "enum": ["active", "deleted"],
        "description": "An enumeration."
      },
      "Stripe": {
        "properties": {
          "publishable": { "type": "string" },
          "secret": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["secret"]
      },
      "SuccessResult": {
        "properties": { "success": { "type": "boolean", "default": true } },
        "additionalProperties": false,
        "type": "object"
      },
      "SuggestedPaymentTerm": {
        "properties": {
          "date": { "type": "string", "format": "date" },
          "discount": { "type": "integer", "maximum": 10000.0, "minimum": 0.0 }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["date"],
        "description": "Suggested payment date and corresponding discount"
      },
      "SupportedFieldNames": {
        "enum": ["default_account_code", "default_tax_rate_code"],
        "type": "string",
        "description": "An enumeration."
      },
      "SupportedFormatSchema": {
        "required": ["available_types", "object_type"],
        "type": "object",
        "properties": {
          "available_types": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/ExportFormat" }
            }
          },
          "object_type": { "enum": ["payable", "receivable"], "type": "string" }
        },
        "additionalProperties": false
      },
      "SyncStatus": {
        "enum": ["pending", "error", "done"],
        "type": "string",
        "description": "An enumeration."
      },
      "SyncStatusCursorFields": {
        "enum": ["sync_status", "type"],
        "type": "string",
        "description": "An enumeration."
      },
      "SyncStatusResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "sync_status": { "$ref": "#/components/schemas/SyncStatus" },
          "type": { "$ref": "#/components/schemas/ObjectMatchTypes" }
        },
        "additionalProperties": false
      },
      "SyncStatusResponseList": {
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SyncStatusResponse" }
          },
          "next_pagination_token": { "type": "string", "format": "uuid" },
          "prev_pagination_token": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false
      },
      "SystemTemplateDataSchema": {
        "properties": {
          "available_templates": {
            "items": { "$ref": "#/components/schemas/TemplateDataSchema" },
            "type": "array",
            "description": "Array of templates"
          },
          "template_name": {
            "type": "string",
            "description": "Name of the template"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["available_templates", "template_name"]
      },
      "SystemTemplates": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SystemTemplateDataSchema"
            },
            "type": "array",
            "description": "All pre-defined email templates"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "TagCreateOrUpdateSchema": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "The tag name.",
            "example": "Marketing"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name"]
      },
      "TagCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"],
        "description": "An enumeration."
      },
      "TagReadSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of this tag.",
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the tag was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.",
            "example": "2022-09-07T16:35:18.484507+00:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the tag was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.",
            "example": "2022-09-07T16:35:18.484507+00:00"
          },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who created the tag",
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "The tag name.",
            "example": "Marketing"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "name"],
        "description": "Represents a user-defined tag that can be assigned to payables to filter them."
      },
      "TagsPaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/TagReadSchema" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).",
            "example": "eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9"
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).",
            "example": "eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9"
          }
        },
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of tags."
      },
      "TaxIDTypeEnum": {
        "type": "string",
        "enum": [
          "ae_trn",
          "au_abn",
          "au_arn",
          "bg_uic",
          "br_cnpj",
          "br_cpf",
          "ca_bn",
          "ca_gst_hst",
          "ca_pst_bc",
          "ca_pst_mb",
          "ca_pst_sk",
          "ca_qst",
          "ch_vat",
          "cl_tin",
          "es_cif",
          "eu_oss_vat",
          "eu_vat",
          "gb_vat",
          "ge_vat",
          "hk_br",
          "hu_tin",
          "id_npwp",
          "il_vat",
          "in_gst",
          "is_vat",
          "jp_cn",
          "jp_rn",
          "kr_brn",
          "li_uid",
          "mx_rfc",
          "my_frp",
          "my_itn",
          "my_sst",
          "no_vat",
          "nz_gst",
          "ru_inn",
          "ru_kpp",
          "sa_vat",
          "sg_gst",
          "sg_uen",
          "si_tin",
          "th_vat",
          "tw_vat",
          "ua_vat",
          "us_ein",
          "za_vat",
          "unknown"
        ],
        "description": "An enumeration."
      },
      "TemplateDataSchema": {
        "properties": {
          "body_template": {
            "type": "string",
            "description": "Jinja2 compatible email body template"
          },
          "language": {
            "type": "string",
            "description": "Lowercase ISO code of language"
          },
          "subject_template": {
            "type": "string",
            "description": "Jinja2 compatible email subject template"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["body_template", "language", "subject_template"]
      },
      "TemplateListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TemplateReceivableResponse"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TemplateReceivableResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "blocks": { "items": { "type": "string" }, "type": "array" },
          "document_type": { "$ref": "#/components/schemas/DocumentTypeEnum" },
          "is_default": { "type": "boolean" },
          "language": { "type": "string" },
          "name": { "type": "string" },
          "preview": { "$ref": "#/components/schemas/FileSchema" },
          "template": { "type": "string" },
          "template_type": {
            "allOf": [{ "$ref": "#/components/schemas/TemplateTypeEnum" }],
            "default": "source_object"
          }
        },
        "type": "object",
        "required": [
          "id",
          "document_type",
          "is_default",
          "language",
          "name",
          "template"
        ]
      },
      "TemplateTypeEnum": {
        "type": "string",
        "enum": ["block", "source_object"],
        "description": "An enumeration."
      },
      "TemplateVariable": {
        "properties": { "name": { "type": "string" } },
        "additionalProperties": false,
        "type": "object",
        "required": ["name"]
      },
      "TemplateVariablesItem": {
        "properties": {
          "template_name": { "type": "string" },
          "variables": {
            "items": { "$ref": "#/components/schemas/TemplateVariable" },
            "type": "array",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["template_name"]
      },
      "TemplatesVariablesResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/TemplateVariablesItem" },
            "type": "array",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "TermFinalWithDate": {
        "properties": {
          "number_of_days": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of days after the invoice issue date."
          },
          "end_date": { "type": "string", "format": "date" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["number_of_days"]
      },
      "TermsOfServiceAcceptance": {
        "properties": {
          "ip": {
            "type": "string",
            "description": "The IP address from which the account representative accepted their service agreement."
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime in ISO format marking when the account representative accepted their service agreement."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "TextTemplateResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "document_type": { "$ref": "#/components/schemas/DocumentTypeEnum" },
          "is_default": { "type": "boolean" },
          "name": { "type": "string" },
          "template": { "type": "string" },
          "type": { "$ref": "#/components/schemas/TextTemplateType" }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "document_type",
          "is_default",
          "name",
          "template",
          "type"
        ]
      },
      "TextTemplateResponseList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/TextTemplateResponse" },
            "type": "array"
          },
          "next_pagination_token": { "type": "string" },
          "prev_pagination_token": { "type": "string" }
        },
        "type": "object",
        "required": ["data"]
      },
      "TextTemplateType": {
        "type": "string",
        "enum": ["email_header", "email_body", "memo"],
        "description": "An enumeration."
      },
      "Token": {
        "required": ["access_token", "token_type"],
        "type": "object",
        "properties": {
          "access_token": { "type": "string" },
          "token_type": { "type": "string" }
        },
        "additionalProperties": false,
        "example": {
          "access_token": "L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg",
          "token_type": "Bearer"
        }
      },
      "TokenSerializerTypeEnum": {
        "enum": ["forgot_password", "invitation"],
        "type": "string",
        "description": "An enumeration."
      },
      "TotalVatAmountItem": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "value": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250."
          },
          "amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The total VAT of all line items, in [minor units](https://docs.monite.com/docs/currencies#minor-units)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "value", "amount"]
      },
      "Unit": {
        "required": ["designation", "name"],
        "type": "object",
        "properties": {
          "designation": { "minLength": 1, "type": "string", "example": "kg" },
          "name": { "minLength": 1, "type": "string", "example": "Kilogram" }
        }
      },
      "UnitListResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/UnitResponse" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "UnitRequest": {
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name"]
      },
      "UnitResponse": {
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" }
        },
        "type": "object",
        "required": ["name", "id", "created_at", "updated_at"]
      },
      "UnitUpdate": {
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateCounterpartBankAccount": {
        "properties": {
          "iban": {
            "type": "string",
            "maxLength": 34,
            "description": "The IBAN of the bank account.",
            "example": "DE74500700100100000900"
          },
          "bic": {
            "type": "string",
            "maxLength": 11,
            "description": "The BIC/SWIFT code of the bank.",
            "example": "DEUTDEFFXXX"
          },
          "name": { "type": "string", "maxLength": 200 },
          "account_holder_name": {
            "type": "string",
            "description": "The name of the person or business that owns this bank account. Required for US bank accounts to accept ACH payments.",
            "example": "Bob Jones"
          },
          "account_number": {
            "type": "string",
            "description": "The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.",
            "example": "12345678"
          },
          "sort_code": {
            "type": "string",
            "description": "The bank's sort code.",
            "example": "123456"
          },
          "routing_number": {
            "type": "string",
            "description": "The bank's routing transit number (RTN). Required for US bank accounts to accept ACH payments. US routing numbers consist of 9 digits."
          },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateCounterpartContactPayload": {
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The first name of a contact person.",
            "example": "Mary"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of a contact person.",
            "example": "O'Brien"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of a contact person.",
            "example": "contact@example.org"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of a contact person",
            "example": "5551235476"
          },
          "title": {
            "type": "string",
            "description": "The title or honorific of a contact person. Examples: Mr., Ms., Dr., Prof.",
            "example": "Ms."
          },
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "The address of a contact person."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "The contact person for an organization."
      },
      "UpdateCreditNote": {
        "properties": {
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "line_items": {
            "$ref": "#/components/schemas/UpdateLineItemForCreditNote"
          },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable"
          },
          "counterpart_contact": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableCounterpartContact" }
            ],
            "description": "Additional information about counterpart contacts."
          },
          "counterpart_address": {
            "$ref": "#/components/schemas/CounterpartAddress"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateCreditNotePayload": {
        "properties": {
          "credit_note": { "$ref": "#/components/schemas/UpdateCreditNote" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["credit_note"],
        "description": "Helper class that provides a standard way to create an ABC using\ninheritance."
      },
      "UpdateCustomTemplateSchemaRequest": {
        "properties": {
          "body_template": {
            "type": "string",
            "description": "Jinja2 compatible string with email body"
          },
          "language_code": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "Lowercase iso code of language"
          },
          "subject_template": {
            "type": "string",
            "description": "Jinja2 compatible string with email subject"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateEntityBankAccountRequest": {
        "properties": {
          "iban": {
            "type": "string",
            "maxLength": 34,
            "description": "The IBAN of the bank account. Required for EU bank accounts.",
            "example": "DE74500700100100000900"
          },
          "bic": {
            "type": "string",
            "maxLength": 11,
            "description": "The SWIFT/BIC code of the bank.",
            "example": "DEUTDEFFXXX"
          },
          "bank_name": {
            "type": "string",
            "description": "The bank name.",
            "example": "Deutsche Bank"
          },
          "display_name": {
            "type": "string",
            "description": "User-defined name of this bank account, such as 'Primary account' or 'Savings account'.",
            "example": "Primary account"
          },
          "account_holder_name": {
            "type": "string",
            "description": "The name of the person or business that owns this bank account. For US bank accounts, the holder name cannot be changed to an empty string.",
            "example": "Cayla Lloyd"
          },
          "account_number": {
            "type": "string",
            "description": "The bank account number. Required for UK and US bank accounts. UK account numbers typically contain 8 digits. US account numbers contain 9 to 12 digits.",
            "example": "12345678"
          },
          "routing_number": {
            "type": "string",
            "description": "The bank's routing transit number (RTN). Required for US bank accounts. US routing numbers consist of 9 digits."
          },
          "sort_code": {
            "type": "string",
            "description": "The bank's sort code. Required for UK bank accounts.",
            "example": "123456"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency of the bank account, represented as a three-letter ISO [currency code](https://docs.monite.com/docs/currencies).",
            "example": "EUR"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "The country in which the bank account is registered, repsesented as a two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Data that can be updated in existing bank accounts of an entity."
      },
      "UpdateEntityRequest": {
        "properties": {
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/EntityAddressResponse" }],
            "description": "An address description of the entity"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "An official email address of the entity"
          },
          "phone": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "A phone number of the entity"
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "An identification number of the legal entity"
          },
          "organization": {
            "allOf": [
              { "$ref": "#/components/schemas/OptionalOrganizationSchema" }
            ],
            "description": "A set of meta data describing the organization"
          },
          "individual": {
            "allOf": [
              { "$ref": "#/components/schemas/OptionalIndividualSchema" }
            ],
            "description": "A set of meta data describing the individual"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "A schema for a request to update an entity"
      },
      "UpdateEntityUserRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "An entity user business email"
          },
          "first_name": {
            "type": "string",
            "maxLength": 255,
            "description": "First name",
            "example": "Andrey"
          },
          "last_name": {
            "type": "string",
            "maxLength": 255,
            "description": "Last name",
            "example": "Korchak"
          },
          "login": {
            "type": "string",
            "maxLength": 255,
            "description": "Login",
            "example": "Meme Lord"
          },
          "phone": {
            "type": "string",
            "description": "An entity user phone number in the international format"
          },
          "role_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the role assigned to this entity user"
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "Title",
            "example": "Boss"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "A scheme for validation an entity user additional info"
      },
      "UpdateInvoice": {
        "properties": {
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "vat_exempt": { "type": "boolean" },
          "vat_exemption_rationale": { "type": "string" },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable"
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount" }],
            "description": "The discount for a receivable."
          },
          "counterpart_shipping_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "Address where goods were shipped / where services were provided."
          },
          "counterpart_billing_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "line_items": {
            "items": { "$ref": "#/components/schemas/LineItemUpdate" },
            "type": "array"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "contact_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart contact."
          },
          "payment_terms_id": { "type": "string", "format": "uuid" },
          "entity_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity VAT ID id"
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart VAT ID id"
          },
          "withholding_tax_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of tax withheld in percent minor units"
          },
          "payment_reminder_id": { "type": "string", "format": "uuid" },
          "overdue_reminder_id": { "type": "string", "format": "uuid" },
          "fulfillment_date": {
            "type": "string",
            "format": "date",
            "description": "The date when the goods are shipped or the service is provided.\n\nIf omitted, defaults to the invoice issue date,\nand the value is automatically set when the invoice status changes to `issued`."
          },
          "payment_page_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "Link for custom invoice payment page."
          },
          "entity_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity bank account ID"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Raise if None was explicitly passed to given fields"
      },
      "UpdateInvoicePayload": {
        "properties": {
          "invoice": { "$ref": "#/components/schemas/UpdateInvoice" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["invoice"],
        "description": "Helper class that provides a standard way to create an ABC using\ninheritance."
      },
      "UpdateIssuedInvoice": {
        "properties": {
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable"
          },
          "entity_address": {
            "$ref": "#/components/schemas/EntityAddressSchema"
          },
          "entity": {
            "anyOf": [
              { "$ref": "#/components/schemas/EntityOrganizationRequest" },
              { "$ref": "#/components/schemas/EntityIndividualRequest" }
            ]
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Id of a new or updated counterpart"
          },
          "contact_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart contact."
          },
          "fulfillment_date": {
            "type": "string",
            "format": "date",
            "description": "The date when the goods are shipped or the service is provided.\n\nIf omitted, defaults to the invoice issue date,\nand the value is automatically set when the invoice status changes to `issued`."
          },
          "payment_terms_id": { "type": "string", "format": "uuid" },
          "payment_reminder_id": { "type": "string", "format": "uuid" },
          "overdue_reminder_id": { "type": "string", "format": "uuid" },
          "entity_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity VAT ID id"
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart VAT ID id"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Raise if None was explicitly passed to given fields"
      },
      "UpdateIssuedInvoicePayload": {
        "properties": {
          "issued_invoice": {
            "$ref": "#/components/schemas/UpdateIssuedInvoice"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["issued_invoice"],
        "description": "Helper class that provides a standard way to create an ABC using\ninheritance."
      },
      "UpdateLineItemForCreditNote": {
        "additionalProperties": {
          "$ref": "#/components/schemas/UpdateProductForCreditNote"
        },
        "type": "object",
        "description": "Line item with given product id can be changed only once",
        "example": {
          "6639ac63-0622-4bd9-b340-31c25e2096b8": {
            "quantity": 5,
            "price_diff": 100,
            "old_price": 400
          }
        }
      },
      "UpdateLineItems": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/LineItem" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "UpdateMeEntityUserRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "An entity user business email"
          },
          "first_name": {
            "type": "string",
            "maxLength": 255,
            "description": "First name",
            "example": "Andrey"
          },
          "last_name": {
            "type": "string",
            "maxLength": 255,
            "description": "Last name",
            "example": "Korchak"
          },
          "phone": {
            "type": "string",
            "description": "An entity user phone number in the international format"
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "Title",
            "example": "Boss"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "A scheme for validation an entity user additional info"
      },
      "UpdatePasswordPayload": {
        "required": ["new_password", "old_password"],
        "type": "object",
        "properties": {
          "new_password": { "minLength": 12, "type": "string" },
          "old_password": { "minLength": 12, "type": "string" }
        },
        "additionalProperties": false
      },
      "UpdatePaymentIntentPayload": {
        "properties": { "amount": { "type": "integer" } },
        "additionalProperties": false,
        "type": "object",
        "required": ["amount"]
      },
      "UpdateProductForCreditNote": {
        "properties": {
          "quantity": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 1.0,
            "description": "The quantity of each of the goods, materials, or services listed in the receivable."
          },
          "price_diff": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 1.0,
            "description": "The price diff of the line item, i.e. applied discount"
          },
          "old_price": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 1.0,
            "description": "The old price of the line item. Used to choose for which line item new price should be applied"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["quantity"]
      },
      "UpdatePurchaseOrderPayloadSchema": {
        "properties": {
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart unique ID."
          },
          "entity_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity VAT ID identifier that applied to purchase order"
          },
          "items": {
            "items": { "$ref": "#/components/schemas/PurchaseOrderItem" },
            "type": "array",
            "description": "List of item to purchase"
          },
          "message": {
            "type": "string",
            "description": "Msg which will be send to counterpart for who the purchase order is issued."
          },
          "valid_for_days": {
            "type": "integer",
            "exclusiveMinimum": true,
            "description": "Number of days for which purchase order is valid"
          }
        },
        "type": "object",
        "description": "Represents an Accounts Purchase Order document created by entity."
      },
      "UpdateQuote": {
        "properties": {
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "vat_exempt": { "type": "boolean" },
          "vat_exemption_rationale": { "type": "string" },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable"
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount" }],
            "description": "The discount for a receivable."
          },
          "counterpart_shipping_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "Address where goods were shipped / where services were provided."
          },
          "counterpart_billing_address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "line_items": {
            "items": { "$ref": "#/components/schemas/LineItemUpdate" },
            "type": "array"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "contact_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart contact."
          },
          "payment_terms_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the payment terms."
          },
          "entity_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity VAT ID id"
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart VAT ID id"
          },
          "withholding_tax_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of tax withheld in percent minor units"
          },
          "expiry_date": {
            "type": "string",
            "format": "date",
            "description": "The date (in ISO 8601 format) until which the quote is valid."
          },
          "quote_accept_page_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "description": "Link for custom quote accept page"
          },
          "entity_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity bank account ID"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Raise if None was explicitly passed to given fields"
      },
      "UpdateQuotePayload": {
        "properties": {
          "quote": { "$ref": "#/components/schemas/UpdateQuote" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["quote"],
        "description": "Helper class that provides a standard way to create an ABC using\ninheritance."
      },
      "UpdateRecurrencePayload": {
        "properties": {
          "end_year": { "type": "integer", "maximum": 2077.0 },
          "end_month": { "type": "integer", "maximum": 12.0, "minimum": 1.0 },
          "day_of_month": { "$ref": "#/components/schemas/DayOfMonth" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateRoleRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "Role name"
          },
          "permissions": {
            "allOf": [{ "$ref": "#/components/schemas/BizObjectsSchema" }],
            "description": "Access permissions"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateTextTemplatePayload": {
        "properties": {
          "name": { "type": "string" },
          "template": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateUserProfilePayload": {
        "type": "object",
        "properties": {
          "fullname": { "minLength": 1, "type": "string" },
          "password": { "$ref": "#/components/schemas/UpdatePasswordPayload" }
        },
        "additionalProperties": false
      },
      "UpdateWebhookSubscriptionRequest": {
        "properties": {
          "event_types": { "items": { "type": "string" }, "type": "array" },
          "object_type": { "$ref": "#/components/schemas/WebhookObjectType" },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UploadFile": {
        "properties": {
          "file": { "type": "string", "format": "binary" },
          "file_type": { "$ref": "#/components/schemas/AllowedFileTypes" }
        },
        "type": "object",
        "required": ["file", "file_type"]
      },
      "UserAvatarFileUpload": {
        "required": ["file"],
        "type": "object",
        "properties": { "file": { "type": "string", "format": "binary" } }
      },
      "UserUpdatePayload": {
        "type": "object",
        "properties": {
          "fullname": { "minLength": 1, "type": "string" },
          "password": { "minLength": 12, "type": "string" },
          "role_id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false
      },
      "UsersInviteRequest": {
        "required": ["email", "role_id"],
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" },
          "role_id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array"
          },
          "msg": { "type": "string" },
          "type": { "type": "string" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"]
      },
      "Variable": {
        "properties": {
          "description": { "type": "string" },
          "name": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["description", "name"]
      },
      "VariablesObject": {
        "properties": {
          "object_subtype": { "$ref": "#/components/schemas/DocumentTypeEnum" },
          "object_type": { "type": "string" },
          "variables": {
            "items": { "$ref": "#/components/schemas/Variable" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["object_subtype", "object_type", "variables"]
      },
      "VariablesObjectList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/VariablesObject" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "VariablesType": {
        "type": "string",
        "enum": [
          "quote",
          "invoice",
          "credit_note",
          "discount_reminder",
          "final_reminder",
          "overdue_reminder"
        ],
        "description": "An enumeration."
      },
      "VatIDTypeEnum": {
        "type": "string",
        "enum": [
          "ae_trn",
          "au_abn",
          "au_arn",
          "bg_uic",
          "br_cnpj",
          "br_cpf",
          "ca_bn",
          "ca_gst_hst",
          "ca_pst_bc",
          "ca_pst_mb",
          "ca_pst_sk",
          "ca_qst",
          "ch_vat",
          "cl_tin",
          "es_cif",
          "eu_oss_vat",
          "eu_vat",
          "gb_vat",
          "ge_vat",
          "hk_br",
          "hu_tin",
          "id_npwp",
          "il_vat",
          "in_gst",
          "is_vat",
          "jp_cn",
          "jp_rn",
          "kr_brn",
          "li_uid",
          "mx_rfc",
          "my_frp",
          "my_itn",
          "my_sst",
          "no_vat",
          "nz_gst",
          "ru_inn",
          "ru_kpp",
          "sa_vat",
          "sg_gst",
          "sg_uen",
          "si_tin",
          "th_vat",
          "tw_vat",
          "ua_vat",
          "us_ein",
          "za_vat",
          "unknown"
        ],
        "description": "ae_trn - United Arab Emirates TRN (123456789012345)\nau_abn - Australian Business Number (AU ABN) (12345678912)\nau_arn - Australian Taxation Office Reference Number (123456789123)\nbg_uic - Bulgaria Unified Identification Code (123456789)\nbr_cnpj - Brazilian CNPJ number (01.234.456/5432-10)\nbr_cpf - Brazilian CPF number (123.456.789-87)\nca_bn - Canadian BN (123456789)\nca_gst_hst - Canadian GST/HST number (123456789RT0002)\nca_pst_bc - Canadian PST number (British Columbia) (PST-1234-5678)\nca_pst_mb - Canadian PST number (Manitoba) (123456-7)\nca_pst_sk - Canadian PST number (Saskatchewan) (1234567)\nca_qst - Canadian QST number (Québec) (1234567890TQ1234)\nch_vat - Switzerland VAT number (CHE-123.456.789 MWST)\ncl_tin - Chilean TIN (12.345.678-K)\nes_cif - Spanish NIF number (previously Spanish CIF number) (A12345678)\neu_oss_vat - European One Stop Shop VAT number for non-Union scheme (EU123456789)\neu_vat - European VAT number (ATU12345678)\ngb_vat - United Kingdom VAT number (GB123456789)\nge_vat - Georgian VAT (123456789)\nhk_br - Hong Kong BR number (12345678)\nhu_tin - Hungary tax number (adószám) (12345678-1-23)\nid_npwp - Indonesian NPWP number (12.345.678.9-012.345)\nil_vat - Israel VAT (000012345)\nin_gst - Indian GST number (12ABCDE3456FGZH)\nis_vat - Icelandic VAT (123456)\njp_cn - Japanese Corporate Number (*Hōjin Bangō*) (1234567891234)\njp_rn  Japanese Registered Foreign Businesses' Registration Number (*Tōroku Kokugai Jigyōsha no Tōroku Bangō*) (12345)  # noqa\nkr_brn - Korean BRN (123-45-67890)\nli_uid - Liechtensteinian UID number (CHE123456789)\nmx_rfc - Mexican RFC number (ABC010203AB9)\nmy_frp - Malaysian FRP number (12345678)\nmy_itn - Malaysian ITN (C 1234567890)\nmy_sst - Malaysian SST number (A12-3456-78912345)\nno_vat - Norwegian VAT number (123456789MVA)\nnz_gst - New Zealand GST number (123456789)\nru_inn - Russian INN (1234567891)\nru_kpp - Russian KPP (123456789)\nsa_vat - Saudi Arabia VAT (123456789012345)\nsg_gst - Singaporean GST (M12345678X)\nsg_uen - Singaporean UEN (123456789F)\nsi_tin - Slovenia tax number (davčna številka) (12345678)\nth_vat - Thai VAT (1234567891234)\ntw_vat - Taiwanese VAT (12345678)\nua_vat - Ukrainian VAT (123456789)\nus_ein - United States EIN (12-3456789)\nza_vat - South African VAT number (4123456789)\nunknown - None of the above (Anything's possible here)"
      },
      "VatRateCreator": {
        "type": "string",
        "enum": ["monite", "accounting"],
        "description": "An enumeration."
      },
      "VatRateListResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/VatRateResponse" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "VatRateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the vat rate object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date/time when this rate was recorded in the table."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date/time when this rate was updated in the table."
          },
          "value": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250."
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "valid_until": {
            "type": "string",
            "format": "date",
            "description": "Date when this rate was depreciated, after this date rate cannot be used."
          },
          "valid_from": {
            "type": "string",
            "format": "date",
            "description": "Date starting from when this rate can be used."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/VatRateStatusEnum" }],
            "description": "Status for this vat rate: active | inactive."
          },
          "created_by": {
            "allOf": [{ "$ref": "#/components/schemas/VatRateCreator" }],
            "description": "By whom this rate was recorded: monite employee | accounting system."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "created_at", "updated_at", "value", "country"]
      },
      "VatRateStatusEnum": {
        "type": "string",
        "enum": ["active", "inactive"],
        "description": "An enumeration."
      },
      "VatRateUpdate": {
        "properties": {
          "value": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250."
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "valid_until": {
            "type": "string",
            "format": "date",
            "description": "Date when this rate was depreciated, after this date rate cannot be used."
          },
          "valid_from": {
            "type": "string",
            "format": "date",
            "description": "Date starting from when this rate can be used."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/VatRateStatusEnum" }],
            "description": "Status for this vat rate: active | inactive."
          },
          "created_by": {
            "allOf": [{ "$ref": "#/components/schemas/VatRateCreator" }],
            "description": "By whom this rate was recorded: monite employee | accounting system."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "VerificationAirwallexPlaidRequest": {
        "properties": {
          "client_name": {
            "type": "string",
            "maxLength": 30,
            "minLength": 1,
            "description": "The name of your application to be displayed in Plaid Modal"
          },
          "link_customization_name": {
            "type": "string",
            "minLength": 1,
            "description": "The name of the Link customization configured on the Plaid Dashboard. If not specified, the default customization will be applied"
          },
          "redirect_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "URL to handle the OAuth verification flow"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["client_name", "redirect_url"]
      },
      "VerificationAirwallexPlaidResponse": {
        "properties": {
          "client_name": {
            "type": "string",
            "maxLength": 30,
            "minLength": 1,
            "description": "Client name from the request"
          },
          "link_customization_name": {
            "type": "string",
            "minLength": 1,
            "description": "Customization name from the request"
          },
          "redirect_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "URL from the request"
          },
          "link_token": {
            "type": "string",
            "minLength": 1,
            "description": "Link token that should be used to init Plaid SDK"
          },
          "expires_at": { "type": "string", "format": "date-time" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["client_name", "redirect_url", "link_token", "expires_at"]
      },
      "VerificationError": {
        "properties": {
          "code": { "type": "string" },
          "details": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["code", "details"]
      },
      "VerificationRequest": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/BankAccountVerificationType"
          },
          "airwallex_plaid": {
            "$ref": "#/components/schemas/VerificationAirwallexPlaidRequest"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["type", "airwallex_plaid"]
      },
      "VerificationResponse": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/BankAccountVerificationType"
          },
          "airwallex_plaid": {
            "$ref": "#/components/schemas/VerificationAirwallexPlaidResponse"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["type", "airwallex_plaid"]
      },
      "VerificationStatusEnum": {
        "type": "string",
        "enum": ["enabled", "disabled", "pending"],
        "description": "An enumeration."
      },
      "VerifyPhoneNumberPayload": {
        "properties": {
          "phone": {
            "type": "string",
            "description": "The phone number of person attached to onboarding link"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "VerifyResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Entry UUID"
          },
          "domain": { "type": "string" },
          "status": { "type": "string" }
        },
        "type": "object",
        "required": ["id", "domain", "status"]
      },
      "WebhookDeliveryCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"],
        "description": "An enumeration."
      },
      "WebhookDeliveryPaginationResource": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/WebhookDeliveryResource" },
            "type": "array",
            "description": "A set of webhooks returned per page"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "WebhookDeliveryResource": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "event_id": { "type": "string", "format": "uuid" },
          "requests_made_count": { "type": "integer" },
          "response": { "type": "string" },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          },
          "was_successful": { "type": "boolean" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "event_id", "requests_made_count", "url"]
      },
      "WebhookObjectType": {
        "type": "string",
        "enum": [
          "account",
          "approval",
          "approval_request",
          "approval_policy",
          "batch_payment",
          "comment",
          "counterpart",
          "counterpart_address",
          "counterpart_bank_account",
          "counterpart_contact_person",
          "counterpart_partner_metadata",
          "counterpart_tax_id",
          "entity",
          "entity_bank_account",
          "entity_settings",
          "entity_user",
          "export",
          "partner_settings",
          "payable",
          "payables_purchase_order",
          "payable.line_item",
          "payment",
          "payment_intent",
          "payment_link",
          "product",
          "receivable",
          "recurrence",
          "role",
          "tag",
          "todo_task",
          "workflow",
          "workflow_pipeline",
          "overdue_reminder",
          "payment_reminder",
          "accounting_connection"
        ],
        "description": "An enumeration."
      },
      "WebhookSubscriptionCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"],
        "description": "An enumeration."
      },
      "WebhookSubscriptionPaginationResource": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/WebhookSubscriptionResource"
            },
            "type": "array",
            "description": "A set of webhook settings of different types returned per page"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "WebhookSubscriptionResource": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "event_types": { "items": { "type": "string" }, "type": "array" },
          "object_type": { "$ref": "#/components/schemas/WebhookObjectType" },
          "status": {
            "$ref": "#/components/schemas/WebhookSubscriptionStatus"
          },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          }
        },
        "type": "object",
        "required": ["id", "event_types", "object_type", "status", "url"]
      },
      "WebhookSubscriptionStatus": {
        "type": "string",
        "enum": ["enabled", "disabled"],
        "description": "An enumeration."
      },
      "YapilyCountriesCoverageCodes": {
        "type": "string",
        "enum": ["BE", "GB", "IT", "IE", "NL"],
        "description": "An enumeration."
      },
      "entities__v2022_11_16__schemas__file_saver__FileSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of this file."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date and time when this workflow was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."
          },
          "file_type": {
            "type": "string",
            "description": "The type of the business object associated with this file.",
            "example": "payables"
          },
          "md5": {
            "type": "string",
            "description": "The MD5 hash of the file.",
            "example": "31d1a2dd1ad3dfc39be849d70a68dac0"
          },
          "mimetype": {
            "type": "string",
            "description": "The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).",
            "example": "application/pdf"
          },
          "name": {
            "type": "string",
            "maxLength": 512,
            "description": "The original file name (if available).",
            "example": "invoice.pdf"
          },
          "pages": {
            "items": {
              "$ref": "#/components/schemas/entities__v2022_11_16__schemas__file_saver__PageSchema"
            },
            "type": "array",
            "description": "If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.",
            "default": []
          },
          "previews": {
            "items": {
              "$ref": "#/components/schemas/entities__v2022_11_16__schemas__file_saver__PreviewSchema"
            },
            "type": "array",
            "description": "Preview images generated for this file. There can be multiple images with different sizes.",
            "default": []
          },
          "region": {
            "type": "string",
            "description": "Geographical region of the data center where the file is stored.",
            "example": "eu-central-1"
          },
          "size": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The file size in bytes.",
            "example": 24381
          },
          "url": {
            "type": "string",
            "description": "The URL to download the file.",
            "example": "https://bucketname.s3.amazonaws.com/12345/67890.pdf"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "file_type",
          "md5",
          "mimetype",
          "name",
          "region",
          "size",
          "url"
        ],
        "description": "Represents a file (such as a PDF invoice) that was uploaded to Monite."
      },
      "entities__v2022_11_16__schemas__file_saver__PageSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of the image."
          },
          "mimetype": {
            "type": "string",
            "description": "The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the image.",
            "example": "image/png"
          },
          "number": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The page number in the PDF document, from 0.",
            "example": 0
          },
          "size": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Image file size, in bytes.",
            "example": 21972
          },
          "url": {
            "type": "string",
            "description": "The URL to download the image.",
            "example": "https://bucket.s3.amazonaws.com/123/456.png"
          }
        },
        "type": "object",
        "required": ["id", "mimetype", "number", "size", "url"],
        "description": "When a PDF document is uploaded to Monite, it extracts individual pages from the document\nand saves them as PNG images. This object contains the image and metadata of a single page."
      },
      "entities__v2022_11_16__schemas__file_saver__PreviewSchema": {
        "properties": {
          "height": {
            "type": "integer",
            "description": "The image height in pixels.",
            "example": 400
          },
          "url": {
            "type": "string",
            "description": "The image URL.",
            "example": "https://bucketname.s3.amazonaws.com/1/2/3.png"
          },
          "width": {
            "type": "integer",
            "description": "The image width in pixels.",
            "example": 200
          }
        },
        "type": "object",
        "required": ["height", "url", "width"],
        "description": "A preview image generated for a file."
      },
      "monite__schemas__file_saver__FileSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of this file."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date and time when this workflow was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."
          },
          "file_type": {
            "type": "string",
            "description": "The type of the business object associated with this file.",
            "example": "payables"
          },
          "name": {
            "type": "string",
            "maxLength": 512,
            "description": "The original file name (if available).",
            "example": "invoice.pdf"
          },
          "region": {
            "type": "string",
            "description": "Geographical region of the data center where the file is stored.",
            "example": "eu-central-1"
          },
          "md5": {
            "type": "string",
            "description": "The MD5 hash of the file.",
            "example": "31d1a2dd1ad3dfc39be849d70a68dac0"
          },
          "mimetype": {
            "type": "string",
            "description": "The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).",
            "example": "application/pdf"
          },
          "url": {
            "type": "string",
            "description": "The URL to download the file.",
            "example": "https://bucketname.s3.amazonaws.com/12345/67890.pdf"
          },
          "size": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The file size in bytes.",
            "example": 24381
          },
          "previews": {
            "items": {
              "$ref": "#/components/schemas/monite__schemas__file_saver__PreviewSchema"
            },
            "type": "array",
            "description": "Preview images generated for this file. There can be multiple images with different sizes.",
            "default": []
          },
          "pages": {
            "items": {
              "$ref": "#/components/schemas/monite__schemas__file_saver__PageSchema"
            },
            "type": "array",
            "description": "If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "file_type",
          "name",
          "region",
          "md5",
          "mimetype",
          "url",
          "size"
        ],
        "description": "Represents a file (such as a PDF invoice) that was uploaded to Monite."
      },
      "monite__schemas__file_saver__PageSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of the image."
          },
          "mimetype": {
            "type": "string",
            "description": "The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the image.",
            "example": "image/png"
          },
          "size": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Image file size, in bytes.",
            "example": 21972
          },
          "number": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The page number in the PDF document, from 0.",
            "example": 0
          },
          "url": {
            "type": "string",
            "description": "The URL to download the image.",
            "example": "https://bucket.s3.amazonaws.com/123/456.png"
          }
        },
        "type": "object",
        "required": ["id", "mimetype", "size", "number", "url"],
        "description": "When a PDF document is uploaded to Monite, it extracts individual pages from the document\nand saves them as PNG images. This object contains the image and metadata of a single page."
      },
      "monite__schemas__file_saver__PreviewSchema": {
        "properties": {
          "url": {
            "type": "string",
            "description": "The image URL.",
            "example": "https://bucketname.s3.amazonaws.com/1/2/3.png"
          },
          "width": {
            "type": "integer",
            "description": "The image width in pixels.",
            "example": 200
          },
          "height": {
            "type": "integer",
            "description": "The image height in pixels.",
            "example": 400
          }
        },
        "type": "object",
        "required": ["url", "width", "height"],
        "description": "A preview image generated for a file."
      },
      "package__entities__unversioned__schemas__file_saver__FileSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of this file."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date and time when this workflow was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."
          },
          "file_type": {
            "type": "string",
            "description": "The type of the business object associated with this file.",
            "example": "payables"
          },
          "name": {
            "type": "string",
            "maxLength": 512,
            "description": "The original file name (if available).",
            "example": "invoice.pdf"
          },
          "region": {
            "type": "string",
            "description": "Geographical region of the data center where the file is stored.",
            "example": "eu-central-1"
          },
          "md5": {
            "type": "string",
            "description": "The MD5 hash of the file.",
            "example": "31d1a2dd1ad3dfc39be849d70a68dac0"
          },
          "mimetype": {
            "type": "string",
            "description": "The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).",
            "example": "application/pdf"
          },
          "url": {
            "type": "string",
            "description": "The URL to download the file.",
            "example": "https://bucketname.s3.amazonaws.com/12345/67890.pdf"
          },
          "size": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The file size in bytes.",
            "example": 24381
          },
          "previews": {
            "items": {
              "$ref": "#/components/schemas/package__entities__unversioned__schemas__file_saver__PreviewSchema"
            },
            "type": "array",
            "description": "Preview images generated for this file. There can be multiple images with different sizes.",
            "default": []
          },
          "pages": {
            "items": {
              "$ref": "#/components/schemas/package__entities__unversioned__schemas__file_saver__PageSchema"
            },
            "type": "array",
            "description": "If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "file_type",
          "name",
          "region",
          "md5",
          "mimetype",
          "url",
          "size"
        ],
        "description": "Represents a file (such as a PDF invoice) that was uploaded to Monite."
      },
      "package__entities__unversioned__schemas__file_saver__PageSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of the image."
          },
          "mimetype": {
            "type": "string",
            "description": "The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the image.",
            "example": "image/png"
          },
          "size": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Image file size, in bytes.",
            "example": 21972
          },
          "number": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The page number in the PDF document, from 0.",
            "example": 0
          },
          "url": {
            "type": "string",
            "description": "The URL to download the image.",
            "example": "https://bucket.s3.amazonaws.com/123/456.png"
          }
        },
        "type": "object",
        "required": ["id", "mimetype", "size", "number", "url"],
        "description": "When a PDF document is uploaded to Monite, it extracts individual pages from the document\nand saves them as PNG images. This object contains the image and metadata of a single page."
      },
      "package__entities__unversioned__schemas__file_saver__PreviewSchema": {
        "properties": {
          "url": {
            "type": "string",
            "description": "The image URL.",
            "example": "https://bucketname.s3.amazonaws.com/1/2/3.png"
          },
          "width": {
            "type": "integer",
            "description": "The image width in pixels.",
            "example": 200
          },
          "height": {
            "type": "integer",
            "description": "The image height in pixels.",
            "example": 400
          }
        },
        "type": "object",
        "required": ["url", "width", "height"],
        "description": "A preview image generated for a file."
      }
    },
    "securitySchemes": { "HTTPBearer": { "type": "http", "scheme": "bearer" } }
  },
  "tags": [
    { "name": "Access tokens" },
    { "name": "Accounting connections" },
    { "name": "Accounting synchronization rules" },
    { "name": "Approval policies" },
    { "name": "Approval requests" },
    { "name": "Audit logs" },
    { "name": "Auth" },
    { "name": "Batch payments" },
    { "name": "Comments" },
    { "name": "Companies" },
    { "name": "Counterpart VAT IDs" },
    { "name": "Counterpart addresses" },
    { "name": "Counterpart bank accounts" },
    { "name": "Counterpart contacts" },
    { "name": "Counterparts" },
    { "name": "Currencies internal" },
    { "name": "Data exports" },
    { "name": "Email exists" },
    { "name": "Entities" },
    { "name": "Entity VAT IDs" },
    { "name": "Entity bank account verifications" },
    { "name": "Entity bank accounts" },
    { "name": "Entity onboarding data" },
    { "name": "Entity user role" },
    { "name": "Entity users" },
    { "name": "Extra data" },
    { "name": "Files" },
    { "name": "Internal" },
    { "name": "Ledger accounts" },
    { "name": "Mail templates" },
    { "name": "Mailbox domains" },
    { "name": "Mailboxes" },
    { "name": "Measure units" },
    { "name": "Onboarding" },
    { "name": "Onboarding documents" },
    { "name": "Onboarding links" },
    { "name": "Onboarding requirements" },
    { "name": "Overdue reminders" },
    { "name": "PDF templates" },
    { "name": "Payable line items" },
    { "name": "Payable tags" },
    { "name": "Payables" },
    { "name": "Payment intents" },
    { "name": "Payment intents internal" },
    { "name": "Payment links" },
    { "name": "Payment methods" },
    { "name": "Payment records" },
    { "name": "Payment reminders" },
    { "name": "Payment terms" },
    { "name": "Persons" },
    { "name": "Products" },
    { "name": "Profile" },
    { "name": "Project dictionaries" },
    { "name": "Project settings" },
    { "name": "Projects" },
    { "name": "Projects settings" },
    { "name": "Purchase orders" },
    { "name": "Receivables" },
    { "name": "Recurrences" },
    { "name": "Register" },
    { "name": "Roles" },
    { "name": "Secrets" },
    { "name": "Text templates" },
    { "name": "Users" },
    { "name": "VAT rates" },
    { "name": "VAT rates internal" },
    { "name": "Webhook settings" },
    { "name": "Webhooks" },
    { "name": "admin" }
  ]
}
